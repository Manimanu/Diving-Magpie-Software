// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.41  $
// File generated on 11/18/00 12:15:56 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Wombat\Pro\DMS_XML_XSL\XML_XSL.tlb (1)
// IID\LCID: {730AD0F6-51D3-11D4-8A10-0020AFCC5695}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\Stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __XML_XSLLib_TLB_h__
#define   __XML_XSLLib_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Xml_xsllib_tlb
{

// *********************************************************************//
// HelpString: XML_XSL 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_XML_XSLLib;
extern __declspec (package) const GUID IID_IDMS_XML2XSL;
extern __declspec (package) const GUID CLSID_DMS_XML2XSL;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{730AD102-51D3-11D4-8A10-0020AFCC5695}") IDMS_XML2XSL;
typedef TComInterface<IDMS_XML2XSL, &IID_IDMS_XML2XSL> IDMS_XML2XSLPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_XML2XSL DMS_XML2XSL;
typedef IDMS_XML2XSLPtr DMS_XML2XSLPtr;

#define LIBID_OF_DMS_XML2XSL (&LIBID_XML_XSLLib)
// *********************************************************************//
// Interface: IDMS_XML2XSL
// Flags:     (0)
// GUID:      {730AD102-51D3-11D4-8A10-0020AFCC5695}
// *********************************************************************//
interface IDMS_XML2XSL  : public IUnknown
{
public:
  // [-1] get XML_FileName
  virtual HRESULT STDMETHODCALLTYPE get_XML_FileName(BSTR* pVal/*[out,retval]*/) = 0;
  // [1610678272] get XML_FileName
  virtual HRESULT STDMETHODCALLTYPE set_XML_FileName(BSTR pVal/*[in]*/) = 0;
  // [-1] get XSL_FileName
  virtual HRESULT STDMETHODCALLTYPE get_XSL_FileName(BSTR* pVal/*[out,retval]*/) = 0;
  // [1610678274] get XSL_FileName
  virtual HRESULT STDMETHODCALLTYPE set_XSL_FileName(BSTR pVal/*[in]*/) = 0;
  // [-1] get Output_FileName
  virtual HRESULT STDMETHODCALLTYPE get_Output_FileName(BSTR* pVal/*[out,retval]*/) = 0;
  // [1610678276] get Output_FileName
  virtual HRESULT STDMETHODCALLTYPE set_Output_FileName(BSTR pVal/*[in]*/) = 0;
  // [-1] apply style sheet to XML data & output to file
  virtual HRESULT STDMETHODCALLTYPE Apply_XSL_XML(void) = 0;
  // [-1] print output file to default printer
  virtual HRESULT STDMETHODCALLTYPE Print(void) = 0;
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_XML2XSL
// Interface: IDMS_XML2XSL
// *********************************************************************//
template <class T /* IDMS_XML2XSL */ >
class TCOMIDMS_XML2XSLT : public TComInterface<IDMS_XML2XSL>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_XML2XSLT() {}
  TCOMIDMS_XML2XSLT(IDMS_XML2XSL *intf, bool addRef = false) : TComInterface<IDMS_XML2XSL>(intf, addRef) {}
  TCOMIDMS_XML2XSLT(const TCOMIDMS_XML2XSLT& src) : TComInterface<IDMS_XML2XSL>(src) {}
  TCOMIDMS_XML2XSLT& operator=(const TCOMIDMS_XML2XSLT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_XML_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_XML_FileName(void);
  HRESULT         __fastcall set_XML_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_XSL_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_XSL_FileName(void);
  HRESULT         __fastcall set_XSL_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Output_FileName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Output_FileName(void);
  HRESULT         __fastcall set_Output_FileName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall Apply_XSL_XML(void);
  HRESULT         __fastcall Print(void);

  __property   BSTR            XML_FileName = {read = get_XML_FileName, write = set_XML_FileName};
  __property   BSTR            XSL_FileName = {read = get_XSL_FileName, write = set_XSL_FileName};
  __property   BSTR            Output_FileName = {read = get_Output_FileName, write = set_Output_FileName};
};
typedef TCOMIDMS_XML2XSLT<IDMS_XML2XSL> TCOMIDMS_XML2XSL;

// *********************************************************************//
// SmartIntf: TCOMIDMS_XML2XSL
// Interface: IDMS_XML2XSL
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::get_XML_FileName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_XML_FileName(pVal);
}

template <class T> BSTR __fastcall
TCOMIDMS_XML2XSLT<T>::get_XML_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_XML_FileName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::set_XML_FileName(BSTR pVal/*[in]*/)
{
  return (*this)->set_XML_FileName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::get_XSL_FileName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_XSL_FileName(pVal);
}

template <class T> BSTR __fastcall
TCOMIDMS_XML2XSLT<T>::get_XSL_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_XSL_FileName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::set_XSL_FileName(BSTR pVal/*[in]*/)
{
  return (*this)->set_XSL_FileName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::get_Output_FileName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Output_FileName(pVal);
}

template <class T> BSTR __fastcall
TCOMIDMS_XML2XSLT<T>::get_Output_FileName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Output_FileName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::set_Output_FileName(BSTR pVal/*[in]*/)
{
  return (*this)->set_Output_FileName(pVal);
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::Apply_XSL_XML(void)
{
  return (*this)->Apply_XSL_XML();
}

template <class T> HRESULT __fastcall
TCOMIDMS_XML2XSLT<T>::Print(void)
{
  return (*this)->Print();
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_XML2XSL
// Interface: TCOMIDMS_XML2XSL
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_XML2XSL, IDMS_XML2XSL, &CLSID_DMS_XML2XSL, &IID_IDMS_XML2XSL> CoDMS_XML2XSL;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Xml_xsllib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Xml_xsllib_tlb;
#endif

#pragma option pop

#endif // __XML_XSLLib_TLB_h__
