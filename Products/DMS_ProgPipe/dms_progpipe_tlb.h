// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.39  $
// File generated on 10/25/00 1:37:47 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\temp\ProgPipe\ProgPipe.tlb (1)
// IID\LCID: {66DDC6D0-AA5D-11D4-83E2-00104BB2580C}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DMS_ProgPipe_TLB_h__
#define   __DMS_ProgPipe_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace DMS_Progpipe_tlb
{

// *********************************************************************//
// HelpString: ProgPipe Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_ProgPipe;
extern __declspec (package) const GUID IID_IDMS_ProgPipe;
extern __declspec (package) const GUID CLSID_DMS_ProgPipe;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{66DDC6D1-AA5D-11D4-83E2-00104BB2580C}") IDMS_ProgPipe;
typedef TComInterface<IDMS_ProgPipe, &IID_IDMS_ProgPipe> IDMS_ProgPipePtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_ProgPipe DMS_ProgPipe;
typedef IDMS_ProgPipePtr DMS_ProgPipePtr;

#define LIBID_OF_DMS_ProgPipe (&LIBID_ProgPipe)
// *********************************************************************//
// Interface: IDMS_ProgPipe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66DDC6D1-AA5D-11D4-83E2-00104BB2580C}
// *********************************************************************//
interface IDMS_ProgPipe  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Show(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Hide(void) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE Step(void) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_TotalSteps(long* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_TotalSteps(long Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Title(BSTR Value/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentStep(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentStep(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Icon(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Message(BSTR* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_Message(BSTR Value/*[in]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_TotalSteps(void)
  {
    long Value;
    OLECHECK(this->get_TotalSteps((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Title(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Title((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Text((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_CurrentStep(void)
  {
    long Value;
    OLECHECK(this->get_CurrentStep((long*)&Value));
    return Value;
  }

  long __fastcall get_Icon(void)
  {
    long Value;
    OLECHECK(this->get_Icon((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_Message(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Message((BSTR*)&Value));
    return Value;
  }


  __property   long            TotalSteps = {read = get_TotalSteps, write = set_TotalSteps};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            CurrentStep = {read = get_CurrentStep, write = set_CurrentStep};
  __property   long            Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Message = {read = get_Message, write = set_Message};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_ProgPipe
// Interface: IDMS_ProgPipe
// *********************************************************************//
template <class T /* IDMS_ProgPipe */ >
class TCOMIDMS_ProgPipeT : public TComInterface<IDMS_ProgPipe>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_ProgPipeT() {}
  TCOMIDMS_ProgPipeT(IDMS_ProgPipe *intf, bool addRef = false) : TComInterface<IDMS_ProgPipe>(intf, addRef) {}
  TCOMIDMS_ProgPipeT(const TCOMIDMS_ProgPipeT& src) : TComInterface<IDMS_ProgPipe>(src) {}
  TCOMIDMS_ProgPipeT& operator=(const TCOMIDMS_ProgPipeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Show(void);
  HRESULT         __fastcall Hide(void);
  HRESULT         __fastcall Step(void);
  HRESULT         __fastcall get_TotalSteps(long* Value/*[out,retval]*/);
  long            __fastcall get_TotalSteps(void);
  HRESULT         __fastcall set_TotalSteps(long Value/*[in]*/);
  HRESULT         __fastcall get_Title(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CurrentStep(long* Value/*[out,retval]*/);
  long            __fastcall get_CurrentStep(void);
  HRESULT         __fastcall set_CurrentStep(long Value/*[in]*/);
  HRESULT         __fastcall get_Icon(long* Value/*[out,retval]*/);
  long            __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);
  HRESULT         __fastcall Reset(void);
  HRESULT         __fastcall get_Message(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Message(void);
  HRESULT         __fastcall set_Message(BSTR Value/*[in]*/);

  __property   long            TotalSteps = {read = get_TotalSteps, write = set_TotalSteps};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            CurrentStep = {read = get_CurrentStep, write = set_CurrentStep};
  __property   long            Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Message = {read = get_Message, write = set_Message};
};
typedef TCOMIDMS_ProgPipeT<IDMS_ProgPipe> TCOMIDMS_ProgPipe;

// *********************************************************************//
// DispIntf:  IDMS_ProgPipe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66DDC6D1-AA5D-11D4-83E2-00104BB2580C}
// *********************************************************************//
template<class T>
class IDMS_ProgPipeDispT : public TAutoDriver<IDMS_ProgPipe>
{
public:
  IDMS_ProgPipeDispT(){}

  IDMS_ProgPipeDispT(IDMS_ProgPipe *pintf)
  {
    TAutoDriver<IDMS_ProgPipe>::Bind(pintf, false);
  }

  IDMS_ProgPipeDispT(IDMS_ProgPipePtr pintf)
  {
    TAutoDriver<IDMS_ProgPipe>::Bind(pintf, true);
  }

  IDMS_ProgPipeDispT& operator=(IDMS_ProgPipe *pintf)
  {
    TAutoDriver<IDMS_ProgPipe>::Bind(pintf, false);
    return *this;
  }

  IDMS_ProgPipeDispT& operator=(IDMS_ProgPipePtr pintf)
  {
    TAutoDriver<IDMS_ProgPipe>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DMS_ProgPipe));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DMS_ProgPipe);
  }

  HRESULT         __fastcall Show();
  HRESULT         __fastcall Hide();
  HRESULT         __fastcall Step();
  HRESULT         __fastcall get_TotalSteps(long* Value/*[out,retval]*/);
  long            __fastcall get_TotalSteps(void);
  HRESULT         __fastcall set_TotalSteps(long Value/*[in]*/);
  HRESULT         __fastcall get_Title(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_CurrentStep(long* Value/*[out,retval]*/);
  long            __fastcall get_CurrentStep(void);
  HRESULT         __fastcall set_CurrentStep(long Value/*[in]*/);
  HRESULT         __fastcall get_Icon(long* Value/*[out,retval]*/);
  long            __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);
  HRESULT         __fastcall Reset();
  HRESULT         __fastcall get_Message(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Message(void);
  HRESULT         __fastcall set_Message(BSTR Value/*[in]*/);

  __property   long            TotalSteps = {read = get_TotalSteps, write = set_TotalSteps};
  __property   BSTR            Title = {read = get_Title, write = set_Title};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   long            CurrentStep = {read = get_CurrentStep, write = set_CurrentStep};
  __property   long            Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Message = {read = get_Message, write = set_Message};
};
typedef IDMS_ProgPipeDispT<IDMS_ProgPipe> IDMS_ProgPipeDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMS_ProgPipe
// Interface: IDMS_ProgPipe
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::Show(void)
{
  return (*this)->Show();
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::Hide(void)
{
  return (*this)->Hide();
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::Step(void)
{
  return (*this)->Step();
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_TotalSteps(long* Value/*[out,retval]*/)
{
  return (*this)->get_TotalSteps(Value);
}

template <class T> long __fastcall
TCOMIDMS_ProgPipeT<T>::get_TotalSteps(void)
{
  long Value;
  OLECHECK(this->get_TotalSteps((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_TotalSteps(long Value/*[in]*/)
{
  return (*this)->set_TotalSteps(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_Title(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Title(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_ProgPipeT<T>::get_Title(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Title((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_Title(BSTR Value/*[in]*/)
{
  return (*this)->set_Title(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_Text(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Text(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_ProgPipeT<T>::get_Text(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Text((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_Text(BSTR Value/*[in]*/)
{
  return (*this)->set_Text(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_CurrentStep(long* Value/*[out,retval]*/)
{
  return (*this)->get_CurrentStep(Value);
}

template <class T> long __fastcall
TCOMIDMS_ProgPipeT<T>::get_CurrentStep(void)
{
  long Value;
  OLECHECK(this->get_CurrentStep((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_CurrentStep(long Value/*[in]*/)
{
  return (*this)->set_CurrentStep(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_Icon(long* Value/*[out,retval]*/)
{
  return (*this)->get_Icon(Value);
}

template <class T> long __fastcall
TCOMIDMS_ProgPipeT<T>::get_Icon(void)
{
  long Value;
  OLECHECK(this->get_Icon((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_Icon(long Value/*[in]*/)
{
  return (*this)->set_Icon(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::Reset(void)
{
  return (*this)->Reset();
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::get_Message(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Message(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_ProgPipeT<T>::get_Message(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Message((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_ProgPipeT<T>::set_Message(BSTR Value/*[in]*/)
{
  return (*this)->set_Message(Value);
}

// *********************************************************************//
// DispIntf:  IDMS_ProgPipe
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {66DDC6D1-AA5D-11D4-83E2-00104BB2580C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::Hide()
{
  _TDispID _dispid(*this, OLETEXT("Hide"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::Step()
{
  _TDispID _dispid(*this, OLETEXT("Step"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_TotalSteps(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalSteps"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_ProgPipeDispT<T>::get_TotalSteps(void)
{
  long Value;
  this->get_TotalSteps((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_TotalSteps(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalSteps"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_Title(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_ProgPipeDispT<T>::get_Title(void)
{
  BSTR Value;
  this->get_Title((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_Title(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_Text(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_ProgPipeDispT<T>::get_Text(void)
{
  BSTR Value;
  this->get_Text((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_Text(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_CurrentStep(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentStep"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_ProgPipeDispT<T>::get_CurrentStep(void)
{
  long Value;
  this->get_CurrentStep((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_CurrentStep(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentStep"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_Icon(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_ProgPipeDispT<T>::get_Icon(void)
{
  long Value;
  this->get_Icon((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_Icon(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::get_Message(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_ProgPipeDispT<T>::get_Message(void)
{
  BSTR Value;
  this->get_Message((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_ProgPipeDispT<T>::set_Message(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Message"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_ProgPipe
// Interface: TCOMIDMS_ProgPipe
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_ProgPipe, IDMS_ProgPipe, &CLSID_DMS_ProgPipe, &IID_IDMS_ProgPipe> CoDMS_ProgPipe;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Progpipe_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace DMS_Progpipe_tlb;
#endif

#pragma option pop

#endif // __ProgPipe_TLB_h__
