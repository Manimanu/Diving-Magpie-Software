// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.96.1.40  $
// File generated on 5/28/00 5:05:46 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Wombat\Pro\DMS_PDFWorks\DMS_PDFWks.dll
// IID\LCID: {B147E1AA-33C6-11D4-89E8-0020AFCC5695}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\StdOle2.Tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DMS_PDFWks_TLB_h__
#define   __DMS_PDFWks_TLB_h__

#pragma option push -b -w-inl

#include <vcl/utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0102)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
// NOTE: If the following error is triggered, you probably need to     
//       get a patch to the TLIBIMP.EXE utility or the C++Builder IDE. 
//       Patches/updates are posted on the Borland Website.            
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

namespace Dms_pdfwks_tlb
{

// *********************************************************************//
// HelpString: DMS_PDFWks Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern const GUID LIBID_DMS_PDFWks;
extern const GUID IID_IDMS_PDFWorks;
extern const GUID CLSID_DMS_PDFWorks;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      PDF_PAPER_SIZE;
enum      PDF_UNITS;
struct    PDF_PageSetup;
struct    PDF_Info;
struct    PDF_ImageSetup;
struct    PDF_Setup;
interface DECLSPEC_UUID("{B147E1AB-33C6-11D4-89E8-0020AFCC5695}") IDMS_PDFWorks;
typedef TComInterface<IDMS_PDFWorks, &IID_IDMS_PDFWorks> IDMS_PDFWorksPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_PDFWorks DMS_PDFWorks;
typedef TComInterface<DMS_PDFWorks, &IID_IDMS_PDFWorks> DMS_PDFWorksPtr;

#define LIBID_OF_DMS_PDFWorks (&LIBID_DMS_PDFWks)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum PDF_PAPER_SIZE
{
  PAPER_SIZE_A0 = 0, 
  PAPER_SIZE_A1 = 1, 
  PAPER_SIZE_A2 = 2, 
  PAPER_SIZE_A3 = 3, 
  PAPER_SIZE_A4 = 4, 
  PAPER_SIZE_A5 = 5, 
  PAPER_SIZE_A6 = 6, 
  PAPER_SIZE_B5 = 7, 
  PAPER_SIZE_LETTER = 8, 
  PAPER_SIZE_LEGAL = 9, 
  PAPER_SIZE_LEDGER = 10, 
  PAPER_SIZE_P11x17 = 11, 
  PAPER_SIZE_USER = 12
} PDF_PAPER_SIZE;

typedef enum PDF_UNITS
{
  UNITS_MILLIMETERS = 0, 
  UNITS_INCHES = 1, 
  UNITS_POINTS = 2
} PDF_UNITS;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct PDF_PageSetup
{
  long MarginTop;
  long MarginBottom;
  long MarginLeft;
  long MarginRight;
  Dms_pdfwks_tlb::PDF_PAPER_SIZE PaperSize;
  long PaperHeight;
  long PaperWidth;
  long Landscape;
  long ScaleToFit;
  long KeepAspectRatio;
  double Scale;
  long CentreOnPage;
};

struct PDF_Info
{
  BSTR InfoSubject;
  BSTR InfoTitle;
  BSTR InfoCreator;
  BSTR InfoAuthor;
  BSTR InfoKeyWords;
};

struct PDF_ImageSetup
{
  long JPGQuality;
  long ImageHeight;
  long ImageWidth;
  long Stretch;
};

struct PDF_Setup
{
  Dms_pdfwks_tlb::PDF_PageSetup PageSetup;
  Dms_pdfwks_tlb::PDF_Info Info;
  Dms_pdfwks_tlb::PDF_ImageSetup ImageSetup;
  Dms_pdfwks_tlb::PDF_UNITS Units;
};

// *********************************************************************//
// Interface: IDMS_PDFWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B147E1AB-33C6-11D4-89E8-0020AFCC5695}
// *********************************************************************//
interface IDMS_PDFWorks : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Configure(BSTR sTitle/*[in]*/, long* bOK/*[out]*/, 
                                              Dms_pdfwks_tlb::PDF_Setup* pPDF_Setup/*[in,out]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(long Param1/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE ClipBoardToJPGFile(BSTR sFileName/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE ClipBoardToBMPFile(BSTR sFileName/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE ClipBoardToGIFFile(BSTR sFileName/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE ClipBoardToPDFFile(BSTR sFileName/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_JPGQuality(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_JPGQuality(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_MarginTop(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_MarginTop(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_MarginBottom(long* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_MarginBottom(long Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_PaperSize(long* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_PaperSize(long Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PaperWidth(long* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_PaperWidth(long Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_PaperHeight(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_PaperHeight(long Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Landscape(long* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_Landscape(long Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleToFit(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleToFit(long Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_CentreOnPage(long* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_CentreOnPage(long Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_InfoSubject(BSTR* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_InfoSubject(BSTR Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_InfoTitle(BSTR* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_InfoTitle(BSTR Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_InfoCreator(BSTR* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_InfoCreator(BSTR Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_InfoAuthor(BSTR* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_InfoAuthor(BSTR Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Units(long* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_Units(long Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Scale(double* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Scale(double Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_MarginLeft(long* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_MarginLeft(long Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_MarginRight(long* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_MarginRight(long Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ImageHeight(long* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_ImageHeight(long Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_ImageWidth(long* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_ImageWidth(long Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Stretch(long* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_Stretch(long Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_InfoKeyWords(BSTR* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_InfoKeyWords(BSTR Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE Initialise(Dms_pdfwks_tlb::PDF_Setup PDF_Init/*[in]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_JPGQuality(void)
  {
    long Value;
    OLECHECK(this->get_JPGQuality((long*)&Value));
    return Value;
  }

  long __fastcall get_MarginTop(void)
  {
    long Value;
    OLECHECK(this->get_MarginTop((long*)&Value));
    return Value;
  }

  long __fastcall get_MarginBottom(void)
  {
    long Value;
    OLECHECK(this->get_MarginBottom((long*)&Value));
    return Value;
  }

  long __fastcall get_PaperSize(void)
  {
    long Value;
    OLECHECK(this->get_PaperSize((long*)&Value));
    return Value;
  }

  long __fastcall get_PaperWidth(void)
  {
    long Value;
    OLECHECK(this->get_PaperWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_PaperHeight(void)
  {
    long Value;
    OLECHECK(this->get_PaperHeight((long*)&Value));
    return Value;
  }

  long __fastcall get_Landscape(void)
  {
    long Value;
    OLECHECK(this->get_Landscape((long*)&Value));
    return Value;
  }

  long __fastcall get_ScaleToFit(void)
  {
    long Value;
    OLECHECK(this->get_ScaleToFit((long*)&Value));
    return Value;
  }

  long __fastcall get_CentreOnPage(void)
  {
    long Value;
    OLECHECK(this->get_CentreOnPage((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_InfoSubject(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_InfoSubject((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_InfoTitle(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_InfoTitle((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_InfoCreator(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_InfoCreator((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_InfoAuthor(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_InfoAuthor((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Units(void)
  {
    long Value;
    OLECHECK(this->get_Units((long*)&Value));
    return Value;
  }

  double __fastcall get_Scale(void)
  {
    double Value;
    OLECHECK(this->get_Scale((double*)&Value));
    return Value;
  }

  long __fastcall get_MarginLeft(void)
  {
    long Value;
    OLECHECK(this->get_MarginLeft((long*)&Value));
    return Value;
  }

  long __fastcall get_MarginRight(void)
  {
    long Value;
    OLECHECK(this->get_MarginRight((long*)&Value));
    return Value;
  }

  long __fastcall get_ImageHeight(void)
  {
    long Value;
    OLECHECK(this->get_ImageHeight((long*)&Value));
    return Value;
  }

  long __fastcall get_ImageWidth(void)
  {
    long Value;
    OLECHECK(this->get_ImageWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_Stretch(void)
  {
    long Value;
    OLECHECK(this->get_Stretch((long*)&Value));
    return Value;
  }

  BSTR __fastcall get_InfoKeyWords(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_InfoKeyWords((BSTR*)&Value));
    return Value;
  }


  __property   long            Icon = {write = set_Icon};
  __property   long            JPGQuality = {read = get_JPGQuality, write = set_JPGQuality};
  __property   long            MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   long            MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   long            PaperSize = {read = get_PaperSize, write = set_PaperSize};
  __property   long            PaperWidth = {read = get_PaperWidth, write = set_PaperWidth};
  __property   long            PaperHeight = {read = get_PaperHeight, write = set_PaperHeight};
  __property   long            Landscape = {read = get_Landscape, write = set_Landscape};
  __property   long            ScaleToFit = {read = get_ScaleToFit, write = set_ScaleToFit};
  __property   long            CentreOnPage = {read = get_CentreOnPage, write = set_CentreOnPage};
  __property   BSTR            InfoSubject = {read = get_InfoSubject, write = set_InfoSubject};
  __property   BSTR            InfoTitle = {read = get_InfoTitle, write = set_InfoTitle};
  __property   BSTR            InfoCreator = {read = get_InfoCreator, write = set_InfoCreator};
  __property   BSTR            InfoAuthor = {read = get_InfoAuthor, write = set_InfoAuthor};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   double          Scale = {read = get_Scale, write = set_Scale};
  __property   long            MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   long            MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   long            Stretch = {read = get_Stretch, write = set_Stretch};
  __property   BSTR            InfoKeyWords = {read = get_InfoKeyWords, write = set_InfoKeyWords};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_PDFWorks
// Interface: IDMS_PDFWorks
// *********************************************************************//
template <class T /* IDMS_PDFWorks */ >
class TCOMIDMS_PDFWorksT : public TComInterface<IDMS_PDFWorks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_PDFWorksT() {}
  TCOMIDMS_PDFWorksT(IDMS_PDFWorks *intf, bool addRef = false) : TComInterface<IDMS_PDFWorks>(intf, addRef) {}
  TCOMIDMS_PDFWorksT(const TCOMIDMS_PDFWorksT& src) : TComInterface<IDMS_PDFWorks>(src) {}
  TCOMIDMS_PDFWorksT& operator=(const TCOMIDMS_PDFWorksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Configure(BSTR sTitle/*[in]*/, long* bOK/*[out]*/, 
                                       Dms_pdfwks_tlb::PDF_Setup* pPDF_Setup/*[in,out]*/);
  HRESULT         __fastcall set_Icon(long Param1/*[in]*/);
  HRESULT         __fastcall ClipBoardToJPGFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToBMPFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToGIFFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToPDFFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall get_JPGQuality(long* Value/*[out,retval]*/);
  long            __fastcall get_JPGQuality(void);
  HRESULT         __fastcall set_JPGQuality(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginTop(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperSize(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperSize(void);
  HRESULT         __fastcall set_PaperSize(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperWidth(void);
  HRESULT         __fastcall set_PaperWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperHeight(void);
  HRESULT         __fastcall set_PaperHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_Landscape(long* Value/*[out,retval]*/);
  long            __fastcall get_Landscape(void);
  HRESULT         __fastcall set_Landscape(long Value/*[in]*/);
  HRESULT         __fastcall get_ScaleToFit(long* Value/*[out,retval]*/);
  long            __fastcall get_ScaleToFit(void);
  HRESULT         __fastcall set_ScaleToFit(long Value/*[in]*/);
  HRESULT         __fastcall get_CentreOnPage(long* Value/*[out,retval]*/);
  long            __fastcall get_CentreOnPage(void);
  HRESULT         __fastcall set_CentreOnPage(long Value/*[in]*/);
  HRESULT         __fastcall get_InfoSubject(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoSubject(void);
  HRESULT         __fastcall set_InfoSubject(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoTitle(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoTitle(void);
  HRESULT         __fastcall set_InfoTitle(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoCreator(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoCreator(void);
  HRESULT         __fastcall set_InfoCreator(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoAuthor(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoAuthor(void);
  HRESULT         __fastcall set_InfoAuthor(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Units(long* Value/*[out,retval]*/);
  long            __fastcall get_Units(void);
  HRESULT         __fastcall set_Units(long Value/*[in]*/);
  HRESULT         __fastcall get_Scale(double* Value/*[out,retval]*/);
  double          __fastcall get_Scale(void);
  HRESULT         __fastcall set_Scale(double Value/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginRight(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(long Value/*[in]*/);
  HRESULT         __fastcall get_ImageHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ImageHeight(void);
  HRESULT         __fastcall set_ImageHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_ImageWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ImageWidth(void);
  HRESULT         __fastcall set_ImageWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Stretch(long* Value/*[out,retval]*/);
  long            __fastcall get_Stretch(void);
  HRESULT         __fastcall set_Stretch(long Value/*[in]*/);
  HRESULT         __fastcall get_InfoKeyWords(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoKeyWords(void);
  HRESULT         __fastcall set_InfoKeyWords(BSTR Value/*[in]*/);
  HRESULT         __fastcall Initialise(Dms_pdfwks_tlb::PDF_Setup PDF_Init/*[in]*/);

  __property   long            Icon = {write = set_Icon};
  __property   long            JPGQuality = {read = get_JPGQuality, write = set_JPGQuality};
  __property   long            MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   long            MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   long            PaperSize = {read = get_PaperSize, write = set_PaperSize};
  __property   long            PaperWidth = {read = get_PaperWidth, write = set_PaperWidth};
  __property   long            PaperHeight = {read = get_PaperHeight, write = set_PaperHeight};
  __property   long            Landscape = {read = get_Landscape, write = set_Landscape};
  __property   long            ScaleToFit = {read = get_ScaleToFit, write = set_ScaleToFit};
  __property   long            CentreOnPage = {read = get_CentreOnPage, write = set_CentreOnPage};
  __property   BSTR            InfoSubject = {read = get_InfoSubject, write = set_InfoSubject};
  __property   BSTR            InfoTitle = {read = get_InfoTitle, write = set_InfoTitle};
  __property   BSTR            InfoCreator = {read = get_InfoCreator, write = set_InfoCreator};
  __property   BSTR            InfoAuthor = {read = get_InfoAuthor, write = set_InfoAuthor};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   double          Scale = {read = get_Scale, write = set_Scale};
  __property   long            MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   long            MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   long            Stretch = {read = get_Stretch, write = set_Stretch};
  __property   BSTR            InfoKeyWords = {read = get_InfoKeyWords, write = set_InfoKeyWords};
};
typedef TCOMIDMS_PDFWorksT<IDMS_PDFWorks> TCOMIDMS_PDFWorks;

// *********************************************************************//
// DispIntf:  IDMS_PDFWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B147E1AB-33C6-11D4-89E8-0020AFCC5695}
// *********************************************************************//
template<class T>
class IDMS_PDFWorksDispT : public TAutoDriver<IDMS_PDFWorks>
{
public:
  IDMS_PDFWorksDispT(){}

  IDMS_PDFWorksDispT(IDMS_PDFWorks *pintf)
  {
    TAutoDriver<IDMS_PDFWorks>::Bind(pintf, false);
  }

  IDMS_PDFWorksDispT(IDMS_PDFWorksPtr pintf)
  {
    TAutoDriver<IDMS_PDFWorks>::Bind(pintf, true);
  }

  IDMS_PDFWorksDispT& operator=(IDMS_PDFWorks *pintf)
  {
    TAutoDriver<IDMS_PDFWorks>::Bind(pintf, false);
    return *this;
  }

  IDMS_PDFWorksDispT& operator=(IDMS_PDFWorksPtr pintf)
  {
    TAutoDriver<IDMS_PDFWorks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault(/*Binds to new instance of CoClass DMS_PDFWorks*/)
  {
    return OLECHECK(Bind(CLSID_DMS_PDFWorks));
  }

  HRESULT BindRunning(/*Binds to a running instance of CoClass DMS_PDFWorks*/)
  {
    return BindToActive(CLSID_DMS_PDFWorks);
  }

  HRESULT         __fastcall Configure(BSTR sTitle/*[in]*/, long* bOK/*[out]*/, 
                                       /*AUTO_PARAM_ERROR(Dms_pdfwks_tlb::PDF_Setup* pPDF_Setup)*/ TVariant&  pPDF_Setup);
  HRESULT         __fastcall set_Icon(long Param1/*[in]*/);
  HRESULT         __fastcall ClipBoardToJPGFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToBMPFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToGIFFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall ClipBoardToPDFFile(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall get_JPGQuality(long* Value/*[out,retval]*/);
  long            __fastcall get_JPGQuality(void);
  HRESULT         __fastcall set_JPGQuality(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginTop(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginTop(void);
  HRESULT         __fastcall set_MarginTop(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginBottom(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginBottom(void);
  HRESULT         __fastcall set_MarginBottom(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperSize(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperSize(void);
  HRESULT         __fastcall set_PaperSize(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperWidth(void);
  HRESULT         __fastcall set_PaperWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_PaperHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_PaperHeight(void);
  HRESULT         __fastcall set_PaperHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_Landscape(long* Value/*[out,retval]*/);
  long            __fastcall get_Landscape(void);
  HRESULT         __fastcall set_Landscape(long Value/*[in]*/);
  HRESULT         __fastcall get_ScaleToFit(long* Value/*[out,retval]*/);
  long            __fastcall get_ScaleToFit(void);
  HRESULT         __fastcall set_ScaleToFit(long Value/*[in]*/);
  HRESULT         __fastcall get_CentreOnPage(long* Value/*[out,retval]*/);
  long            __fastcall get_CentreOnPage(void);
  HRESULT         __fastcall set_CentreOnPage(long Value/*[in]*/);
  HRESULT         __fastcall get_InfoSubject(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoSubject(void);
  HRESULT         __fastcall set_InfoSubject(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoTitle(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoTitle(void);
  HRESULT         __fastcall set_InfoTitle(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoCreator(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoCreator(void);
  HRESULT         __fastcall set_InfoCreator(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_InfoAuthor(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoAuthor(void);
  HRESULT         __fastcall set_InfoAuthor(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Units(long* Value/*[out,retval]*/);
  long            __fastcall get_Units(void);
  HRESULT         __fastcall set_Units(long Value/*[in]*/);
  HRESULT         __fastcall get_Scale(double* Value/*[out,retval]*/);
  double          __fastcall get_Scale(void);
  HRESULT         __fastcall set_Scale(double Value/*[in]*/);
  HRESULT         __fastcall get_MarginLeft(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginLeft(void);
  HRESULT         __fastcall set_MarginLeft(long Value/*[in]*/);
  HRESULT         __fastcall get_MarginRight(long* Value/*[out,retval]*/);
  long            __fastcall get_MarginRight(void);
  HRESULT         __fastcall set_MarginRight(long Value/*[in]*/);
  HRESULT         __fastcall get_ImageHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ImageHeight(void);
  HRESULT         __fastcall set_ImageHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_ImageWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ImageWidth(void);
  HRESULT         __fastcall set_ImageWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_Stretch(long* Value/*[out,retval]*/);
  long            __fastcall get_Stretch(void);
  HRESULT         __fastcall set_Stretch(long Value/*[in]*/);
  HRESULT         __fastcall get_InfoKeyWords(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_InfoKeyWords(void);
  HRESULT         __fastcall set_InfoKeyWords(BSTR Value/*[in]*/);
  HRESULT         __fastcall Initialise(/*AUTO_PARAM_ERROR(Dms_pdfwks_tlb::PDF_Setup PDF_Init)*/ TVariant&  PDF_Init);

  __property   long            Icon = {write = set_Icon};
  __property   long            JPGQuality = {read = get_JPGQuality, write = set_JPGQuality};
  __property   long            MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   long            MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   long            PaperSize = {read = get_PaperSize, write = set_PaperSize};
  __property   long            PaperWidth = {read = get_PaperWidth, write = set_PaperWidth};
  __property   long            PaperHeight = {read = get_PaperHeight, write = set_PaperHeight};
  __property   long            Landscape = {read = get_Landscape, write = set_Landscape};
  __property   long            ScaleToFit = {read = get_ScaleToFit, write = set_ScaleToFit};
  __property   long            CentreOnPage = {read = get_CentreOnPage, write = set_CentreOnPage};
  __property   BSTR            InfoSubject = {read = get_InfoSubject, write = set_InfoSubject};
  __property   BSTR            InfoTitle = {read = get_InfoTitle, write = set_InfoTitle};
  __property   BSTR            InfoCreator = {read = get_InfoCreator, write = set_InfoCreator};
  __property   BSTR            InfoAuthor = {read = get_InfoAuthor, write = set_InfoAuthor};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   double          Scale = {read = get_Scale, write = set_Scale};
  __property   long            MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   long            MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   long            Stretch = {read = get_Stretch, write = set_Stretch};
  __property   BSTR            InfoKeyWords = {read = get_InfoKeyWords, write = set_InfoKeyWords};
};
typedef IDMS_PDFWorksDispT<IDMS_PDFWorks> IDMS_PDFWorksDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMS_PDFWorks
// Interface: IDMS_PDFWorks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::Configure(BSTR sTitle/*[in]*/, long* bOK/*[out]*/, 
                                 Dms_pdfwks_tlb::PDF_Setup* pPDF_Setup/*[in,out]*/)
{
  return (*this)->Configure(sTitle, bOK, pPDF_Setup);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_Icon(long Param1/*[in]*/)
{
  return (*this)->set_Icon(Param1);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::ClipBoardToJPGFile(BSTR sFileName/*[in]*/)
{
  return (*this)->ClipBoardToJPGFile(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::ClipBoardToBMPFile(BSTR sFileName/*[in]*/)
{
  return (*this)->ClipBoardToBMPFile(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::ClipBoardToGIFFile(BSTR sFileName/*[in]*/)
{
  return (*this)->ClipBoardToGIFFile(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::ClipBoardToPDFFile(BSTR sFileName/*[in]*/)
{
  return (*this)->ClipBoardToPDFFile(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_JPGQuality(long* Value/*[out,retval]*/)
{
  return (*this)->get_JPGQuality(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_JPGQuality(void)
{
  long Value;
  OLECHECK(this->get_JPGQuality((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_JPGQuality(long Value/*[in]*/)
{
  return (*this)->set_JPGQuality(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginTop(long* Value/*[out,retval]*/)
{
  return (*this)->get_MarginTop(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginTop(void)
{
  long Value;
  OLECHECK(this->get_MarginTop((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_MarginTop(long Value/*[in]*/)
{
  return (*this)->set_MarginTop(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginBottom(long* Value/*[out,retval]*/)
{
  return (*this)->get_MarginBottom(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginBottom(void)
{
  long Value;
  OLECHECK(this->get_MarginBottom((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_MarginBottom(long Value/*[in]*/)
{
  return (*this)->set_MarginBottom(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperSize(long* Value/*[out,retval]*/)
{
  return (*this)->get_PaperSize(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperSize(void)
{
  long Value;
  OLECHECK(this->get_PaperSize((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_PaperSize(long Value/*[in]*/)
{
  return (*this)->set_PaperSize(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_PaperWidth(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperWidth(void)
{
  long Value;
  OLECHECK(this->get_PaperWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_PaperWidth(long Value/*[in]*/)
{
  return (*this)->set_PaperWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_PaperHeight(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_PaperHeight(void)
{
  long Value;
  OLECHECK(this->get_PaperHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_PaperHeight(long Value/*[in]*/)
{
  return (*this)->set_PaperHeight(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_Landscape(long* Value/*[out,retval]*/)
{
  return (*this)->get_Landscape(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_Landscape(void)
{
  long Value;
  OLECHECK(this->get_Landscape((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_Landscape(long Value/*[in]*/)
{
  return (*this)->set_Landscape(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_ScaleToFit(long* Value/*[out,retval]*/)
{
  return (*this)->get_ScaleToFit(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_ScaleToFit(void)
{
  long Value;
  OLECHECK(this->get_ScaleToFit((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_ScaleToFit(long Value/*[in]*/)
{
  return (*this)->set_ScaleToFit(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_CentreOnPage(long* Value/*[out,retval]*/)
{
  return (*this)->get_CentreOnPage(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_CentreOnPage(void)
{
  long Value;
  OLECHECK(this->get_CentreOnPage((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_CentreOnPage(long Value/*[in]*/)
{
  return (*this)->set_CentreOnPage(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoSubject(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_InfoSubject(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoSubject(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_InfoSubject((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_InfoSubject(BSTR Value/*[in]*/)
{
  return (*this)->set_InfoSubject(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoTitle(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_InfoTitle(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoTitle(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_InfoTitle((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_InfoTitle(BSTR Value/*[in]*/)
{
  return (*this)->set_InfoTitle(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoCreator(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_InfoCreator(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoCreator(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_InfoCreator((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_InfoCreator(BSTR Value/*[in]*/)
{
  return (*this)->set_InfoCreator(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoAuthor(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_InfoAuthor(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoAuthor(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_InfoAuthor((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_InfoAuthor(BSTR Value/*[in]*/)
{
  return (*this)->set_InfoAuthor(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_Units(long* Value/*[out,retval]*/)
{
  return (*this)->get_Units(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_Units(void)
{
  long Value;
  OLECHECK(this->get_Units((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_Units(long Value/*[in]*/)
{
  return (*this)->set_Units(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_Scale(double* Value/*[out,retval]*/)
{
  return (*this)->get_Scale(Value);
}

template <class T> double __fastcall
TCOMIDMS_PDFWorksT<T>::get_Scale(void)
{
  double Value;
  OLECHECK(this->get_Scale((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_Scale(double Value/*[in]*/)
{
  return (*this)->set_Scale(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginLeft(long* Value/*[out,retval]*/)
{
  return (*this)->get_MarginLeft(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginLeft(void)
{
  long Value;
  OLECHECK(this->get_MarginLeft((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_MarginLeft(long Value/*[in]*/)
{
  return (*this)->set_MarginLeft(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginRight(long* Value/*[out,retval]*/)
{
  return (*this)->get_MarginRight(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_MarginRight(void)
{
  long Value;
  OLECHECK(this->get_MarginRight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_MarginRight(long Value/*[in]*/)
{
  return (*this)->set_MarginRight(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_ImageHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_ImageHeight(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_ImageHeight(void)
{
  long Value;
  OLECHECK(this->get_ImageHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_ImageHeight(long Value/*[in]*/)
{
  return (*this)->set_ImageHeight(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_ImageWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_ImageWidth(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_ImageWidth(void)
{
  long Value;
  OLECHECK(this->get_ImageWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_ImageWidth(long Value/*[in]*/)
{
  return (*this)->set_ImageWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_Stretch(long* Value/*[out,retval]*/)
{
  return (*this)->get_Stretch(Value);
}

template <class T> long __fastcall
TCOMIDMS_PDFWorksT<T>::get_Stretch(void)
{
  long Value;
  OLECHECK(this->get_Stretch((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_Stretch(long Value/*[in]*/)
{
  return (*this)->set_Stretch(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoKeyWords(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_InfoKeyWords(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_PDFWorksT<T>::get_InfoKeyWords(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_InfoKeyWords((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::set_InfoKeyWords(BSTR Value/*[in]*/)
{
  return (*this)->set_InfoKeyWords(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_PDFWorksT<T>::Initialise(Dms_pdfwks_tlb::PDF_Setup PDF_Init/*[in]*/)
{
  return (*this)->Initialise(PDF_Init);
}

// *********************************************************************//
// DispIntf:  IDMS_PDFWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B147E1AB-33C6-11D4-89E8-0020AFCC5695}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::Configure(BSTR sTitle/*[in]*/, long* bOK/*[out]*/, 
                                 /*AUTO_PARAM_ERROR(Dms_pdfwks_tlb::PDF_Setup* pPDF_Setup)*/ TVariant&  pPDF_Setup)
{
  static _TDispID _dispid(*this, OLETEXT("Configure"), DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = sTitle /*[VT_BSTR:0]*/;
  _args[2] = bOK /*[VT_I4:1]*/;
  _args[3] = pPDF_Setup /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_Icon(long Param1/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::ClipBoardToJPGFile(BSTR sFileName/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ClipBoardToJPGFile"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::ClipBoardToBMPFile(BSTR sFileName/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ClipBoardToBMPFile"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::ClipBoardToGIFFile(BSTR sFileName/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ClipBoardToGIFFile"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::ClipBoardToPDFFile(BSTR sFileName/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ClipBoardToPDFFile"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_JPGQuality(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("JPGQuality"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_JPGQuality(void)
{
  long Value;
  this->get_JPGQuality((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_JPGQuality(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("JPGQuality"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_MarginTop(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_MarginTop(void)
{
  long Value;
  this->get_MarginTop((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_MarginTop(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_MarginBottom(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_MarginBottom(void)
{
  long Value;
  this->get_MarginBottom((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_MarginBottom(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_PaperSize(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperSize"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_PaperSize(void)
{
  long Value;
  this->get_PaperSize((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_PaperSize(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperSize"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_PaperWidth(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_PaperWidth(void)
{
  long Value;
  this->get_PaperWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_PaperWidth(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_PaperHeight(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperHeight"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_PaperHeight(void)
{
  long Value;
  this->get_PaperHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_PaperHeight(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("PaperHeight"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_Landscape(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Landscape"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_Landscape(void)
{
  long Value;
  this->get_Landscape((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_Landscape(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Landscape"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_ScaleToFit(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ScaleToFit"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_ScaleToFit(void)
{
  long Value;
  this->get_ScaleToFit((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_ScaleToFit(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ScaleToFit"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_CentreOnPage(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("CentreOnPage"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_CentreOnPage(void)
{
  long Value;
  this->get_CentreOnPage((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_CentreOnPage(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("CentreOnPage"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_InfoSubject(BSTR* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoSubject"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_PDFWorksDispT<T>::get_InfoSubject(void)
{
  BSTR Value;
  this->get_InfoSubject((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_InfoSubject(BSTR Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoSubject"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_InfoTitle(BSTR* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoTitle"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_PDFWorksDispT<T>::get_InfoTitle(void)
{
  BSTR Value;
  this->get_InfoTitle((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_InfoTitle(BSTR Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoTitle"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_InfoCreator(BSTR* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoCreator"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_PDFWorksDispT<T>::get_InfoCreator(void)
{
  BSTR Value;
  this->get_InfoCreator((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_InfoCreator(BSTR Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoCreator"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_InfoAuthor(BSTR* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoAuthor"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_PDFWorksDispT<T>::get_InfoAuthor(void)
{
  BSTR Value;
  this->get_InfoAuthor((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_InfoAuthor(BSTR Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoAuthor"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_Units(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Units"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_Units(void)
{
  long Value;
  this->get_Units((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_Units(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Units"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_Scale(double* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Scale"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IDMS_PDFWorksDispT<T>::get_Scale(void)
{
  double Value;
  this->get_Scale((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_Scale(double Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Scale"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_MarginLeft(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_MarginLeft(void)
{
  long Value;
  this->get_MarginLeft((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_MarginLeft(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_MarginRight(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_MarginRight(void)
{
  long Value;
  this->get_MarginRight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_MarginRight(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_ImageHeight(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_ImageHeight(void)
{
  long Value;
  this->get_ImageHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_ImageHeight(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_ImageWidth(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_ImageWidth(void)
{
  long Value;
  this->get_ImageWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_ImageWidth(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_Stretch(long* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Stretch"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDMS_PDFWorksDispT<T>::get_Stretch(void)
{
  long Value;
  this->get_Stretch((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_Stretch(long Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("Stretch"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::get_InfoKeyWords(BSTR* Value/*[out,retval]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoKeyWords"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_PDFWorksDispT<T>::get_InfoKeyWords(void)
{
  BSTR Value;
  this->get_InfoKeyWords((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::set_InfoKeyWords(BSTR Value/*[in]*/)
{
  static _TDispID _dispid(*this, OLETEXT("InfoKeyWords"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_PDFWorksDispT<T>::Initialise(/*AUTO_PARAM_ERROR(Dms_pdfwks_tlb::PDF_Setup PDF_Init)*/ TVariant&  PDF_Init)
{
  static _TDispID _dispid(*this, OLETEXT("Initialise"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = PDF_Init /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_PDFWorks
// Interface: TCOMIDMS_PDFWorks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_PDFWorks, IDMS_PDFWorks, &CLSID_DMS_PDFWorks, &IID_IDMS_PDFWorks> CoDMS_PDFWorks;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dms_pdfwks_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dms_pdfwks_tlb;
#endif

#pragma option pop

#endif // __DMS_PDFWks_TLB_h__
