// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.41  $
// File generated on 12/21/00 10:56:59 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Wombat\Pro\DMS_DiffWks\DMS_DiffWks.tlb (1)
// IID\LCID: {29A450B8-D6AE-11D4-8E9C-0020AFCC5695}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\Stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DMS_DiffWks_TLB_h__
#define   __DMS_DiffWks_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dms_diffwks_tlb
{

// *********************************************************************//
// HelpString: DMS_DiffWks Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DMS_DiffWks;
extern __declspec (package) const GUID IID_IDMS_DiffWorks;
extern __declspec (package) const GUID CLSID_DMS_DiffWorks;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{29A450B9-D6AE-11D4-8E9C-0020AFCC5695}") IDMS_DiffWorks;
typedef TComInterface<IDMS_DiffWorks, &IID_IDMS_DiffWorks> IDMS_DiffWorksPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_DiffWorks DMS_DiffWorks;
typedef IDMS_DiffWorksPtr DMS_DiffWorksPtr;

#define LIBID_OF_DMS_DiffWorks (&LIBID_DMS_DiffWks)
// *********************************************************************//
// Interface: IDMS_DiffWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29A450B9-D6AE-11D4-8E9C-0020AFCC5695}
// *********************************************************************//
interface IDMS_DiffWorks  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_Icon(long Param1/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE GetCompareInfo(BSTR* OriginalName/*[out]*/, 
                                                   BSTR* ChangedName/*[out]*/, 
                                                   BSTR* DisplayName/*[out]*/, 
                                                   double* Transparency/*[out]*/, 
                                                   long* Colour/*[out]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE ShowCompareResults(BSTR OriginalName/*[in]*/, 
                                                       BSTR ChangedName/*[in]*/, 
                                                       double OriginalMass/*[in]*/, 
                                                       double ChangedMass/*[in]*/, 
                                                       double OriginalVolume/*[in]*/, 
                                                       double ChangedVolume/*[in]*/, 
                                                       double OriginalArea/*[in]*/, 
                                                       double ChangedArea/*[in]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)


  __property   long            Icon = {write = set_Icon};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_DiffWorks
// Interface: IDMS_DiffWorks
// *********************************************************************//
template <class T /* IDMS_DiffWorks */ >
class TCOMIDMS_DiffWorksT : public TComInterface<IDMS_DiffWorks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_DiffWorksT() {}
  TCOMIDMS_DiffWorksT(IDMS_DiffWorks *intf, bool addRef = false) : TComInterface<IDMS_DiffWorks>(intf, addRef) {}
  TCOMIDMS_DiffWorksT(const TCOMIDMS_DiffWorksT& src) : TComInterface<IDMS_DiffWorks>(src) {}
  TCOMIDMS_DiffWorksT& operator=(const TCOMIDMS_DiffWorksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall set_Icon(long Param1/*[in]*/);
  HRESULT         __fastcall GetCompareInfo(BSTR* OriginalName/*[out]*/, BSTR* ChangedName/*[out]*/, 
                                            BSTR* DisplayName/*[out]*/, 
                                            double* Transparency/*[out]*/, long* Colour/*[out]*/);
  HRESULT         __fastcall ShowCompareResults(BSTR OriginalName/*[in]*/, BSTR ChangedName/*[in]*/, 
                                                double OriginalMass/*[in]*/, 
                                                double ChangedMass/*[in]*/, 
                                                double OriginalVolume/*[in]*/, 
                                                double ChangedVolume/*[in]*/, 
                                                double OriginalArea/*[in]*/, 
                                                double ChangedArea/*[in]*/);

  __property   long            Icon = {write = set_Icon};
};
typedef TCOMIDMS_DiffWorksT<IDMS_DiffWorks> TCOMIDMS_DiffWorks;

// *********************************************************************//
// DispIntf:  IDMS_DiffWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29A450B9-D6AE-11D4-8E9C-0020AFCC5695}
// *********************************************************************//
template<class T>
class IDMS_DiffWorksDispT : public TAutoDriver<IDMS_DiffWorks>
{
public:
  IDMS_DiffWorksDispT(){}

  IDMS_DiffWorksDispT(IDMS_DiffWorks *pintf)
  {
    TAutoDriver<IDMS_DiffWorks>::Bind(pintf, false);
  }

  IDMS_DiffWorksDispT(IDMS_DiffWorksPtr pintf)
  {
    TAutoDriver<IDMS_DiffWorks>::Bind(pintf, true);
  }

  IDMS_DiffWorksDispT& operator=(IDMS_DiffWorks *pintf)
  {
    TAutoDriver<IDMS_DiffWorks>::Bind(pintf, false);
    return *this;
  }

  IDMS_DiffWorksDispT& operator=(IDMS_DiffWorksPtr pintf)
  {
    TAutoDriver<IDMS_DiffWorks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DMS_DiffWorks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DMS_DiffWorks);
  }

  HRESULT         __fastcall set_Icon(long Param1/*[in]*/);
  HRESULT         __fastcall GetCompareInfo(BSTR* OriginalName/*[out]*/, BSTR* ChangedName/*[out]*/
                                            , BSTR* DisplayName/*[out]*/, 
                                            double* Transparency/*[out]*/, long* Colour/*[out]*/);
  HRESULT         __fastcall ShowCompareResults(BSTR OriginalName/*[in]*/, BSTR ChangedName/*[in]*/
                                                , double OriginalMass/*[in]*/, 
                                                double ChangedMass/*[in]*/, 
                                                double OriginalVolume/*[in]*/, 
                                                double ChangedVolume/*[in]*/, 
                                                double OriginalArea/*[in]*/, 
                                                double ChangedArea/*[in]*/);

  __property   long            Icon = {write = set_Icon};
};
typedef IDMS_DiffWorksDispT<IDMS_DiffWorks> IDMS_DiffWorksDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMS_DiffWorks
// Interface: IDMS_DiffWorks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_DiffWorksT<T>::set_Icon(long Param1/*[in]*/)
{
  return (*this)->set_Icon(Param1);
}

template <class T> HRESULT __fastcall
TCOMIDMS_DiffWorksT<T>::GetCompareInfo(BSTR* OriginalName/*[out]*/, BSTR* ChangedName/*[out]*/, 
                                       BSTR* DisplayName/*[out]*/, double* Transparency/*[out]*/, 
                                       long* Colour/*[out]*/)
{
  return (*this)->GetCompareInfo(OriginalName, ChangedName, DisplayName, Transparency, Colour);
}

template <class T> HRESULT __fastcall
TCOMIDMS_DiffWorksT<T>::ShowCompareResults(BSTR OriginalName/*[in]*/, BSTR ChangedName/*[in]*/, 
                                           double OriginalMass/*[in]*/, double ChangedMass/*[in]*/, 
                                           double OriginalVolume/*[in]*/, 
                                           double ChangedVolume/*[in]*/, double OriginalArea/*[in]*/, 
                                           double ChangedArea/*[in]*/)
{
  return (*this)->ShowCompareResults(OriginalName, ChangedName, OriginalMass, ChangedMass, 
                                     OriginalVolume, ChangedVolume, OriginalArea, ChangedArea);
}

// *********************************************************************//
// DispIntf:  IDMS_DiffWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {29A450B9-D6AE-11D4-8E9C-0020AFCC5695}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMS_DiffWorksDispT<T>::set_Icon(long Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_DiffWorksDispT<T>::GetCompareInfo(BSTR* OriginalName/*[out]*/, BSTR* ChangedName/*[out]*/, 
                                       BSTR* DisplayName/*[out]*/, double* Transparency/*[out]*/, 
                                       long* Colour/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCompareInfo"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = OriginalName /*[VT_BSTR:1]*/;
  _args[2] = ChangedName /*[VT_BSTR:1]*/;
  _args[3] = DisplayName /*[VT_BSTR:1]*/;
  _args[4] = Transparency /*[VT_R8:1]*/;
  _args[5] = Colour /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_DiffWorksDispT<T>::ShowCompareResults(BSTR OriginalName/*[in]*/, BSTR ChangedName/*[in]*/, 
                                           double OriginalMass/*[in]*/, double ChangedMass/*[in]*/, 
                                           double OriginalVolume/*[in]*/, 
                                           double ChangedVolume/*[in]*/, double OriginalArea/*[in]*/
                                           , double ChangedArea/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowCompareResults"), DISPID(3));
  TAutoArgs<8> _args;
  _args[1] = OriginalName /*[VT_BSTR:0]*/;
  _args[2] = ChangedName /*[VT_BSTR:0]*/;
  _args[3] = OriginalMass /*[VT_R8:0]*/;
  _args[4] = ChangedMass /*[VT_R8:0]*/;
  _args[5] = OriginalVolume /*[VT_R8:0]*/;
  _args[6] = ChangedVolume /*[VT_R8:0]*/;
  _args[7] = OriginalArea /*[VT_R8:0]*/;
  _args[8] = ChangedArea /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_DiffWorks
// Interface: TCOMIDMS_DiffWorks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_DiffWorks, IDMS_DiffWorks, &CLSID_DMS_DiffWorks, &IID_IDMS_DiffWorks> CoDMS_DiffWorks;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dms_diffwks_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dms_diffwks_tlb;
#endif

#pragma option pop

#endif // __DMS_DiffWks_TLB_h__
