// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.41  $
// File generated on 11/18/00 11:48:27 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Wombat\Pro\DMS_Web\DMS_WebWks.tlb (1)
// IID\LCID: {4E584868-BC0C-11D4-8E81-0020AFCC5695}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\Stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DMS_WebWks_TLB_h__
#define   __DMS_WebWks_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dms_webwks_tlb
{

// *********************************************************************//
// HelpString: DMS_WebWks Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DMS_WebWks;
extern __declspec (package) const GUID IID_IDMS_WebWorks;
extern __declspec (package) const GUID CLSID_DMS_WebWorks;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{4E584869-BC0C-11D4-8E81-0020AFCC5695}") IDMS_WebWorks;
typedef TComInterface<IDMS_WebWorks, &IID_IDMS_WebWorks> IDMS_WebWorksPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_WebWorks DMS_WebWorks;
typedef IDMS_WebWorksPtr DMS_WebWorksPtr;

#define LIBID_OF_DMS_WebWorks (&LIBID_DMS_WebWks)
// *********************************************************************//
// Interface: IDMS_WebWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E584869-BC0C-11D4-8E81-0020AFCC5695}
// *********************************************************************//
interface IDMS_WebWorks  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Configure(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_SolidWorks(LPDISPATCH Param1/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE SaveAsHTML(BSTR sFileName/*[in]*/, long bKeepXML/*[in,def]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE SaveAsXML(BSTR sFileName/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_XSL_FileName(BSTR* sFileName/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_XSL_FileName(BSTR sFileName/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(long Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE LoadSettings(void) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_XSL_FileName(void)
  {
    BSTR sFileName = 0;
    OLECHECK(this->get_XSL_FileName((BSTR*)&sFileName));
    return sFileName;
  }


  __property   LPDISPATCH      SolidWorks = {write = set_SolidWorks};
  __property   BSTR            XSL_FileName = {read = get_XSL_FileName, write = set_XSL_FileName};
  __property   long            Icon = {write = set_Icon};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_WebWorks
// Interface: IDMS_WebWorks
// *********************************************************************//
template <class T /* IDMS_WebWorks */ >
class TCOMIDMS_WebWorksT : public TComInterface<IDMS_WebWorks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_WebWorksT() {}
  TCOMIDMS_WebWorksT(IDMS_WebWorks *intf, bool addRef = false) : TComInterface<IDMS_WebWorks>(intf, addRef) {}
  TCOMIDMS_WebWorksT(const TCOMIDMS_WebWorksT& src) : TComInterface<IDMS_WebWorks>(src) {}
  TCOMIDMS_WebWorksT& operator=(const TCOMIDMS_WebWorksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Configure(void);
  HRESULT         __fastcall set_SolidWorks(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall SaveAsHTML(BSTR sFileName/*[in]*/, long bKeepXML/*[in,def]*/);
  HRESULT         __fastcall SaveAsXML(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall get_XSL_FileName(BSTR* sFileName/*[out,retval]*/);
  BSTR            __fastcall get_XSL_FileName(void);
  HRESULT         __fastcall set_XSL_FileName(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);
  HRESULT         __fastcall LoadSettings(void);

  __property   LPDISPATCH      SolidWorks = {write = set_SolidWorks};
  __property   BSTR            XSL_FileName = {read = get_XSL_FileName, write = set_XSL_FileName};
  __property   long            Icon = {write = set_Icon};
};
typedef TCOMIDMS_WebWorksT<IDMS_WebWorks> TCOMIDMS_WebWorks;

// *********************************************************************//
// DispIntf:  IDMS_WebWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E584869-BC0C-11D4-8E81-0020AFCC5695}
// *********************************************************************//
template<class T>
class IDMS_WebWorksDispT : public TAutoDriver<IDMS_WebWorks>
{
public:
  IDMS_WebWorksDispT(){}

  IDMS_WebWorksDispT(IDMS_WebWorks *pintf)
  {
    TAutoDriver<IDMS_WebWorks>::Bind(pintf, false);
  }

  IDMS_WebWorksDispT(IDMS_WebWorksPtr pintf)
  {
    TAutoDriver<IDMS_WebWorks>::Bind(pintf, true);
  }

  IDMS_WebWorksDispT& operator=(IDMS_WebWorks *pintf)
  {
    TAutoDriver<IDMS_WebWorks>::Bind(pintf, false);
    return *this;
  }

  IDMS_WebWorksDispT& operator=(IDMS_WebWorksPtr pintf)
  {
    TAutoDriver<IDMS_WebWorks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DMS_WebWorks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DMS_WebWorks);
  }

  HRESULT         __fastcall Configure();
  HRESULT         __fastcall set_SolidWorks(LPDISPATCH Param1/*[in]*/);
  HRESULT         __fastcall SaveAsHTML(BSTR sFileName/*[in]*/, long bKeepXML/*[in,def]*/);
  HRESULT         __fastcall SaveAsXML(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall get_XSL_FileName(BSTR* sFileName/*[out,retval]*/);
  BSTR            __fastcall get_XSL_FileName(void);
  HRESULT         __fastcall set_XSL_FileName(BSTR sFileName/*[in]*/);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);
  HRESULT         __fastcall LoadSettings();

  __property   LPDISPATCH      SolidWorks = {write = set_SolidWorks};
  __property   BSTR            XSL_FileName = {read = get_XSL_FileName, write = set_XSL_FileName};
  __property   long            Icon = {write = set_Icon};
};
typedef IDMS_WebWorksDispT<IDMS_WebWorks> IDMS_WebWorksDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMS_WebWorks
// Interface: IDMS_WebWorks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::Configure(void)
{
  return (*this)->Configure();
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::set_SolidWorks(LPDISPATCH Param1/*[in]*/)
{
  return (*this)->set_SolidWorks(Param1);
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::SaveAsHTML(BSTR sFileName/*[in]*/, long bKeepXML/*[in,def]*/)
{
  return (*this)->SaveAsHTML(sFileName, bKeepXML);
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::SaveAsXML(BSTR sFileName/*[in]*/)
{
  return (*this)->SaveAsXML(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::get_XSL_FileName(BSTR* sFileName/*[out,retval]*/)
{
  return (*this)->get_XSL_FileName(sFileName);
}

template <class T> BSTR __fastcall
TCOMIDMS_WebWorksT<T>::get_XSL_FileName(void)
{
  BSTR sFileName = 0;
  OLECHECK(this->get_XSL_FileName((BSTR*)&sFileName));
  return sFileName;
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::set_XSL_FileName(BSTR sFileName/*[in]*/)
{
  return (*this)->set_XSL_FileName(sFileName);
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::set_Icon(long Value/*[in]*/)
{
  return (*this)->set_Icon(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_WebWorksT<T>::LoadSettings(void)
{
  return (*this)->LoadSettings();
}

// *********************************************************************//
// DispIntf:  IDMS_WebWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4E584869-BC0C-11D4-8E81-0020AFCC5695}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::Configure()
{
  _TDispID _dispid(*this, OLETEXT("Configure"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::set_SolidWorks(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SolidWorks"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::SaveAsHTML(BSTR sFileName/*[in]*/, long bKeepXML/*[in,def]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAsHTML"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  _args[2] = bKeepXML /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::SaveAsXML(BSTR sFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAsXML"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::get_XSL_FileName(BSTR* sFileName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XSL_FileName"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(sFileName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_WebWorksDispT<T>::get_XSL_FileName(void)
{
  BSTR sFileName;
  this->get_XSL_FileName((BSTR*)&sFileName);
  return sFileName;
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::set_XSL_FileName(BSTR sFileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XSL_FileName"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = sFileName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::set_Icon(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_WebWorksDispT<T>::LoadSettings()
{
  _TDispID _dispid(*this, OLETEXT("LoadSettings"), DISPID(7));
  return OleFunction(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_WebWorks
// Interface: TCOMIDMS_WebWorks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_WebWorks, IDMS_WebWorks, &CLSID_DMS_WebWorks, &IID_IDMS_WebWorks> CoDMS_WebWorks;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dms_webwks_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dms_webwks_tlb;
#endif

#pragma option pop

#endif // __DMS_WebWks_TLB_h__
