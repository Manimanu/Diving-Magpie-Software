//---------------------------------------------------------------------------
#include <vcl\vcl.h>
#include <Clipbrd.hpp>
#pragma hdrstop

#include "about.h"
#include "config.h"
#include "SWutils.h"
#include "unfrag.h"
#include "UnfragFile.h"
#include "utils.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "cspin"
#pragma link "cdiroutl"
#pragma link "CSPIN"
#pragma link "Regi1632"
#pragma link "browsefoldersdialog"
#pragma resource "*.dfm"
TfrmConfig *frmConfig;
//---------------------------------------------------------------------------
__fastcall TfrmConfig::TfrmConfig(TComponent* Owner)
    : TForm(Owner)
{
}
//---------------------------------------------------------------------------
void TfrmConfig::DirBrowse(int Index)
{
if (true == BrowseFoldersDialog->Execute())
    {
    dynamic_cast<TEdit *>(FindComponent(edtBrowseName[Index]))->Text =
        BrowseFoldersDialog->Folder;
    }
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnDirBrowse01Click(TObject *Sender)
{
DirBrowse(0);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnDirBrowse02Click(TObject *Sender)
{
DirBrowse(1);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnDirBrowse03Click(TObject *Sender)
{
DirBrowse(2);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnDirBrowse04Click(TObject *Sender)
{
DirBrowse(3);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnDirBrowse05Click(TObject *Sender)
{
DirBrowse(4);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::FormCreate(TObject *Sender)
{
hNextHandle = SetClipboardViewer(Handle);

frmConfig->HelpFile 	 = UNFRAG_WORKS_HELP;
frmConfig->Caption       = UNFRAG_WORKS_TITLE;
stbUnfragWks->SimpleText = ::String("Welcome to ") + ::String(UNFRAG_WORKS_TITLE);

btnReadClick(Sender);

edtMachID->Text = GetMachineID();

btnWrite->Enabled = false;

if (CheckCode(edtMachID->Text.c_str(), UNFRAG_WORKS_TITLE_CODE, edtCode->Text.c_str()) == true)
    {
    btnWrite->Enabled = true;
    btnRegister->Enabled = false;
    g_bRegistered = true;
    }
}
//---------------------------------------------------------------------------
void TfrmConfig::UpdateDirWatch(int Index)
{
// the following is to avoid an error box being generated by the directory
// watcher component when it is asked to watch a directory which doesn't
// exist
// NOTE: this will only update the Enabled property of the directory watch
//          control
WIN32_FIND_DATA         fd;
HANDLE                  hFind = FindFirstFile(regUnfragWksSV->ReadString(IniDirName[Index],
                                    "Path").c_str(), &fd);
bool                    bChecked = false;

if (hFind != INVALID_HANDLE_VALUE)
    {
    // update directory watcher enabled
    bChecked = dynamic_cast<TCheckBox  *>(FindComponent(chkDirEnabled[Index]))->Checked;
    dynamic_cast<TFnugryDirWatch  *>(UnfragWorks->FindComponent(dirwUnfragName[Index]))->Enabled = bChecked;

    FindClose(hFind);
    }
else
    {
    // update directory watcher to disabled
    // since directory is not there
    dynamic_cast<TFnugryDirWatch  *>(UnfragWorks->FindComponent(dirwUnfragName[Index]))->Enabled = false;
    }
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnReadClick(TObject *Sender)
{
bool	                WasError = false;
bool                    bChecked = false;
unsigned short          nHour, nMinute;
String                  sText;

// directories
for (int i = 0; i < NUM_DIR; i++)
    {
    // enabled
    bChecked = atoi(regUnfragWksSV->ReadString(IniDirName[i], "Enabled").c_str());
    dynamic_cast<TCheckBox  *>(FindComponent(chkDirEnabled[i]))->Checked = bChecked;
    UW_HANDLE_REG_ERROR;

    // force update of controls dependent on directory check box being enabled
    DirEnable(i);

    // recurse subdirectories
    bChecked = atoi(regUnfragWksSV->ReadString(IniDirName[i], "SubDir").c_str());
    dynamic_cast<TCheckBox  *>(FindComponent(chkSubDirName[i]))->Checked = bChecked;
    UW_HANDLE_REG_ERROR;

    // directory name
    // but first check to see if it exsits
    UpdateDirWatch(i);

    // update name in edit box
    sText = regUnfragWksSV->ReadString(IniDirName[i], "Path").c_str();
    dynamic_cast<TEdit  *>(FindComponent(edtBrowseName[i]))->Text = sText;
    UW_HANDLE_REG_ERROR;

    // update directory watcher recurse subdirectories
    bChecked = dynamic_cast<TCheckBox  *>(FindComponent(chkSubDirName[i]))->Checked;
    dynamic_cast<TFnugryDirWatch  *>(UnfragWorks->FindComponent(dirwUnfragName[i]))->WatchSubTree = bChecked;

    // update directory watcher directory name
    sText = dynamic_cast<TEdit  *>(FindComponent(edtBrowseName[i]))->Text;
    dynamic_cast<TFnugryDirWatch  *>(UnfragWorks->FindComponent(dirwUnfragName[i]))->Directory = sText;
    }

// server
sText = regUnfragWksSV->ReadString("Server", "TimeOut");
sedTimeout->Value = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Server", "Priority");
cmbPriority->ItemIndex = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Server", "Threads");
sedThreads->Value = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Server", "Preview");
chkRemovePreview->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Server", "Geometry");
chkRemoveGeom->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

// logging
sText = regUnfragWksSV->ReadString("Logging", "Service");
chkStartStopService->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Logging", "Unfrag");
chkStartStopUnfrag->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Logging", "NumFiles");
chkFilesExamineUnfrag->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Logging", "Bytes");
chkBytesSaved->Checked = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

// scheduling
sText = regUnfragWksSV->ReadString("Schedule", "HourType");
cmbSchedHourType->ItemIndex = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Schedule", "DayType");
cmbSchedDayType->ItemIndex = atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Schedule", "Hour");
nHour = (unsigned short ) atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

sText = regUnfragWksSV->ReadString("Schedule", "Minute");
nMinute = (unsigned short ) atoi(sText.c_str());
UW_HANDLE_REG_ERROR;

dtUnfragTime->Time = TDateTime(nHour, nMinute, 0, 0);

// adminstration
edtCode->Text = regUnfragWksSV->ReadString("Security", "Code");
UW_HANDLE_REG_ERROR;

CLEAN_UP:
    ;

if (WasError == true)
    {
    stbUnfragWks->SimpleText = "Error:  " + regUnfragWksSV->ErrorMessage;
    }
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnWriteClick(TObject *Sender)
{
bool	                WasError = false;
bool                    bChecked = false;
unsigned short          nHour, nMinute, nSec, nMsec;
int                     nValue   = 0;
String                  sText;

// directories
for (int i = 0; i < NUM_DIR; i++)
    {
    // enabled
    bChecked = dynamic_cast<TCheckBox *>(FindComponent(chkDirEnabled[i]))->Checked;
    regUnfragWksSV->WriteString(IniDirName[i], "Enabled", ::String((int ) bChecked));
    UW_HANDLE_REG_ERROR;

    // recurse subdirectories
    bChecked = dynamic_cast<TCheckBox *>(FindComponent(chkSubDirName[i]))->Checked;
    regUnfragWksSV->WriteString(IniDirName[i], "SubDir", ::String((int ) bChecked));
    UW_HANDLE_REG_ERROR;

    // directory name
    sText = dynamic_cast<TEdit *>(FindComponent(edtBrowseName[i]))->Text;
    regUnfragWksSV->WriteString(IniDirName[i], "Path", sText);
    UW_HANDLE_REG_ERROR;

    // update directory watcher enabled
    UpdateDirWatch(i);

    // update directory watcher recurse subdirectories
    bChecked = dynamic_cast<TCheckBox *>(FindComponent(chkSubDirName[i]))->Checked;
    dynamic_cast<TFnugryDirWatch *>(UnfragWorks->FindComponent(dirwUnfragName[i]))->WatchSubTree = bChecked;

    // update directory watcher directory name
    sText = dynamic_cast<TEdit *>(FindComponent(edtBrowseName[i]))->Text;
    dynamic_cast<TFnugryDirWatch *>(UnfragWorks->FindComponent(dirwUnfragName[i]))->Directory = sText;
    }

// server
nValue = sedTimeout->Value;
regUnfragWksSV->WriteString("Server", "TimeOut", nValue);
UW_HANDLE_REG_ERROR;

nValue = cmbPriority->ItemIndex;
regUnfragWksSV->WriteString("Server", "Priority", nValue);
UW_HANDLE_REG_ERROR;

nValue = sedThreads->Value;
regUnfragWksSV->WriteString("Server", "Threads", nValue);
UW_HANDLE_REG_ERROR;

bChecked = chkRemovePreview->Checked;
regUnfragWksSV->WriteString("Server", "Preview", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

bChecked = chkRemoveGeom->Checked;
regUnfragWksSV->WriteString("Server", "Geometry", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

// logging
bChecked = chkStartStopService->Checked;
regUnfragWksSV->WriteString("Logging", "Service", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

bChecked = chkStartStopUnfrag->Checked;
regUnfragWksSV->WriteString("Logging", "Unfrag", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

bChecked = chkFilesExamineUnfrag->Checked;
regUnfragWksSV->WriteString("Logging", "NumFiles", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

bChecked = chkBytesSaved->Checked;
regUnfragWksSV->WriteString("Logging", "Bytes", ::String((int ) bChecked));
UW_HANDLE_REG_ERROR;

// scheduling
nValue = cmbSchedHourType->ItemIndex;
regUnfragWksSV->WriteString("Schedule", "HourType", nValue);
UW_HANDLE_REG_ERROR;

nValue = cmbSchedDayType->ItemIndex;
regUnfragWksSV->WriteString("Schedule", "DayType", nValue);
UW_HANDLE_REG_ERROR;

sText = cmbSchedHourType->Items->Strings[cmbSchedHourType->ItemIndex];
regUnfragWksSV->WriteString("Schedule", "HourDescrip", sText);
UW_HANDLE_REG_ERROR;

sText = cmbSchedDayType->Items->Strings[cmbSchedDayType->ItemIndex];
regUnfragWksSV->WriteString("Schedule", "DayDescrip", sText);
UW_HANDLE_REG_ERROR;


dtUnfragTime->Time.DecodeTime(&nHour, &nMinute, &nSec, &nMsec);
regUnfragWksSV->WriteString("Schedule", "Hour", nHour);
UW_HANDLE_REG_ERROR;

regUnfragWksSV->WriteString("Schedule", "Minute", nMinute);
UW_HANDLE_REG_ERROR;

// adminstration
if (false == g_bRegistered)
    {
    regUnfragWksSV->WriteString("Security", "Code", edtCode->Text);
    UW_HANDLE_REG_ERROR;
    }

CLEAN_UP:
    ;

if (WasError == true)
    {
    stbUnfragWks->SimpleText = "Error:  " + regUnfragWksSV->ErrorMessage;
    }
}//TfrmConfig::btnWriteClick
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuAboutClick(TObject *Sender)
{
frmAbout->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuExitClick(TObject *Sender)
{
Close();
}
//---------------------------------------------------------------------------
void __fastcall	TfrmConfig::UnfragIconMessage(TMessage& Msg)
{
// show CSM in response to RMB
if (WM_RBUTTONDOWN == Msg.LParam)
    {
    POINT p;
    GetCursorPos(&p);
    SetForegroundWindow(Handle);
    pmnuConfig->Popup(p.x, p.y);
    }

// show form in response to LMB double click
if (WM_LBUTTONDBLCLK == Msg.LParam)
    {
    ShowModal();
    }
}//TfrmConfig::UnfragIconMessage
//---------------------------------------------------------------------------
void              TfrmConfig::AddIcon()
{
IconData.cbSize = sizeof(NOTIFYICONDATA);
IconData.hWnd = Handle;
IconData.uID = 1;
IconData.uFlags = NIF_MESSAGE | NIF_ICON | NIF_TIP;
IconData.uCallbackMessage = WM_UNFRAG_ICON_MESSAGE;
IconData.hIcon = LoadIcon(HInstance, "MAINICON");

strcpy(IconData.szTip, "UnfragWorks Server");

Shell_NotifyIcon(NIM_ADD, &IconData);
}//TfrmConfig::AddIcon
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::FormDestroy(TObject *Sender)
{
ChangeClipboardChain(
    Handle,         // our handle to remove
    hNextHandle);    // handle of next window in the chain

Shell_NotifyIcon(NIM_DELETE, &IconData);
}//TfrmConfig::FormDestroy
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::tmrConfigTimer(TObject *Sender)
{
// look for the Program Manager aka Explorer
if (FindWindow("Progman", 0))
    {
    // add our icon to the task bar
    AddIcon();
    tmrConfig->Enabled = false;
    }
}//TfrmConfig::tmrConfigTimer
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::pmnuConfigureClick(TObject *Sender)
{
ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::pmnuAboutClick(TObject *Sender)
{
frmAbout->ShowModal();
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::FormShow(TObject *Sender)
{
// stop unfragging
UnfragWorks->ServiceThread->Suspend();
UnfragWorks->tmrUnfrag->Enabled = false;

// read settings from storage
btnReadClick(Sender);
cmbSchedHourTypeChange(Sender);
}//TfrmConfig::FormShow
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::FormClose(TObject *Sender,
      TCloseAction &Action)
{
String      TempStr;

if (true == chkStartStopService->Checked)
    {
    DateTimeToString(TempStr, DATE_TIME_FORMAT,
        TDateTime::CurrentDateTime());

    UnfragWorks->LogMessage("started counting files at "
        + TempStr,
        EVENTLOG_INFORMATION_TYPE, 0, 0);
    }

UnfragWorks->ScanFiles();

if (true == chkStartStopService->Checked)
    {
    DateTimeToString(TempStr, DATE_TIME_FORMAT,
        TDateTime::CurrentDateTime());

    UnfragWorks->LogMessage("finished counting files at "
        + TempStr,
        EVENTLOG_INFORMATION_TYPE, 0, 0);

    UnfragWorks->LogMessage(::String("watching over ") +
        ::String(g_strsFileList->Count) +
        ::String(" files"),
        EVENTLOG_INFORMATION_TYPE, 0, 0);
    }

UnfragWorks->ServiceThread->Resume();
UnfragWorks->tmrUnfrag->Enabled = true;
}//TfrmConfig::FormClose
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuContentsClick(TObject *Sender)
{
WinExec(::String(::String("winhlp32 ") + frmConfig->HelpFile).c_str(), SW_NORMAL);
}//TfrmConfig::mnuContentsClick
//---------------------------------------------------------------------------
void TfrmConfig::DirEnable(int Index)
{
bool        bEnabled = dynamic_cast<TCheckBox  *>(FindComponent(chkDirEnabled[Index]))->Checked;

dynamic_cast<TCheckBox *>(FindComponent(chkSubDirName   [Index]))->Enabled = bEnabled;
dynamic_cast<TEdit     *>(FindComponent(edtBrowseName   [Index]))->Enabled = bEnabled;
dynamic_cast<TButton   *>(FindComponent(btnDirBrowseName[Index]))->Enabled = bEnabled;
}//TfrmConfig::DirEnable
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::chkDirEnabled01Click(TObject *Sender)
{
DirEnable(0);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::chkDirEnabled02Click(TObject *Sender)
{
DirEnable(1);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::chkDirEnabled03Click(TObject *Sender)
{
DirEnable(2);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::chkDirEnabled04Click(TObject *Sender)
{
DirEnable(3);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::chkDirEnabled05Click(TObject *Sender)
{
DirEnable(4);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnRegisterClick(TObject *Sender)
{
char            MachineID[MAX_PATH];

strcpy(MachineID, GetMachineID());

if (true == CheckCode(MachineID, UNFRAG_WORKS_TITLE_CODE, edtCode->Text.c_str()))
    {
    MessageBox(NULL, "Successfully registered!", UNFRAG_WORKS_TITLE,
        MB_OK | MB_DEFBUTTON1 | MB_ICONINFORMATION);

    // write code into UWSV.ini
    regUnfragWksSV->WriteString("Security", "code", edtCode->Text);

    btnWrite->Enabled = true;
    btnRegister->Enabled = false;
    g_bRegistered = true;
    }
else
    {
    // alert user to the error of his ways but let user close form
    // since may have incorrectly entered code
    MessageBox(NULL, "Incorrect code!", UNFRAG_WORKS_TITLE,
        MB_OK | MB_DEFBUTTON1 | MB_ICONERROR);
    }
}//TfrmConfig::btnRegisterClick
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::WMDrawClipboard(TMessage* Message)
{
mnuPaste->Enabled = Clipboard()->HasFormat(CF_TEXT);
SendMessage(hNextHandle, WM_DRAWCLIPBOARD, 0, 0);
}//TfrmConfig::WMDrawClipboard
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::WMChangeCBChain(TMessage* Message)
{
if ((void *) Message->WParam == hNextHandle)
    {
    hNextHandle = (void *) Message->LParam;
    }
else
    {
    SendMessage(hNextHandle,
        WM_CHANGECBCHAIN,
        Message->WParam,  // handle of window to remove
        Message->LParam); // handle of next window
    }
}//TfrmConfig::WMChangeCBChain
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuCutClick(TObject *Sender)
{
// if there is a control selected/highlighted
if (ActiveControl)
    {
    TEdit *Edit = dynamic_cast<TEdit *>(ActiveControl);

    // if the control is an edit box
    if(Edit)
        {
        // we can cut to the clipboard
        Edit->CutToClipboard();
        }
    }
}//TfrmConfig::mnuCutClick
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuCopyClick(TObject *Sender)
{
// if there is a control selected/highlighted
if (ActiveControl)
    {
    TEdit *Edit = dynamic_cast<TEdit *>(ActiveControl);

    // if the control is an edit box
    if (Edit)
        {
        // we can copy to the clipboard
        Edit->CopyToClipboard();
        }
    }
}//TfrmConfig::mnuCopyClick
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::mnuPasteClick(TObject *Sender)
{
// if there is a control selected/highlighted
if (ActiveControl)
    {
    TEdit *Edit = dynamic_cast<TEdit *>(ActiveControl);

    // if the control is an edit box
    if (Edit)
        {
        // we can paste from the clipboard
        Edit->PasteFromClipboard();
        }
    }
}//TfrmConfig::mnuPasteClick
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::cmbSchedHourTypeChange(TObject *Sender)
{
// disable day type & time box if defragging continuously
if (e_Continuous == cmbSchedHourType->ItemIndex)
    {
    cmbSchedDayType->Enabled = false;
    dtUnfragTime   ->Enabled = false;
    }
else
    {
    cmbSchedDayType->Enabled = true;
    dtUnfragTime   ->Enabled = true;
    }
}//TfrmConfig::cmbSchedHourTypeChange
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::btnViewLogClick(TObject *Sender)
{
WinExec("EventVwr.exe", SW_SHOWNORMAL);
}
//---------------------------------------------------------------------------
void __fastcall TfrmConfig::pmnuViewLogClick(TObject *Sender)
{
btnViewLogClick(Sender);
}//TfrmConfig::pmnuViewLogClick
//---------------------------------------------------------------------------

