// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.41  $
// File generated on 10/29/00 6:43:55 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\Wombat\Pro\DMS_StkWks\DMS_StkWks.tlb (1)
// IID\LCID: {52357E4C-4AAB-11D4-8A05-0020AFCC5695}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\Stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __DMS_StkWks_TLB_h__
#define   __DMS_StkWks_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Dms_stkwks_tlb
{

// *********************************************************************//
// HelpString: DMS_StkWks Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_DMS_StkWks;
extern __declspec (package) const GUID IID_IDMS_StickWorks;
extern __declspec (package) const GUID CLSID_DMS_StickWorks;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
interface DECLSPEC_UUID("{52357E4D-4AAB-11D4-8A05-0020AFCC5695}") IDMS_StickWorks;
typedef TComInterface<IDMS_StickWorks, &IID_IDMS_StickWorks> IDMS_StickWorksPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDMS_StickWorks DMS_StickWorks;
typedef IDMS_StickWorksPtr DMS_StickWorksPtr;

#define LIBID_OF_DMS_StickWorks (&LIBID_DMS_StkWks)
// *********************************************************************//
// Interface: IDMS_StickWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52357E4D-4AAB-11D4-8A05-0020AFCC5695}
// *********************************************************************//
interface IDMS_StickWorks  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Configure(void) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(long Value/*[in]*/) = 0; // [3]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Name((BSTR*)&Value));
    return Value;
  }


  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Icon = {write = set_Icon};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDMS_StickWorks
// Interface: IDMS_StickWorks
// *********************************************************************//
template <class T /* IDMS_StickWorks */ >
class TCOMIDMS_StickWorksT : public TComInterface<IDMS_StickWorks>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDMS_StickWorksT() {}
  TCOMIDMS_StickWorksT(IDMS_StickWorks *intf, bool addRef = false) : TComInterface<IDMS_StickWorks>(intf, addRef) {}
  TCOMIDMS_StickWorksT(const TCOMIDMS_StickWorksT& src) : TComInterface<IDMS_StickWorks>(src) {}
  TCOMIDMS_StickWorksT& operator=(const TCOMIDMS_StickWorksT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Configure(void);
  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Icon = {write = set_Icon};
};
typedef TCOMIDMS_StickWorksT<IDMS_StickWorks> TCOMIDMS_StickWorks;

// *********************************************************************//
// DispIntf:  IDMS_StickWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52357E4D-4AAB-11D4-8A05-0020AFCC5695}
// *********************************************************************//
template<class T>
class IDMS_StickWorksDispT : public TAutoDriver<IDMS_StickWorks>
{
public:
  IDMS_StickWorksDispT(){}

  IDMS_StickWorksDispT(IDMS_StickWorks *pintf)
  {
    TAutoDriver<IDMS_StickWorks>::Bind(pintf, false);
  }

  IDMS_StickWorksDispT(IDMS_StickWorksPtr pintf)
  {
    TAutoDriver<IDMS_StickWorks>::Bind(pintf, true);
  }

  IDMS_StickWorksDispT& operator=(IDMS_StickWorks *pintf)
  {
    TAutoDriver<IDMS_StickWorks>::Bind(pintf, false);
    return *this;
  }

  IDMS_StickWorksDispT& operator=(IDMS_StickWorksPtr pintf)
  {
    TAutoDriver<IDMS_StickWorks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DMS_StickWorks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DMS_StickWorks);
  }

  HRESULT         __fastcall Configure();
  HRESULT         __fastcall get_Name(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR Value/*[in]*/);
  HRESULT         __fastcall set_Icon(long Value/*[in]*/);

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            Icon = {write = set_Icon};
};
typedef IDMS_StickWorksDispT<IDMS_StickWorks> IDMS_StickWorksDisp;

// *********************************************************************//
// SmartIntf: TCOMIDMS_StickWorks
// Interface: IDMS_StickWorks
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDMS_StickWorksT<T>::Configure(void)
{
  return (*this)->Configure();
}

template <class T> HRESULT __fastcall
TCOMIDMS_StickWorksT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Name(Value);
}

template <class T> BSTR __fastcall
TCOMIDMS_StickWorksT<T>::get_Name(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Name((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDMS_StickWorksT<T>::set_Name(BSTR Value/*[in]*/)
{
  return (*this)->set_Name(Value);
}

template <class T> HRESULT __fastcall
TCOMIDMS_StickWorksT<T>::set_Icon(long Value/*[in]*/)
{
  return (*this)->set_Icon(Value);
}

// *********************************************************************//
// DispIntf:  IDMS_StickWorks
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {52357E4D-4AAB-11D4-8A05-0020AFCC5695}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDMS_StickWorksDispT<T>::Configure()
{
  _TDispID _dispid(*this, OLETEXT("Configure"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDMS_StickWorksDispT<T>::get_Name(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDMS_StickWorksDispT<T>::get_Name(void)
{
  BSTR Value;
  this->get_Name((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDMS_StickWorksDispT<T>::set_Name(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDMS_StickWorksDispT<T>::set_Icon(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DMS_StickWorks
// Interface: TCOMIDMS_StickWorks
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDMS_StickWorks, IDMS_StickWorks, &CLSID_DMS_StickWorks, &IID_IDMS_StickWorks> CoDMS_StickWorks;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Dms_stkwks_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Dms_stkwks_tlb;
#endif

#pragma option pop

#endif // __DMS_StkWks_TLB_h__
