// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.134.1.41  $
// File generated on 11/18/00 12:30:51 PM from Type Library described below.

// ************************************************************************ //
// Type Lib: C:\WINNT\System32\msxml.dll (1)
// IID\LCID: {D63E0CE2-A0A2-11D0-9C02-00C04FC99C8E}\0
// Helpfile: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\Stdole2.tlb)
//   (2) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __MSXML_TLB_h__
#define   __MSXML_TLB_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Msxml_tlb
{

// *********************************************************************//
// HelpString: Microsoft XML, version 2.0
// Version:    2.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MSXML;
extern __declspec (package) const GUID IID_IXMLDOMImplementation;
extern __declspec (package) const GUID IID_IXMLDOMNode;
extern __declspec (package) const GUID GUID_tagDOMNodeType;
extern __declspec (package) const GUID GUID_DOMNodeType;
extern __declspec (package) const GUID IID_IXMLDOMNodeList;
extern __declspec (package) const GUID IID_IXMLDOMNamedNodeMap;
extern __declspec (package) const GUID IID_IXMLDOMDocument;
extern __declspec (package) const GUID IID_IXMLDOMDocumentType;
extern __declspec (package) const GUID IID_IXMLDOMElement;
extern __declspec (package) const GUID IID_IXMLDOMAttribute;
extern __declspec (package) const GUID IID_IXMLDOMDocumentFragment;
extern __declspec (package) const GUID IID_IXMLDOMCharacterData;
extern __declspec (package) const GUID IID_IXMLDOMText;
extern __declspec (package) const GUID IID_IXMLDOMComment;
extern __declspec (package) const GUID IID_IXMLDOMCDATASection;
extern __declspec (package) const GUID IID_IXMLDOMProcessingInstruction;
extern __declspec (package) const GUID IID_IXMLDOMEntityReference;
extern __declspec (package) const GUID IID_IXMLDOMParseError;
extern __declspec (package) const GUID IID_IXMLDOMNotation;
extern __declspec (package) const GUID IID_IXMLDOMEntity;
extern __declspec (package) const GUID IID_IXTLRuntime;
extern __declspec (package) const GUID DIID_XMLDOMDocumentEvents;
extern __declspec (package) const GUID CLSID_DOMDocument;
extern __declspec (package) const GUID CLSID_DOMFreeThreadedDocument;
extern __declspec (package) const GUID IID_IXMLHttpRequest;
extern __declspec (package) const GUID CLSID_XMLHTTPRequest;
extern __declspec (package) const GUID IID_IXMLDSOControl;
extern __declspec (package) const GUID CLSID_XMLDSOControl;
extern __declspec (package) const GUID IID_IXMLElementCollection;
extern __declspec (package) const GUID IID_IXMLDocument;
extern __declspec (package) const GUID IID_IXMLElement;
extern __declspec (package) const GUID IID_IXMLDocument2;
extern __declspec (package) const GUID IID_IXMLElement2;
extern __declspec (package) const GUID IID_IXMLAttribute;
extern __declspec (package) const GUID IID_IXMLError;
extern __declspec (package) const GUID GUID__xml_error;
extern __declspec (package) const GUID GUID_tagXMLEMEM_TYPE;
extern __declspec (package) const GUID GUID_XMLELEM_TYPE;
extern __declspec (package) const GUID CLSID_XMLDocument;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      tagDOMNodeType;
struct    _xml_error;
enum      tagXMLEMEM_TYPE;
interface DECLSPEC_UUID("{2933BF8F-7B36-11D2-B20E-00C04F983E60}") IXMLDOMImplementation;
typedef TComInterface<IXMLDOMImplementation, &IID_IXMLDOMImplementation> IXMLDOMImplementationPtr;
interface DECLSPEC_UUID("{2933BF80-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNode;
typedef TComInterface<IXMLDOMNode, &IID_IXMLDOMNode> IXMLDOMNodePtr;
interface DECLSPEC_UUID("{2933BF82-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNodeList;
typedef TComInterface<IXMLDOMNodeList, &IID_IXMLDOMNodeList> IXMLDOMNodeListPtr;
interface DECLSPEC_UUID("{2933BF83-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNamedNodeMap;
typedef TComInterface<IXMLDOMNamedNodeMap, &IID_IXMLDOMNamedNodeMap> IXMLDOMNamedNodeMapPtr;
interface DECLSPEC_UUID("{2933BF81-7B36-11D2-B20E-00C04F983E60}") IXMLDOMDocument;
typedef TComInterface<IXMLDOMDocument, &IID_IXMLDOMDocument> IXMLDOMDocumentPtr;
interface DECLSPEC_UUID("{2933BF8B-7B36-11D2-B20E-00C04F983E60}") IXMLDOMDocumentType;
typedef TComInterface<IXMLDOMDocumentType, &IID_IXMLDOMDocumentType> IXMLDOMDocumentTypePtr;
interface DECLSPEC_UUID("{2933BF86-7B36-11D2-B20E-00C04F983E60}") IXMLDOMElement;
typedef TComInterface<IXMLDOMElement, &IID_IXMLDOMElement> IXMLDOMElementPtr;
interface DECLSPEC_UUID("{2933BF85-7B36-11D2-B20E-00C04F983E60}") IXMLDOMAttribute;
typedef TComInterface<IXMLDOMAttribute, &IID_IXMLDOMAttribute> IXMLDOMAttributePtr;
interface DECLSPEC_UUID("{3EFAA413-272F-11D2-836F-0000F87A7782}") IXMLDOMDocumentFragment;
typedef TComInterface<IXMLDOMDocumentFragment, &IID_IXMLDOMDocumentFragment> IXMLDOMDocumentFragmentPtr;
interface DECLSPEC_UUID("{2933BF84-7B36-11D2-B20E-00C04F983E60}") IXMLDOMCharacterData;
typedef TComInterface<IXMLDOMCharacterData, &IID_IXMLDOMCharacterData> IXMLDOMCharacterDataPtr;
interface DECLSPEC_UUID("{2933BF87-7B36-11D2-B20E-00C04F983E60}") IXMLDOMText;
typedef TComInterface<IXMLDOMText, &IID_IXMLDOMText> IXMLDOMTextPtr;
interface DECLSPEC_UUID("{2933BF88-7B36-11D2-B20E-00C04F983E60}") IXMLDOMComment;
typedef TComInterface<IXMLDOMComment, &IID_IXMLDOMComment> IXMLDOMCommentPtr;
interface DECLSPEC_UUID("{2933BF8A-7B36-11D2-B20E-00C04F983E60}") IXMLDOMCDATASection;
typedef TComInterface<IXMLDOMCDATASection, &IID_IXMLDOMCDATASection> IXMLDOMCDATASectionPtr;
interface DECLSPEC_UUID("{2933BF89-7B36-11D2-B20E-00C04F983E60}") IXMLDOMProcessingInstruction;
typedef TComInterface<IXMLDOMProcessingInstruction, &IID_IXMLDOMProcessingInstruction> IXMLDOMProcessingInstructionPtr;
interface DECLSPEC_UUID("{2933BF8E-7B36-11D2-B20E-00C04F983E60}") IXMLDOMEntityReference;
typedef TComInterface<IXMLDOMEntityReference, &IID_IXMLDOMEntityReference> IXMLDOMEntityReferencePtr;
interface DECLSPEC_UUID("{3EFAA426-272F-11D2-836F-0000F87A7782}") IXMLDOMParseError;
typedef TComInterface<IXMLDOMParseError, &IID_IXMLDOMParseError> IXMLDOMParseErrorPtr;
interface DECLSPEC_UUID("{2933BF8C-7B36-11D2-B20E-00C04F983E60}") IXMLDOMNotation;
typedef TComInterface<IXMLDOMNotation, &IID_IXMLDOMNotation> IXMLDOMNotationPtr;
interface DECLSPEC_UUID("{2933BF8D-7B36-11D2-B20E-00C04F983E60}") IXMLDOMEntity;
typedef TComInterface<IXMLDOMEntity, &IID_IXMLDOMEntity> IXMLDOMEntityPtr;
interface DECLSPEC_UUID("{3EFAA425-272F-11D2-836F-0000F87A7782}") IXTLRuntime;
typedef TComInterface<IXTLRuntime, &IID_IXTLRuntime> IXTLRuntimePtr;
interface DECLSPEC_UUID("{3EFAA427-272F-11D2-836F-0000F87A7782}") XMLDOMDocumentEvents;
typedef TComInterface<XMLDOMDocumentEvents, &DIID_XMLDOMDocumentEvents> XMLDOMDocumentEventsPtr;
interface DECLSPEC_UUID("{ED8C108D-4349-11D2-91A4-00C04F7969E8}") IXMLHttpRequest;
typedef TComInterface<IXMLHttpRequest, &IID_IXMLHttpRequest> IXMLHttpRequestPtr;
interface DECLSPEC_UUID("{310AFA62-0575-11D2-9CA9-0060B0EC3D39}") IXMLDSOControl;
typedef TComInterface<IXMLDSOControl, &IID_IXMLDSOControl> IXMLDSOControlPtr;
interface DECLSPEC_UUID("{65725580-9B5D-11D0-9BFE-00C04FC99C8E}") IXMLElementCollection;
typedef TComInterface<IXMLElementCollection, &IID_IXMLElementCollection> IXMLElementCollectionPtr;
interface DECLSPEC_UUID("{F52E2B61-18A1-11D1-B105-00805F49916B}") IXMLDocument;
typedef TComInterface<IXMLDocument, &IID_IXMLDocument> IXMLDocumentPtr;
interface DECLSPEC_UUID("{3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}") IXMLElement;
typedef TComInterface<IXMLElement, &IID_IXMLElement> IXMLElementPtr;
interface DECLSPEC_UUID("{2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}") IXMLDocument2;
typedef TComInterface<IXMLDocument2, &IID_IXMLDocument2> IXMLDocument2Ptr;
interface DECLSPEC_UUID("{2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}") IXMLElement2;
typedef TComInterface<IXMLElement2, &IID_IXMLElement2> IXMLElement2Ptr;
interface DECLSPEC_UUID("{D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}") IXMLAttribute;
typedef TComInterface<IXMLAttribute, &IID_IXMLAttribute> IXMLAttributePtr;
interface DECLSPEC_UUID("{948C5AD3-C58D-11D0-9C0B-00C04FC99C8E}") IXMLError;
typedef TComInterface<IXMLError, &IID_IXMLError> IXMLErrorPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IXMLDOMDocument DOMDocument;
typedef IXMLDOMDocumentPtr DOMDocumentPtr;
typedef IXMLDOMDocument DOMFreeThreadedDocument;
typedef IXMLDOMDocumentPtr DOMFreeThreadedDocumentPtr;
typedef IXMLHttpRequest XMLHTTPRequest;
typedef IXMLHttpRequestPtr XMLHTTPRequestPtr;
typedef IXMLDSOControl XMLDSOControl;
typedef IXMLDSOControlPtr XMLDSOControlPtr;
typedef IXMLDocument2 XMLDocument;
typedef IXMLDocument2Ptr XMLDocumentPtr;

#define LIBID_OF_DOMDocument (&LIBID_MSXML)
#define LIBID_OF_DOMFreeThreadedDocument (&LIBID_MSXML)
#define LIBID_OF_XMLHTTPRequest (&LIBID_MSXML)
#define LIBID_OF_XMLDSOControl (&LIBID_MSXML)
#define LIBID_OF_XMLDocument (&LIBID_MSXML)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Msxml_tlb::tagDOMNodeType DOMNodeType;
typedef Msxml_tlb::tagXMLEMEM_TYPE XMLELEM_TYPE;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum tagDOMNodeType
{
  NODE_INVALID = 0, 
  NODE_ELEMENT = 1, 
  NODE_ATTRIBUTE = 2, 
  NODE_TEXT = 3, 
  NODE_CDATA_SECTION = 4, 
  NODE_ENTITY_REFERENCE = 5, 
  NODE_ENTITY = 6, 
  NODE_PROCESSING_INSTRUCTION = 7, 
  NODE_COMMENT = 8, 
  NODE_DOCUMENT = 9, 
  NODE_DOCUMENT_TYPE = 10, 
  NODE_DOCUMENT_FRAGMENT = 11, 
  NODE_NOTATION = 12
} tagDOMNodeType;

typedef enum tagXMLEMEM_TYPE
{
  XMLELEMTYPE_ELEMENT = 0, 
  XMLELEMTYPE_TEXT = 1, 
  XMLELEMTYPE_COMMENT = 2, 
  XMLELEMTYPE_DOCUMENT = 3, 
  XMLELEMTYPE_DTD = 4, 
  XMLELEMTYPE_PI = 5, 
  XMLELEMTYPE_OTHER = 6
} tagXMLEMEM_TYPE;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct _xml_error
{
  unsigned _nLine;
  BSTR _pchBuf;
  unsigned _cchBuf;
  unsigned _ich;
  BSTR _pszFound;
  BSTR _pszExpected;
  unsigned_long _reserved1;
  unsigned_long _reserved2;
};

// *********************************************************************//
// Interface: IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMImplementation  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                               TOLEBOOL* hasFeature/*[out,retval]*/) = 0; // [145]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TOLEBOOL __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/)
  {
    TOLEBOOL hasFeature;
    OLECHECK(this->hasFeature(feature, version, (TOLEBOOL*)&hasFeature));
    return hasFeature;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNode  : public IDispatch
{
public:
  // [2] name of the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeName(BSTR* name/*[out,retval]*/) = 0;
  // [3] value stored in the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeValue(TVariant* value/*[out,retval]*/) = 0;
  // [3] value stored in the node
  virtual HRESULT STDMETHODCALLTYPE set_nodeValue(TVariantInParam value/*[in]*/) = 0;
  // [4] the node's type
  virtual HRESULT STDMETHODCALLTYPE get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/) = 0;
  // [6] parent of the node
  virtual HRESULT STDMETHODCALLTYPE get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/) = 0;
  // [7] the collection of the node's children
  virtual HRESULT STDMETHODCALLTYPE get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/) = 0;
  // [8] first child of the node
  virtual HRESULT STDMETHODCALLTYPE get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/) = 0;
  // [9] first child of the node
  virtual HRESULT STDMETHODCALLTYPE get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/) = 0;
  // [10] left sibling of the node
  virtual HRESULT STDMETHODCALLTYPE get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/) = 0;
  // [11] right sibling of the node
  virtual HRESULT STDMETHODCALLTYPE get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/) = 0;
  // [12] the collection of the node's attributes
  virtual HRESULT STDMETHODCALLTYPE get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/) = 0;
  // [13] insert a child node
  virtual HRESULT STDMETHODCALLTYPE insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                 TVariantInParam refChild/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/) = 0;
  // [14] replace a child node
  virtual HRESULT STDMETHODCALLTYPE replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/) = 0;
  // [15] remove a child node
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                                Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/) = 0;
  // [16] append a child node
  virtual HRESULT STDMETHODCALLTYPE appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/) = 0; // [17]
  // [18] document that contains the node
  virtual HRESULT STDMETHODCALLTYPE get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE cloneNode(TOLEBOOL deep/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/) = 0; // [19]
  // [21] the type of node in string form
  virtual HRESULT STDMETHODCALLTYPE get_nodeTypeString(BSTR* nodeType/*[out,retval]*/) = 0;
  // [24] text content of the node and subtree
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* text/*[out,retval]*/) = 0;
  // [24] text content of the node and subtree
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR text/*[in]*/) = 0;
  // [22] indicates whether node is a default value
  virtual HRESULT STDMETHODCALLTYPE get_specified(TOLEBOOL* isSpecified/*[out,retval]*/) = 0;
  // [23] pointer to the definition of the node in the DTD or schema
  virtual HRESULT STDMETHODCALLTYPE get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/) = 0;
  // [25] get the strongly typed value of the node
  virtual HRESULT STDMETHODCALLTYPE get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/) = 0;
  // [25] get the strongly typed value of the node
  virtual HRESULT STDMETHODCALLTYPE set_nodeTypedValue(TVariantInParam typedValue/*[in]*/) = 0;
  // [26] the data type of the node
  virtual HRESULT STDMETHODCALLTYPE get_dataType(TVariant* dataTypeName/*[out,retval]*/) = 0;
  // [26] the data type of the node
  virtual HRESULT STDMETHODCALLTYPE set_dataType(BSTR dataTypeName/*[in]*/) = 0;
  // [27] return the XML source for the node and each of its descendants
  virtual HRESULT STDMETHODCALLTYPE get_xml(BSTR* xmlString/*[out,retval]*/) = 0;
  // [28] apply the stylesheet to the subtree
  virtual HRESULT STDMETHODCALLTYPE transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                  BSTR* xmlString/*[out,retval]*/) = 0;
  // [29] execute query on the subtree
  virtual HRESULT STDMETHODCALLTYPE selectNodes(BSTR queryString/*[in]*/, 
                                                Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/) = 0;
  // [30] execute query on the subtree
  virtual HRESULT STDMETHODCALLTYPE selectSingleNode(BSTR queryString/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/) = 0;
  // [31] has sub-tree been completely parsed
  virtual HRESULT STDMETHODCALLTYPE get_parsed(TOLEBOOL* isParsed/*[out,retval]*/) = 0;
  // [32] the URI for the namespace applying to the node
  virtual HRESULT STDMETHODCALLTYPE get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/) = 0;
  // [33] the prefix for the namespace applying to the node
  virtual HRESULT STDMETHODCALLTYPE get_prefix(BSTR* prefixString/*[out,retval]*/) = 0;
  // [34] the base name of the node (nodename with the prefix stripped off)
  virtual HRESULT STDMETHODCALLTYPE get_baseName(BSTR* nameString/*[out,retval]*/) = 0;
  // [35] apply the stylesheet to the subtree, returning the result through a document or a stream
  virtual HRESULT STDMETHODCALLTYPE transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                          TVariantInParam outputObject/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_nodeName(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_nodeName((BSTR*)&name));
    return name;
  }

  TVariant __fastcall get_nodeValue(void)
  {
    TVariant value;
    OLECHECK(this->get_nodeValue((TVariant*)&value));
    return value;
  }

  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void)
  {
    Msxml_tlb::DOMNodeType type;
    OLECHECK(this->get_nodeType((Msxml_tlb::DOMNodeType*)&type));
    return type;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void)
  {
    Msxml_tlb::IXMLDOMNodePtr parent;
    OLECHECK(this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent));
    return parent;
  }

  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void)
  {
    Msxml_tlb::IXMLDOMNodeListPtr childList;
    OLECHECK(this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList));
    return childList;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void)
  {
    Msxml_tlb::IXMLDOMNodePtr firstChild;
    OLECHECK(this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild));
    return firstChild;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void)
  {
    Msxml_tlb::IXMLDOMNodePtr lastChild;
    OLECHECK(this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild));
    return lastChild;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void)
  {
    Msxml_tlb::IXMLDOMNodePtr previousSibling;
    OLECHECK(this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling));
    return previousSibling;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void)
  {
    Msxml_tlb::IXMLDOMNodePtr nextSibling;
    OLECHECK(this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling));
    return nextSibling;
  }

  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void)
  {
    Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
    OLECHECK(this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap));
    return attributeMap;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr outNewChild;
    OLECHECK(this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild));
    return outNewChild;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr outOldChild;
    OLECHECK(this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild));
    return outOldChild;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr oldChild;
    OLECHECK(this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild));
    return oldChild;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr outNewChild;
    OLECHECK(this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild));
    return outNewChild;
  }

  TOLEBOOL __fastcall hasChildNodes(void)
  {
    TOLEBOOL hasChild;
    OLECHECK(this->hasChildNodes((TOLEBOOL*)&hasChild));
    return hasChild;
  }

  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void)
  {
    Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
    OLECHECK(this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument));
    return DOMDocument;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr cloneRoot;
    OLECHECK(this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot));
    return cloneRoot;
  }

  BSTR __fastcall get_nodeTypeString(void)
  {
    BSTR nodeType = 0;
    OLECHECK(this->get_nodeTypeString((BSTR*)&nodeType));
    return nodeType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR text = 0;
    OLECHECK(this->get_text((BSTR*)&text));
    return text;
  }

  TOLEBOOL __fastcall get_specified(void)
  {
    TOLEBOOL isSpecified;
    OLECHECK(this->get_specified((TOLEBOOL*)&isSpecified));
    return isSpecified;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void)
  {
    Msxml_tlb::IXMLDOMNodePtr definitionNode;
    OLECHECK(this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode));
    return definitionNode;
  }

  TVariant __fastcall get_nodeTypedValue(void)
  {
    TVariant typedValue;
    OLECHECK(this->get_nodeTypedValue((TVariant*)&typedValue));
    return typedValue;
  }

  TVariant __fastcall get_dataType(void)
  {
    TVariant dataTypeName;
    OLECHECK(this->get_dataType((TVariant*)&dataTypeName));
    return dataTypeName;
  }

  BSTR __fastcall get_xml(void)
  {
    BSTR xmlString = 0;
    OLECHECK(this->get_xml((BSTR*)&xmlString));
    return xmlString;
  }

  BSTR __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
  {
    BSTR xmlString = 0;
    OLECHECK(this->transformNode(stylesheet, (BSTR*)&xmlString));
    return xmlString;
  }

  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodeListPtr resultList;
    OLECHECK(this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList));
    return resultList;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr resultNode;
    OLECHECK(this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode));
    return resultNode;
  }

  TOLEBOOL __fastcall get_parsed(void)
  {
    TOLEBOOL isParsed;
    OLECHECK(this->get_parsed((TOLEBOOL*)&isParsed));
    return isParsed;
  }

  BSTR __fastcall get_namespaceURI(void)
  {
    BSTR namespaceURI = 0;
    OLECHECK(this->get_namespaceURI((BSTR*)&namespaceURI));
    return namespaceURI;
  }

  BSTR __fastcall get_prefix(void)
  {
    BSTR prefixString = 0;
    OLECHECK(this->get_prefix((BSTR*)&prefixString));
    return prefixString;
  }

  BSTR __fastcall get_baseName(void)
  {
    BSTR nameString = 0;
    OLECHECK(this->get_baseName((BSTR*)&nameString));
    return nameString;
  }


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNodeList  : public IDispatch
{
public:
  // [0] collection of nodes
  virtual HRESULT STDMETHODCALLTYPE get_item(long index/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/) = 0;
  // [74] number of nodes in the collection
  virtual HRESULT STDMETHODCALLTYPE get_length(long* listLength/*[out,retval]*/) = 0;
  // [76] get next node from iterator
  virtual HRESULT STDMETHODCALLTYPE nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/) = 0;
  // [77] reset the position of iterator
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_item(long index/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr listItem;
    OLECHECK(this->get_item(index, (Msxml_tlb::IXMLDOMNodePtr*)&listItem));
    return listItem;
  }

  long __fastcall get_length(void)
  {
    long listLength;
    OLECHECK(this->get_length((long*)&listLength));
    return listLength;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall nextNode(void)
  {
    Msxml_tlb::IXMLDOMNodePtr nextItem;
    OLECHECK(this->nextNode((Msxml_tlb::IXMLDOMNodePtr*)&nextItem));
    return nextItem;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNamedNodeMap  : public IDispatch
{
public:
  // [83] lookup item by name
  virtual HRESULT STDMETHODCALLTYPE getNamedItem(BSTR name/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/) = 0;
  // [84] set item by name
  virtual HRESULT STDMETHODCALLTYPE setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* nameItem/*[out,retval]*/) = 0;
  // [85] remove item by name
  virtual HRESULT STDMETHODCALLTYPE removeNamedItem(BSTR name/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/) = 0;
  // [0] collection of nodes
  virtual HRESULT STDMETHODCALLTYPE get_item(long index/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/) = 0;
  // [74] number of nodes in the collection
  virtual HRESULT STDMETHODCALLTYPE get_length(long* listLength/*[out,retval]*/) = 0;
  // [87] lookup the item by name and namespace
  virtual HRESULT STDMETHODCALLTYPE getQualifiedItem(BSTR baseName/*[in]*/, 
                                                     BSTR namespaceURI/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/) = 0;
  // [88] remove the item by name and namespace
  virtual HRESULT STDMETHODCALLTYPE removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                        BSTR namespaceURI/*[in]*/, 
                                                        Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/) = 0;
  // [89] get next node from iterator
  virtual HRESULT STDMETHODCALLTYPE nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/) = 0;
  // [90] reset the position of iterator
  virtual HRESULT STDMETHODCALLTYPE reset(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLDOMNodePtr __fastcall getNamedItem(BSTR name/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr namedItem;
    OLECHECK(this->getNamedItem(name, (Msxml_tlb::IXMLDOMNodePtr*)&namedItem));
    return namedItem;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr nameItem;
    OLECHECK(this->setNamedItem(newItem, (Msxml_tlb::IXMLDOMNodePtr*)&nameItem));
    return nameItem;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall removeNamedItem(BSTR name/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr namedItem;
    OLECHECK(this->removeNamedItem(name, (Msxml_tlb::IXMLDOMNodePtr*)&namedItem));
    return namedItem;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall get_item(long index/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr listItem;
    OLECHECK(this->get_item(index, (Msxml_tlb::IXMLDOMNodePtr*)&listItem));
    return listItem;
  }

  long __fastcall get_length(void)
  {
    long listLength;
    OLECHECK(this->get_length((long*)&listLength));
    return listLength;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall getQualifiedItem(BSTR baseName/*[in]*/, 
                                                        BSTR namespaceURI/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr qualifiedItem;
    OLECHECK(this->getQualifiedItem(baseName, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&qualifiedItem));
    return qualifiedItem;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                           BSTR namespaceURI/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr qualifiedItem;
    OLECHECK(this->removeQualifiedItem(baseName, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&qualifiedItem));
    return qualifiedItem;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall nextNode(void)
  {
    Msxml_tlb::IXMLDOMNodePtr nextItem;
    OLECHECK(this->nextNode((Msxml_tlb::IXMLDOMNodePtr*)&nextItem));
    return nextItem;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMDocument  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [38] node corresponding to the DOCTYPE
  virtual HRESULT STDMETHODCALLTYPE get_doctype(Msxml_tlb::IXMLDOMDocumentTypePtr* documentType/*[out,retval]*/) = 0;
  // [39] info on this DOM implementation
  virtual HRESULT STDMETHODCALLTYPE get_implementation(Msxml_tlb::IXMLDOMImplementationPtr* impl/*[out,retval]*/) = 0;
  // [40] the root of the tree
  virtual HRESULT STDMETHODCALLTYPE get_documentElement(Msxml_tlb::IXMLDOMElementPtr* DOMElement/*[out,retval]*/) = 0;
  // [40] the root of the tree
  virtual HRESULT STDMETHODCALLTYPE _set_documentElement(Msxml_tlb::IXMLDOMElementPtr DOMElement/*[in]*/) = 0;
  // [41] create an Element node
  virtual HRESULT STDMETHODCALLTYPE createElement(BSTR tagName/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMElementPtr* element/*[out,retval]*/) = 0;
  // [42] create a DocumentFragment node
  virtual HRESULT STDMETHODCALLTYPE createDocumentFragment(Msxml_tlb::IXMLDOMDocumentFragmentPtr* docFrag/*[out,retval]*/) = 0;
  // [43] create a text node
  virtual HRESULT STDMETHODCALLTYPE createTextNode(BSTR data/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMTextPtr* text/*[out,retval]*/) = 0;
  // [44] create a comment node
  virtual HRESULT STDMETHODCALLTYPE createComment(BSTR data/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMCommentPtr* comment/*[out,retval]*/) = 0;
  // [45] create a CDATA section node
  virtual HRESULT STDMETHODCALLTYPE createCDATASection(BSTR data/*[in]*/, 
                                                       Msxml_tlb::IXMLDOMCDATASectionPtr* cdata/*[out,retval]*/) = 0;
  // [46] create a processing instruction node
  virtual HRESULT STDMETHODCALLTYPE createProcessingInstruction(BSTR target/*[in]*/, 
                                                                BSTR data/*[in]*/, 
                                                                Msxml_tlb::IXMLDOMProcessingInstructionPtr* pi/*[out,retval]*/) = 0;
  // [47] create an attribute node
  virtual HRESULT STDMETHODCALLTYPE createAttribute(BSTR name/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMAttributePtr* attribute/*[out,retval]*/) = 0;
  // [49] create an entity reference node
  virtual HRESULT STDMETHODCALLTYPE createEntityReference(BSTR name/*[in]*/, 
                                                          Msxml_tlb::IXMLDOMEntityReferencePtr* entityRef/*[out,retval]*/) = 0;
  // [50] build a list of elements by name
  virtual HRESULT STDMETHODCALLTYPE getElementsByTagName(BSTR tagName/*[in]*/, 
                                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/) = 0;
  // [54] create a node of the specified node type and name
  virtual HRESULT STDMETHODCALLTYPE createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                               BSTR namespaceURI/*[in]*/, 
                                               Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/) = 0;
  // [56] retrieve node from it's ID
  virtual HRESULT STDMETHODCALLTYPE nodeFromID(BSTR idString/*[in]*/, 
                                               Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/) = 0;
  // [58] load document from the specified XML source
  virtual HRESULT STDMETHODCALLTYPE load(TVariantInParam xmlSource/*[in]*/, 
                                         TOLEBOOL* isSuccessful/*[out,retval]*/) = 0;
  // [-525] get the state of the XML document
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* value/*[out,retval]*/) = 0;
  // [59] get the last parser error
  virtual HRESULT STDMETHODCALLTYPE get_parseError(Msxml_tlb::IXMLDOMParseErrorPtr* errorObj/*[out,retval]*/) = 0;
  // [60] get the URL for the loaded XML document
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* urlString/*[out,retval]*/) = 0;
  // [61] flag for asynchronous download
  virtual HRESULT STDMETHODCALLTYPE get_async(TOLEBOOL* isAsync/*[out,retval]*/) = 0;
  // [61] flag for asynchronous download
  virtual HRESULT STDMETHODCALLTYPE set_async(TOLEBOOL isAsync/*[in]*/) = 0;
  // [62] abort an asynchronous download
  virtual HRESULT STDMETHODCALLTYPE abort(void) = 0;
  // [63] load the document from a string
  virtual HRESULT STDMETHODCALLTYPE loadXML(BSTR bstrXML/*[in]*/, 
                                            TOLEBOOL* isSuccessful/*[out,retval]*/) = 0;
  // [64] save the document to a specified desination
  virtual HRESULT STDMETHODCALLTYPE save(TVariantInParam desination/*[in]*/) = 0;
  // [65] indicates whether the parser performs validation
  virtual HRESULT STDMETHODCALLTYPE get_validateOnParse(TOLEBOOL* isValidating/*[out,retval]*/) = 0;
  // [65] indicates whether the parser performs validation
  virtual HRESULT STDMETHODCALLTYPE set_validateOnParse(TOLEBOOL isValidating/*[in]*/) = 0;
  // [66] indicates whether the parser resolves references to external DTD/Entities/Schema
  virtual HRESULT STDMETHODCALLTYPE get_resolveExternals(TOLEBOOL* isResolving/*[out,retval]*/) = 0;
  // [66] indicates whether the parser resolves references to external DTD/Entities/Schema
  virtual HRESULT STDMETHODCALLTYPE set_resolveExternals(TOLEBOOL isResolving/*[in]*/) = 0;
  // [67] indicates whether the parser preserves whitespace
  virtual HRESULT STDMETHODCALLTYPE get_preserveWhiteSpace(TOLEBOOL* isPreserving/*[out,retval]*/) = 0;
  // [67] indicates whether the parser preserves whitespace
  virtual HRESULT STDMETHODCALLTYPE set_preserveWhiteSpace(TOLEBOOL isPreserving/*[in]*/) = 0;
  // [68] register a readystatechange event handler
  virtual HRESULT STDMETHODCALLTYPE set_onreadystatechange(TVariantInParam Param1/*[in]*/) = 0;
  // [69] register an ondataavailable event handler
  virtual HRESULT STDMETHODCALLTYPE set_ondataavailable(TVariantInParam Param1/*[in]*/) = 0;
  // [70] register an ontransformnode event handler
  virtual HRESULT STDMETHODCALLTYPE set_ontransformnode(TVariantInParam Param1/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLDOMDocumentTypePtr __fastcall get_doctype(void)
  {
    Msxml_tlb::IXMLDOMDocumentTypePtr documentType;
    OLECHECK(this->get_doctype((Msxml_tlb::IXMLDOMDocumentTypePtr*)&documentType));
    return documentType;
  }

  Msxml_tlb::IXMLDOMImplementationPtr __fastcall get_implementation(void)
  {
    Msxml_tlb::IXMLDOMImplementationPtr impl;
    OLECHECK(this->get_implementation((Msxml_tlb::IXMLDOMImplementationPtr*)&impl));
    return impl;
  }

  Msxml_tlb::IXMLDOMElementPtr __fastcall get_documentElement(void)
  {
    Msxml_tlb::IXMLDOMElementPtr DOMElement;
    OLECHECK(this->get_documentElement((Msxml_tlb::IXMLDOMElementPtr*)&DOMElement));
    return DOMElement;
  }

  Msxml_tlb::IXMLDOMElementPtr __fastcall createElement(BSTR tagName/*[in]*/)
  {
    Msxml_tlb::IXMLDOMElementPtr element;
    OLECHECK(this->createElement(tagName, (Msxml_tlb::IXMLDOMElementPtr*)&element));
    return element;
  }

  Msxml_tlb::IXMLDOMDocumentFragmentPtr __fastcall createDocumentFragment(void)
  {
    Msxml_tlb::IXMLDOMDocumentFragmentPtr docFrag;
    OLECHECK(this->createDocumentFragment((Msxml_tlb::IXMLDOMDocumentFragmentPtr*)&docFrag));
    return docFrag;
  }

  Msxml_tlb::IXMLDOMTextPtr __fastcall createTextNode(BSTR data/*[in]*/)
  {
    Msxml_tlb::IXMLDOMTextPtr text;
    OLECHECK(this->createTextNode(data, (Msxml_tlb::IXMLDOMTextPtr*)&text));
    return text;
  }

  Msxml_tlb::IXMLDOMCommentPtr __fastcall createComment(BSTR data/*[in]*/)
  {
    Msxml_tlb::IXMLDOMCommentPtr comment;
    OLECHECK(this->createComment(data, (Msxml_tlb::IXMLDOMCommentPtr*)&comment));
    return comment;
  }

  Msxml_tlb::IXMLDOMCDATASectionPtr __fastcall createCDATASection(BSTR data/*[in]*/)
  {
    Msxml_tlb::IXMLDOMCDATASectionPtr cdata;
    OLECHECK(this->createCDATASection(data, (Msxml_tlb::IXMLDOMCDATASectionPtr*)&cdata));
    return cdata;
  }

  Msxml_tlb::IXMLDOMProcessingInstructionPtr __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                                    BSTR data/*[in]*/)
  {
    Msxml_tlb::IXMLDOMProcessingInstructionPtr pi;
    OLECHECK(this->createProcessingInstruction(target, data, (Msxml_tlb::IXMLDOMProcessingInstructionPtr*)&pi));
    return pi;
  }

  Msxml_tlb::IXMLDOMAttributePtr __fastcall createAttribute(BSTR name/*[in]*/)
  {
    Msxml_tlb::IXMLDOMAttributePtr attribute;
    OLECHECK(this->createAttribute(name, (Msxml_tlb::IXMLDOMAttributePtr*)&attribute));
    return attribute;
  }

  Msxml_tlb::IXMLDOMEntityReferencePtr __fastcall createEntityReference(BSTR name/*[in]*/)
  {
    Msxml_tlb::IXMLDOMEntityReferencePtr entityRef;
    OLECHECK(this->createEntityReference(name, (Msxml_tlb::IXMLDOMEntityReferencePtr*)&entityRef));
    return entityRef;
  }

  Msxml_tlb::IXMLDOMNodeListPtr __fastcall getElementsByTagName(BSTR tagName/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodeListPtr resultList;
    OLECHECK(this->getElementsByTagName(tagName, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList));
    return resultList;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                                  BSTR namespaceURI/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr node;
    OLECHECK(this->createNode(type, name, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&node));
    return node;
  }

  Msxml_tlb::IXMLDOMNodePtr __fastcall nodeFromID(BSTR idString/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodePtr node;
    OLECHECK(this->nodeFromID(idString, (Msxml_tlb::IXMLDOMNodePtr*)&node));
    return node;
  }

  TOLEBOOL __fastcall load(TVariantInParam xmlSource/*[in]*/)
  {
    TOLEBOOL isSuccessful;
    OLECHECK(this->load(xmlSource, (TOLEBOOL*)&isSuccessful));
    return isSuccessful;
  }

  long __fastcall get_readyState(void)
  {
    long value;
    OLECHECK(this->get_readyState((long*)&value));
    return value;
  }

  Msxml_tlb::IXMLDOMParseErrorPtr __fastcall get_parseError(void)
  {
    Msxml_tlb::IXMLDOMParseErrorPtr errorObj;
    OLECHECK(this->get_parseError((Msxml_tlb::IXMLDOMParseErrorPtr*)&errorObj));
    return errorObj;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR urlString = 0;
    OLECHECK(this->get_url((BSTR*)&urlString));
    return urlString;
  }

  TOLEBOOL __fastcall get_async(void)
  {
    TOLEBOOL isAsync;
    OLECHECK(this->get_async((TOLEBOOL*)&isAsync));
    return isAsync;
  }

  TOLEBOOL __fastcall loadXML(BSTR bstrXML/*[in]*/)
  {
    TOLEBOOL isSuccessful;
    OLECHECK(this->loadXML(bstrXML, (TOLEBOOL*)&isSuccessful));
    return isSuccessful;
  }

  TOLEBOOL __fastcall get_validateOnParse(void)
  {
    TOLEBOOL isValidating;
    OLECHECK(this->get_validateOnParse((TOLEBOOL*)&isValidating));
    return isValidating;
  }

  TOLEBOOL __fastcall get_resolveExternals(void)
  {
    TOLEBOOL isResolving;
    OLECHECK(this->get_resolveExternals((TOLEBOOL*)&isResolving));
    return isResolving;
  }

  TOLEBOOL __fastcall get_preserveWhiteSpace(void)
  {
    TOLEBOOL isPreserving;
    OLECHECK(this->get_preserveWhiteSpace((TOLEBOOL*)&isPreserving));
    return isPreserving;
  }


  __property   Msxml_tlb::IXMLDOMDocumentTypePtr doctype = {read = get_doctype};
  __property   Msxml_tlb::IXMLDOMImplementationPtr implementation = {read = get_implementation};
  __property   Msxml_tlb::IXMLDOMElementPtr documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml_tlb::IXMLDOMParseErrorPtr parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   TOLEBOOL        async = {read = get_async, write = set_async};
  __property   TOLEBOOL        validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   TOLEBOOL        resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   TOLEBOOL        preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMDocumentType  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [131] name of the document type (root of the tree)
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* rootName/*[out,retval]*/) = 0;
  // [132] a list of entities in the document
  virtual HRESULT STDMETHODCALLTYPE get_entities(Msxml_tlb::IXMLDOMNamedNodeMapPtr* entityMap/*[out,retval]*/) = 0;
  // [133] a list of notations in the document
  virtual HRESULT STDMETHODCALLTYPE get_notations(Msxml_tlb::IXMLDOMNamedNodeMapPtr* notationMap/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR rootName = 0;
    OLECHECK(this->get_name((BSTR*)&rootName));
    return rootName;
  }

  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_entities(void)
  {
    Msxml_tlb::IXMLDOMNamedNodeMapPtr entityMap;
    OLECHECK(this->get_entities((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&entityMap));
    return entityMap;
  }

  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_notations(void)
  {
    Msxml_tlb::IXMLDOMNamedNodeMapPtr notationMap;
    OLECHECK(this->get_notations((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&notationMap));
    return notationMap;
  }


  __property   BSTR            name = {read = get_name};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr entities = {read = get_entities};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr notations = {read = get_notations};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMElement  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [97] get the tagName of the element
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* tagName/*[out,retval]*/) = 0;
  // [99] look up the string value of an attribute by name
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR name/*[in]*/, TVariant* value/*[out,retval]*/) = 0;
  // [100] set the string value of an attribute by name
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR name/*[in]*/, TVariantInParam value/*[in]*/) = 0;
  // [101] remove an attribute by name
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR name/*[in]*/) = 0;
  // [102] look up the attribute node by name
  virtual HRESULT STDMETHODCALLTYPE getAttributeNode(BSTR name/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/) = 0;
  // [103] set the specified attribute on the element
  virtual HRESULT STDMETHODCALLTYPE setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/) = 0;
  // [104] remove the specified attribute
  virtual HRESULT STDMETHODCALLTYPE removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/, 
                                                        Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/) = 0;
  // [105] build a list of elements by name
  virtual HRESULT STDMETHODCALLTYPE getElementsByTagName(BSTR tagName/*[in]*/, 
                                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/) = 0;
  // [106] collapse all adjacent text nodes in sub-tree
  virtual HRESULT STDMETHODCALLTYPE normalize(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR tagName = 0;
    OLECHECK(this->get_tagName((BSTR*)&tagName));
    return tagName;
  }

  TVariant __fastcall getAttribute(BSTR name/*[in]*/)
  {
    TVariant value;
    OLECHECK(this->getAttribute(name, (TVariant*)&value));
    return value;
  }

  Msxml_tlb::IXMLDOMAttributePtr __fastcall getAttributeNode(BSTR name/*[in]*/)
  {
    Msxml_tlb::IXMLDOMAttributePtr attributeNode;
    OLECHECK(this->getAttributeNode(name, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode));
    return attributeNode;
  }

  Msxml_tlb::IXMLDOMAttributePtr __fastcall setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/)
  {
    Msxml_tlb::IXMLDOMAttributePtr attributeNode;
    OLECHECK(this->setAttributeNode(DOMAttribute, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode));
    return attributeNode;
  }

  Msxml_tlb::IXMLDOMAttributePtr __fastcall removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/)
  {
    Msxml_tlb::IXMLDOMAttributePtr attributeNode;
    OLECHECK(this->removeAttributeNode(DOMAttribute, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode));
    return attributeNode;
  }

  Msxml_tlb::IXMLDOMNodeListPtr __fastcall getElementsByTagName(BSTR tagName/*[in]*/)
  {
    Msxml_tlb::IXMLDOMNodeListPtr resultList;
    OLECHECK(this->getElementsByTagName(tagName, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList));
    return resultList;
  }


  __property   BSTR            tagName = {read = get_tagName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMAttribute  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [118] get name of the attribute
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* attributeName/*[out,retval]*/) = 0;
  // [120] string value of the attribute
  virtual HRESULT STDMETHODCALLTYPE get_value(TVariant* attributeValue/*[out,retval]*/) = 0;
  // [120] string value of the attribute
  virtual HRESULT STDMETHODCALLTYPE set_value(TVariantInParam attributeValue/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR attributeName = 0;
    OLECHECK(this->get_name((BSTR*)&attributeName));
    return attributeName;
  }

  TVariant __fastcall get_value(void)
  {
    TVariant attributeValue;
    OLECHECK(this->get_value((TVariant*)&attributeValue));
    return attributeValue;
  }


  __property   BSTR            name = {read = get_name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXMLDOMDocumentFragment  : public Msxml_tlb::IXMLDOMNode
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMCharacterData  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [109] value of the node
  virtual HRESULT STDMETHODCALLTYPE get_data(BSTR* data/*[out,retval]*/) = 0;
  // [109] value of the node
  virtual HRESULT STDMETHODCALLTYPE set_data(BSTR data/*[in]*/) = 0;
  // [110] number of characters in value
  virtual HRESULT STDMETHODCALLTYPE get_length(long* dataLength/*[out,retval]*/) = 0;
  // [111] retrieve substring of value
  virtual HRESULT STDMETHODCALLTYPE substringData(long offset/*[in]*/, long count/*[in]*/, 
                                                  BSTR* data/*[out,retval]*/) = 0;
  // [112] append string to value
  virtual HRESULT STDMETHODCALLTYPE appendData(BSTR data/*[in]*/) = 0;
  // [113] insert string into value
  virtual HRESULT STDMETHODCALLTYPE insertData(long offset/*[in]*/, BSTR data/*[in]*/) = 0;
  // [114] delete string within the value
  virtual HRESULT STDMETHODCALLTYPE deleteData(long offset/*[in]*/, long count/*[in]*/) = 0;
  // [115] replace string within the value
  virtual HRESULT STDMETHODCALLTYPE replaceData(long offset/*[in]*/, long count/*[in]*/, 
                                                BSTR data/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_data(void)
  {
    BSTR data = 0;
    OLECHECK(this->get_data((BSTR*)&data));
    return data;
  }

  long __fastcall get_length(void)
  {
    long dataLength;
    OLECHECK(this->get_length((long*)&dataLength));
    return dataLength;
  }

  BSTR __fastcall substringData(long offset/*[in]*/, long count/*[in]*/)
  {
    BSTR data = 0;
    OLECHECK(this->substringData(offset, count, (BSTR*)&data));
    return data;
  }


  __property   BSTR            data = {read = get_data, write = set_data};
  __property   long            length = {read = get_length};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMText  : public Msxml_tlb::IXMLDOMCharacterData
{
public:
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_0_0(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_4_1(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_8_2(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_12_3(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_16_4(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_20_5(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_24_6(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_28_7(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_32_8(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_36_9(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_40_10(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_44_11(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_48_12(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_52_13(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_56_14(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_60_15(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_64_16(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_68_17(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_72_18(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_76_19(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_80_20(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_84_21(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_88_22(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_92_23(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_96_24(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_100_25(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_104_26(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_108_27(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_112_28(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_116_29(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_120_30(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_124_31(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_128_32(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_132_33(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_136_34(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_140_35(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_144_36(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_148_37(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_152_38(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_156_39(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_160_40(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_164_41(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_168_42(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_172_43(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_176_44(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_180_45(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_184_46(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_188_47(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_192_48(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_196_49(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GhostMethod_IXMLDOMText_200_50(void) = 0; // [-1]
  // [123] split the text node into two text nodes at the position specified
  virtual HRESULT STDMETHODCALLTYPE splitText(long offset/*[in]*/, 
                                              Msxml_tlb::IXMLDOMTextPtr* rightHandTextNode/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLDOMTextPtr __fastcall splitText(long offset/*[in]*/)
  {
    Msxml_tlb::IXMLDOMTextPtr rightHandTextNode;
    OLECHECK(this->splitText(offset, (Msxml_tlb::IXMLDOMTextPtr*)&rightHandTextNode));
    return rightHandTextNode;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMComment  : public Msxml_tlb::IXMLDOMCharacterData
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMCDATASection  : public Msxml_tlb::IXMLDOMText
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMProcessingInstruction  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [127] the target
  virtual HRESULT STDMETHODCALLTYPE get_target(BSTR* name/*[out,retval]*/) = 0;
  // [128] the data
  virtual HRESULT STDMETHODCALLTYPE get_data(BSTR* value/*[out,retval]*/) = 0;
  // [128] the data
  virtual HRESULT STDMETHODCALLTYPE set_data(BSTR value/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_target(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_target((BSTR*)&name));
    return name;
  }

  BSTR __fastcall get_data(void)
  {
    BSTR value = 0;
    OLECHECK(this->get_data((BSTR*)&value));
    return value;
  }


  __property   BSTR            target = {read = get_target};
  __property   BSTR            data = {read = get_data, write = set_data};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMEntityReference  : public Msxml_tlb::IXMLDOMNode
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXMLDOMParseError  : public IDispatch
{
public:
  // [0] the error code
  virtual HRESULT STDMETHODCALLTYPE get_errorCode(long* errorCode/*[out,retval]*/) = 0;
  // [179] the URL of the XML document containing the error
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* urlString/*[out,retval]*/) = 0;
  // [180] the cause of the error
  virtual HRESULT STDMETHODCALLTYPE get_reason(BSTR* reasonString/*[out,retval]*/) = 0;
  // [181] the data where the error occurred
  virtual HRESULT STDMETHODCALLTYPE get_srcText(BSTR* sourceString/*[out,retval]*/) = 0;
  // [182] the line number in the XML document where the error occurred
  virtual HRESULT STDMETHODCALLTYPE get_line(long* lineNumber/*[out,retval]*/) = 0;
  // [183] the character position in the line containing the error
  virtual HRESULT STDMETHODCALLTYPE get_linepos(long* linePosition/*[out,retval]*/) = 0;
  // [184] the absolute file position in the XML document containing the error
  virtual HRESULT STDMETHODCALLTYPE get_filepos(long* filePosition/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_errorCode(void)
  {
    long errorCode;
    OLECHECK(this->get_errorCode((long*)&errorCode));
    return errorCode;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR urlString = 0;
    OLECHECK(this->get_url((BSTR*)&urlString));
    return urlString;
  }

  BSTR __fastcall get_reason(void)
  {
    BSTR reasonString = 0;
    OLECHECK(this->get_reason((BSTR*)&reasonString));
    return reasonString;
  }

  BSTR __fastcall get_srcText(void)
  {
    BSTR sourceString = 0;
    OLECHECK(this->get_srcText((BSTR*)&sourceString));
    return sourceString;
  }

  long __fastcall get_line(void)
  {
    long lineNumber;
    OLECHECK(this->get_line((long*)&lineNumber));
    return lineNumber;
  }

  long __fastcall get_linepos(void)
  {
    long linePosition;
    OLECHECK(this->get_linepos((long*)&linePosition));
    return linePosition;
  }

  long __fastcall get_filepos(void)
  {
    long filePosition;
    OLECHECK(this->get_filepos((long*)&filePosition));
    return filePosition;
  }


  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            reason = {read = get_reason};
  __property   BSTR            srcText = {read = get_srcText};
  __property   long            line = {read = get_line};
  __property   long            linepos = {read = get_linepos};
  __property   long            filepos = {read = get_filepos};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMNotation  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [136] the public ID
  virtual HRESULT STDMETHODCALLTYPE get_publicId(TVariant* publicId/*[out,retval]*/) = 0;
  // [137] the system ID
  virtual HRESULT STDMETHODCALLTYPE get_systemId(TVariant* systemId/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TVariant __fastcall get_publicId(void)
  {
    TVariant publicId;
    OLECHECK(this->get_publicId((TVariant*)&publicId));
    return publicId;
  }

  TVariant __fastcall get_systemId(void)
  {
    TVariant systemId;
    OLECHECK(this->get_systemId((TVariant*)&systemId));
    return systemId;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
interface IXMLDOMEntity  : public Msxml_tlb::IXMLDOMNode
{
public:
  // [140] the public ID
  virtual HRESULT STDMETHODCALLTYPE get_publicId(TVariant* publicId/*[out,retval]*/) = 0;
  // [141] the system ID
  virtual HRESULT STDMETHODCALLTYPE get_systemId(TVariant* systemId/*[out,retval]*/) = 0;
  // [142] the name of the notation
  virtual HRESULT STDMETHODCALLTYPE get_notationName(BSTR* name/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TVariant __fastcall get_publicId(void)
  {
    TVariant publicId;
    OLECHECK(this->get_publicId((TVariant*)&publicId));
    return publicId;
  }

  TVariant __fastcall get_systemId(void)
  {
    TVariant systemId;
    OLECHECK(this->get_systemId((TVariant*)&systemId));
    return systemId;
  }

  BSTR __fastcall get_notationName(void)
  {
    BSTR name = 0;
    OLECHECK(this->get_notationName((BSTR*)&name));
    return name;
  }


  __property   BSTR            notationName = {read = get_notationName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface IXTLRuntime  : public Msxml_tlb::IXMLDOMNode
{
public:
  virtual HRESULT STDMETHODCALLTYPE uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                             long* pID/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                          long* pDepth/*[out,retval]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                                long* pNumber/*[out,retval]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                        Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                                        long* pNumber/*[out,retval]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                                        long* pNumber/*[out,retval]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                                BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                                 BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE formatDate(TVariantInParam varDate/*[in]*/, 
                                               BSTR bstrFormat/*[in]*/, 
                                               TVariantInParam varDestLocale/*[in,opt]*/, 
                                               BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE formatTime(TVariantInParam varTime/*[in]*/, 
                                               BSTR bstrFormat/*[in]*/, 
                                               TVariantInParam varDestLocale/*[in,opt]*/, 
                                               BSTR* pbstrFormattedString/*[out,retval]*/) = 0; // [195]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
  {
    long pID;
    OLECHECK(this->uniqueID(pNode, (long*)&pID));
    return pID;
  }

  long __fastcall depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
  {
    long pDepth;
    OLECHECK(this->depth(pNode, (long*)&pDepth));
    return pDepth;
  }

  long __fastcall childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->childNumber(pNode, (long*)&pNumber));
    return pNumber;
  }

  long __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->ancestorChildNumber(bstrNodeName, pNode, (long*)&pNumber));
    return pNumber;
  }

  long __fastcall absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
  {
    long pNumber;
    OLECHECK(this->absoluteChildNumber(pNode, (long*)&pNumber));
    return pNumber;
  }

  BSTR __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/)
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatIndex(lIndex, bstrFormat, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/)
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatNumber(dblNumber, bstrFormat, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatDate(TVariantInParam varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                             TVariantInParam varDestLocale/*[in,opt]*/= TNoParam())
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatDate(varDate, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }

  BSTR __fastcall formatTime(TVariantInParam varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                             TVariantInParam varDestLocale/*[in,opt]*/= TNoParam())
  {
    BSTR pbstrFormattedString = 0;
    OLECHECK(this->formatTime(varTime, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString));
    return pbstrFormattedString;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
interface XMLDOMDocumentEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall ondataavailable()
  {
    _TDispID _dispid(/* ondataavailable */ DISPID(198));
    return OleFunction(_dispid);
  }

  HRESULT __fastcall onreadystatechange()
  {
    _TDispID _dispid(/* onreadystatechange */ DISPID(-609));
    return OleFunction(_dispid);
  }


};
// *********************************************************************//
// Interface: IXMLHttpRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
interface IXMLHttpRequest  : public IDispatch
{
public:
  // [1] Open HTTP connection
  virtual HRESULT STDMETHODCALLTYPE open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                         TVariantInParam varAsync/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam bstrUser/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam bstrPassword/*[in,opt]*/= TNoParam()) = 0;
  // [2] Add HTTP request header
  virtual HRESULT STDMETHODCALLTYPE setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/) = 0;
  // [3] Get HTTP response header
  virtual HRESULT STDMETHODCALLTYPE getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                                      BSTR* pbstrValue/*[out,retval]*/) = 0;
  // [4] Get all HTTP response headers
  virtual HRESULT STDMETHODCALLTYPE getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/) = 0;
  // [5] Send HTTP request
  virtual HRESULT STDMETHODCALLTYPE send(TVariantInParam varBody/*[in,opt]*/= TNoParam()) = 0;
  // [6] Abort HTTP request
  virtual HRESULT STDMETHODCALLTYPE abort(void) = 0;
  // [7] Get HTTP status code
  virtual HRESULT STDMETHODCALLTYPE get_status(long* plStatus/*[out,retval]*/) = 0;
  // [8] Get HTTP status text
  virtual HRESULT STDMETHODCALLTYPE get_statusText(BSTR* pbstrStatus/*[out,retval]*/) = 0;
  // [9] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/) = 0;
  // [10] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseText(BSTR* pbstrBody/*[out,retval]*/) = 0;
  // [11] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseBody(TVariant* pvarBody/*[out,retval]*/) = 0;
  // [12] Get response body
  virtual HRESULT STDMETHODCALLTYPE get_responseStream(TVariant* pvarBody/*[out,retval]*/) = 0;
  // [13] Get ready state
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* plState/*[out,retval]*/) = 0;
  // [14] Register a complete event handler
  virtual HRESULT STDMETHODCALLTYPE set_onreadystatechange(LPDISPATCH Param1/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/)
  {
    BSTR pbstrValue = 0;
    OLECHECK(this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue));
    return pbstrValue;
  }

  BSTR __fastcall getAllResponseHeaders(void)
  {
    BSTR pbstrHeaders = 0;
    OLECHECK(this->getAllResponseHeaders((BSTR*)&pbstrHeaders));
    return pbstrHeaders;
  }

  long __fastcall get_status(void)
  {
    long plStatus;
    OLECHECK(this->get_status((long*)&plStatus));
    return plStatus;
  }

  BSTR __fastcall get_statusText(void)
  {
    BSTR pbstrStatus = 0;
    OLECHECK(this->get_statusText((BSTR*)&pbstrStatus));
    return pbstrStatus;
  }

  LPDISPATCH __fastcall get_responseXML(void)
  {
    LPDISPATCH ppBody;
    OLECHECK(this->get_responseXML((LPDISPATCH*)&ppBody));
    return ppBody;
  }

  BSTR __fastcall get_responseText(void)
  {
    BSTR pbstrBody = 0;
    OLECHECK(this->get_responseText((BSTR*)&pbstrBody));
    return pbstrBody;
  }

  TVariant __fastcall get_responseBody(void)
  {
    TVariant pvarBody;
    OLECHECK(this->get_responseBody((TVariant*)&pvarBody));
    return pvarBody;
  }

  TVariant __fastcall get_responseStream(void)
  {
    TVariant pvarBody;
    OLECHECK(this->get_responseStream((TVariant*)&pvarBody));
    return pvarBody;
  }

  long __fastcall get_readyState(void)
  {
    long plState;
    OLECHECK(this->get_readyState((long*)&plState));
    return plState;
  }


  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
interface IXMLDSOControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE set_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr ppDoc/*[in]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/) = 0; // [65538]
  virtual HRESULT STDMETHODCALLTYPE set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/) = 0; // [65538]
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* state/*[out,retval]*/) = 0; // [-525]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_XMLDocument(void)
  {
    Msxml_tlb::IXMLDOMDocumentPtr ppDoc;
    OLECHECK(this->get_XMLDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&ppDoc));
    return ppDoc;
  }

  long __fastcall get_JavaDSOCompatible(void)
  {
    long fJavaDSOCompatible;
    OLECHECK(this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible));
    return fJavaDSOCompatible;
  }

  long __fastcall get_readyState(void)
  {
    long state;
    OLECHECK(this->get_readyState((long*)&state));
    return state;
  }


  __property   Msxml_tlb::IXMLDOMDocumentPtr XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
interface IXMLElementCollection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE set_length(long p/*[in]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get_length(long* p/*[out,retval]*/) = 0; // [65537]
  virtual HRESULT STDMETHODCALLTYPE get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]
  // [65539] get current item, or (optional) by index and name.
  virtual HRESULT STDMETHODCALLTYPE item(TVariantInParam var1/*[in,opt]*/, 
                                         TVariantInParam var2/*[in,opt]*/, 
                                         LPDISPATCH* ppDisp/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_length(void)
  {
    long p;
    OLECHECK(this->get_length((long*)&p));
    return p;
  }

  LPUNKNOWN __fastcall get__newEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->get__newEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }

  LPDISPATCH __fastcall item(TVariantInParam var1/*[in,opt]*/= TNoParam(), 
                             TVariantInParam var2/*[in,opt]*/= TNoParam())
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->item(var1, var2, (LPDISPATCH*)&ppDisp));
    return ppDisp;
  }


  __property   long            length = {read = get_length, write = set_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
interface IXMLDocument  : public IDispatch
{
public:
  // [65637] get root IXMLElement of the XML document.
  virtual HRESULT STDMETHODCALLTYPE get_root(Msxml_tlb::IXMLElementPtr* p/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_fileSize(BSTR* p/*[out,retval]*/) = 0; // [65638]
  virtual HRESULT STDMETHODCALLTYPE get_fileModifiedDate(BSTR* p/*[out,retval]*/) = 0; // [65639]
  virtual HRESULT STDMETHODCALLTYPE get_fileUpdatedDate(BSTR* p/*[out,retval]*/) = 0; // [65640]
  // [65641] set URL to load an XML document from the URL.
  virtual HRESULT STDMETHODCALLTYPE get_url(BSTR* p/*[out,retval]*/) = 0;
  // [65641] set URL to load an XML document from the URL.
  virtual HRESULT STDMETHODCALLTYPE set_url(BSTR p/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_mimeType(BSTR* p/*[out,retval]*/) = 0; // [65642]
  // [65643] get ready state.
  virtual HRESULT STDMETHODCALLTYPE get_readyState(long* pl/*[out,retval]*/) = 0;
  // [65645] get encoding.
  virtual HRESULT STDMETHODCALLTYPE get_charset(BSTR* p/*[out,retval]*/) = 0;
  // [65645] get encoding.
  virtual HRESULT STDMETHODCALLTYPE set_charset(BSTR p/*[in]*/) = 0;
  // [65646] get XML version number.
  virtual HRESULT STDMETHODCALLTYPE get_version(BSTR* p/*[out,retval]*/) = 0;
  // [65647] get document type.
  virtual HRESULT STDMETHODCALLTYPE get_doctype(BSTR* p/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_dtdURL(BSTR* p/*[out,retval]*/) = 0; // [65648]
  // [65644] create different types of IXMLElements.
  virtual HRESULT STDMETHODCALLTYPE createElement(TVariantInParam vType/*[in]*/, 
                                                  TVariantInParam var1/*[in,opt]*/, 
                                                  Msxml_tlb::IXMLElementPtr* ppElem/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Msxml_tlb::IXMLElementPtr __fastcall get_root(void)
  {
    Msxml_tlb::IXMLElementPtr p;
    OLECHECK(this->get_root((Msxml_tlb::IXMLElementPtr*)&p));
    return p;
  }

  BSTR __fastcall get_fileSize(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileSize((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_fileModifiedDate(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileModifiedDate((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_fileUpdatedDate(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_fileUpdatedDate((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_url(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_url((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_mimeType(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_mimeType((BSTR*)&p));
    return p;
  }

  long __fastcall get_readyState(void)
  {
    long pl;
    OLECHECK(this->get_readyState((long*)&pl));
    return pl;
  }

  BSTR __fastcall get_charset(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_charset((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_version(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_version((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_doctype(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_doctype((BSTR*)&p));
    return p;
  }

  BSTR __fastcall get_dtdURL(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_dtdURL((BSTR*)&p));
    return p;
  }

  Msxml_tlb::IXMLElementPtr __fastcall createElement(TVariantInParam vType/*[in]*/, 
                                                     TVariantInParam var1/*[in,opt]*/= TNoParam())
  {
    Msxml_tlb::IXMLElementPtr ppElem;
    OLECHECK(this->createElement(vType, var1, (Msxml_tlb::IXMLElementPtr*)&ppElem));
    return ppElem;
  }


  __property   Msxml_tlb::IXMLElementPtr root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url, write = set_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset, write = set_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
interface IXMLElement  : public IDispatch
{
public:
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* p/*[out,retval]*/) = 0;
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE set_tagName(BSTR p/*[in]*/) = 0;
  // [65738] get parent IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_parent(Msxml_tlb::IXMLElementPtr* ppParent/*[out,retval]*/) = 0;
  // [65739] set attribute.
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR strPropertyName/*[in]*/, 
                                                 TVariantInParam PropertyValue/*[in]*/) = 0;
  // [65740] get attribute.
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR strPropertyName/*[in]*/, 
                                                 TVariant* PropertyValue/*[out,retval]*/) = 0;
  // [65741] remove attribute.
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR strPropertyName/*[in]*/) = 0;
  // [65742] get a IXMLElementCollection of children.
  virtual HRESULT STDMETHODCALLTYPE get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/) = 0;
  // [65743] get type of this IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_type(long* plType/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* p/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR p/*[in]*/) = 0;
  // [65745] add a child.
  virtual HRESULT STDMETHODCALLTYPE addChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/, 
                                             long lIndex, long lReserved) = 0;
  // [65746] remove a child.
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_tagName((BSTR*)&p));
    return p;
  }

  Msxml_tlb::IXMLElementPtr __fastcall get_parent(void)
  {
    Msxml_tlb::IXMLElementPtr ppParent;
    OLECHECK(this->get_parent((Msxml_tlb::IXMLElementPtr*)&ppParent));
    return ppParent;
  }

  TVariant __fastcall getAttribute(BSTR strPropertyName/*[in]*/)
  {
    TVariant PropertyValue;
    OLECHECK(this->getAttribute(strPropertyName, (TVariant*)&PropertyValue));
    return PropertyValue;
  }

  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_children(void)
  {
    Msxml_tlb::IXMLElementCollectionPtr pp;
    OLECHECK(this->get_children((Msxml_tlb::IXMLElementCollectionPtr*)&pp));
    return pp;
  }

  long __fastcall get_type(void)
  {
    long plType;
    OLECHECK(this->get_type((long*)&plType));
    return plType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_text((BSTR*)&p));
    return p;
  }


  __property   BSTR            tagName = {read = get_tagName, write = set_tagName};
  __property   Msxml_tlb::IXMLElementPtr parent = {read = get_parent};
  __property   Msxml_tlb::IXMLElementCollectionPtr children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text, write = set_text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLDocument2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
interface IXMLDocument2  : public IDispatch
{
public:
  // [65637] get root IXMLElement of the XML document.
   HRESULT STDMETHODCALLTYPE get_root(Msxml_tlb::IXMLElement2Ptr* p/*[out,retval]*/);
   HRESULT STDMETHODCALLTYPE get_fileSize(BSTR* p/*[out,retval]*/); // [65638]
   HRESULT STDMETHODCALLTYPE get_fileModifiedDate(BSTR* p/*[out,retval]*/); // [65639]
   HRESULT STDMETHODCALLTYPE get_fileUpdatedDate(BSTR* p/*[out,retval]*/); // [65640]
  // [65641] set URL to load an XML document from the URL.
   HRESULT STDMETHODCALLTYPE get_url(BSTR* p/*[out,retval]*/);
  // [65641] set URL to load an XML document from the URL.
   HRESULT STDMETHODCALLTYPE set_url(BSTR p/*[in]*/);
   HRESULT STDMETHODCALLTYPE get_mimeType(BSTR* p/*[out,retval]*/); // [65642]
  // [65643] get ready state.
   HRESULT STDMETHODCALLTYPE get_readyState(long* pl/*[out,retval]*/);
  // [65645] get encoding.
   HRESULT STDMETHODCALLTYPE get_charset(BSTR* p/*[out,retval]*/);
  // [65645] get encoding.
   HRESULT STDMETHODCALLTYPE set_charset(BSTR p/*[in]*/);
  // [65646] get XML version number.
   HRESULT STDMETHODCALLTYPE get_version(BSTR* p/*[out,retval]*/);
  // [65647] get document type.
   HRESULT STDMETHODCALLTYPE get_doctype(BSTR* p/*[out,retval]*/);
   HRESULT STDMETHODCALLTYPE get_dtdURL(BSTR* p/*[out,retval]*/); // [65648]
  // [65644] create different types of IXMLElements.
   HRESULT STDMETHODCALLTYPE createElement(TVariantInParam vType/*[in]*/, 
                                           TVariantInParam var1/*[in,opt]*/, 
                                           Msxml_tlb::IXMLElement2Ptr* ppElem/*[out,retval]*/);
  // [65649] get asynchronous loading flag.
   HRESULT STDMETHODCALLTYPE get_async(TOLEBOOL* pf/*[out,retval]*/);
  // [65649] get asynchronous loading flag.
   HRESULT STDMETHODCALLTYPE set_async(TOLEBOOL pf/*[in]*/);
};

// *********************************************************************//
// Interface: IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
interface IXMLElement2  : public IDispatch
{
public:
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE get_tagName(BSTR* p/*[out,retval]*/) = 0;
  // [65737] get tag name.
  virtual HRESULT STDMETHODCALLTYPE set_tagName(BSTR p/*[in]*/) = 0;
  // [65738] get parent IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_parent(Msxml_tlb::IXMLElement2Ptr* ppParent/*[out,retval]*/) = 0;
  // [65739] set attribute.
  virtual HRESULT STDMETHODCALLTYPE setAttribute(BSTR strPropertyName/*[in]*/, 
                                                 TVariantInParam PropertyValue/*[in]*/) = 0;
  // [65740] get attribute.
  virtual HRESULT STDMETHODCALLTYPE getAttribute(BSTR strPropertyName/*[in]*/, 
                                                 TVariant* PropertyValue/*[out,retval]*/) = 0;
  // [65741] remove attribute.
  virtual HRESULT STDMETHODCALLTYPE removeAttribute(BSTR strPropertyName/*[in]*/) = 0;
  // [65742] get a IXMLElementCollection of all children.
  virtual HRESULT STDMETHODCALLTYPE get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/) = 0;
  // [65743] get type of this IXMLElement.
  virtual HRESULT STDMETHODCALLTYPE get_type(long* plType/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE get_text(BSTR* p/*[out,retval]*/) = 0;
  // [65744] get text.
  virtual HRESULT STDMETHODCALLTYPE set_text(BSTR p/*[in]*/) = 0;
  // [65745] add a child.
  virtual HRESULT STDMETHODCALLTYPE addChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/, 
                                             long lIndex, long lReserved) = 0;
  // [65746] remove a child.
  virtual HRESULT STDMETHODCALLTYPE removeChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/) = 0;
  // [65747] get a IXMLElementCollection of all attributes.
  virtual HRESULT STDMETHODCALLTYPE get_attributes(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_tagName(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_tagName((BSTR*)&p));
    return p;
  }

  Msxml_tlb::IXMLElement2Ptr __fastcall get_parent(void)
  {
    Msxml_tlb::IXMLElement2Ptr ppParent;
    OLECHECK(this->get_parent((Msxml_tlb::IXMLElement2Ptr*)&ppParent));
    return ppParent;
  }

  TVariant __fastcall getAttribute(BSTR strPropertyName/*[in]*/)
  {
    TVariant PropertyValue;
    OLECHECK(this->getAttribute(strPropertyName, (TVariant*)&PropertyValue));
    return PropertyValue;
  }

  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_children(void)
  {
    Msxml_tlb::IXMLElementCollectionPtr pp;
    OLECHECK(this->get_children((Msxml_tlb::IXMLElementCollectionPtr*)&pp));
    return pp;
  }

  long __fastcall get_type(void)
  {
    long plType;
    OLECHECK(this->get_type((long*)&plType));
    return plType;
  }

  BSTR __fastcall get_text(void)
  {
    BSTR p = 0;
    OLECHECK(this->get_text((BSTR*)&p));
    return p;
  }

  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_attributes(void)
  {
    Msxml_tlb::IXMLElementCollectionPtr pp;
    OLECHECK(this->get_attributes((Msxml_tlb::IXMLElementCollectionPtr*)&pp));
    return pp;
  }


  __property   BSTR            tagName = {read = get_tagName, write = set_tagName};
  __property   Msxml_tlb::IXMLElement2Ptr parent = {read = get_parent};
  __property   Msxml_tlb::IXMLElementCollectionPtr children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   Msxml_tlb::IXMLElementCollectionPtr attributes = {read = get_attributes};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
interface IXMLAttribute  : public IDispatch
{
public:
  // [65937] get attribute name.
  virtual HRESULT STDMETHODCALLTYPE get_name(BSTR* n/*[out,retval]*/) = 0;
  // [65938] get attribute value.
  virtual HRESULT STDMETHODCALLTYPE get_value(BSTR* v/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_name(void)
  {
    BSTR n = 0;
    OLECHECK(this->get_name((BSTR*)&n));
    return n;
  }

  BSTR __fastcall get_value(void)
  {
    BSTR v = 0;
    OLECHECK(this->get_value((BSTR*)&v));
    return v;
  }


  __property   BSTR            name = {read = get_name};
  __property   BSTR            value = {read = get_value};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IXMLError
// Flags:     (16) Hidden
// GUID:      {948C5AD3-C58D-11D0-9C0B-00C04FC99C8E}
// *********************************************************************//
interface IXMLError  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetErrorInfo(Msxml_tlb::_xml_error* pErrorReturn) = 0; // [-1]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IXMLDOMImplementation>  TCOMIXMLDOMImplementation;

// *********************************************************************//
// DispIntf:  IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMImplementationDispT : public TAutoDriver<IXMLDOMImplementation>
{
public:
  IXMLDOMImplementationDispT(){}

  IXMLDOMImplementationDispT(IXMLDOMImplementation *pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, false);
  }

  IXMLDOMImplementationDispT(IXMLDOMImplementationPtr pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, true);
  }

  IXMLDOMImplementationDispT& operator=(IXMLDOMImplementation *pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMImplementationDispT& operator=(IXMLDOMImplementationPtr pintf)
  {
    TAutoDriver<IXMLDOMImplementation>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                        TOLEBOOL* hasFeature/*[out,retval]*/);
  TOLEBOOL        __fastcall hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/);

};
typedef IXMLDOMImplementationDispT<IXMLDOMImplementation> IXMLDOMImplementationDisp;

typedef TComInterface<IXMLDOMNode>  TCOMIXMLDOMNode;

// *********************************************************************//
// DispIntf:  IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNodeDispT : public TAutoDriver<IXMLDOMNode>
{
public:
  IXMLDOMNodeDispT(){}

  IXMLDOMNodeDispT(IXMLDOMNode *pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, false);
  }

  IXMLDOMNodeDispT(IXMLDOMNodePtr pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, true);
  }

  IXMLDOMNodeDispT& operator=(IXMLDOMNode *pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNodeDispT& operator=(IXMLDOMNodePtr pintf)
  {
    TAutoDriver<IXMLDOMNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMNodeDispT<IXMLDOMNode> IXMLDOMNodeDisp;

typedef TComInterface<IXMLDOMNodeList>  TCOMIXMLDOMNodeList;

// *********************************************************************//
// DispIntf:  IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNodeListDispT : public TAutoDriver<IXMLDOMNodeList>
{
public:
  IXMLDOMNodeListDispT(){}

  IXMLDOMNodeListDispT(IXMLDOMNodeList *pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, false);
  }

  IXMLDOMNodeListDispT(IXMLDOMNodeListPtr pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, true);
  }

  IXMLDOMNodeListDispT& operator=(IXMLDOMNodeList *pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNodeListDispT& operator=(IXMLDOMNodeListPtr pintf)
  {
    TAutoDriver<IXMLDOMNodeList>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_item(long index/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_item(long index/*[in]*/);
  HRESULT         __fastcall get_length(long* listLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall nextNode(void);
  HRESULT         __fastcall reset();
  HRESULT         __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMNodeListDispT<IXMLDOMNodeList> IXMLDOMNodeListDisp;

typedef TComInterface<IXMLDOMNamedNodeMap>  TCOMIXMLDOMNamedNodeMap;

// *********************************************************************//
// DispIntf:  IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNamedNodeMapDispT : public TAutoDriver<IXMLDOMNamedNodeMap>
{
public:
  IXMLDOMNamedNodeMapDispT(){}

  IXMLDOMNamedNodeMapDispT(IXMLDOMNamedNodeMap *pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, false);
  }

  IXMLDOMNamedNodeMapDispT(IXMLDOMNamedNodeMapPtr pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, true);
  }

  IXMLDOMNamedNodeMapDispT& operator=(IXMLDOMNamedNodeMap *pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNamedNodeMapDispT& operator=(IXMLDOMNamedNodeMapPtr pintf)
  {
    TAutoDriver<IXMLDOMNamedNodeMap>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall getNamedItem(BSTR name/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall getNamedItem(BSTR name/*[in]*/);
  HRESULT         __fastcall setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* nameItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/);
  HRESULT         __fastcall removeNamedItem(BSTR name/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeNamedItem(BSTR name/*[in]*/);
  HRESULT         __fastcall get_item(long index/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_item(long index/*[in]*/);
  HRESULT         __fastcall get_length(long* listLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall getQualifiedItem(BSTR baseName/*[in]*/, 
                                                        BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeQualifiedItem(BSTR baseName/*[in]*/, 
                                                           BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall nextNode(void);
  HRESULT         __fastcall reset();
  HRESULT         __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);

  __property   long            length = {read = get_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLDOMNamedNodeMapDispT<IXMLDOMNamedNodeMap> IXMLDOMNamedNodeMapDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMDocument
// Interface: IXMLDOMDocument
// *********************************************************************//
template <class T /* IXMLDOMDocument */ >
class TCOMIXMLDOMDocumentT : public TComInterface<IXMLDOMDocument>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLDOMDocumentT() {}
  TCOMIXMLDOMDocumentT(IXMLDOMDocument *intf, bool addRef = false) : TComInterface<IXMLDOMDocument>(intf, addRef) {}
  TCOMIXMLDOMDocumentT(const TCOMIXMLDOMDocumentT& src) : TComInterface<IXMLDOMDocument>(src) {}
  TCOMIXMLDOMDocumentT& operator=(const TCOMIXMLDOMDocumentT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_doctype(Msxml_tlb::IXMLDOMDocumentTypePtr* documentType/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentTypePtr __fastcall get_doctype(void);
  HRESULT         __fastcall get_implementation(Msxml_tlb::IXMLDOMImplementationPtr* impl/*[out,retval]*/);
  Msxml_tlb::IXMLDOMImplementationPtr __fastcall get_implementation(void);
  HRESULT         __fastcall get_documentElement(Msxml_tlb::IXMLDOMElementPtr* DOMElement/*[out,retval]*/);
  Msxml_tlb::IXMLDOMElementPtr __fastcall get_documentElement(void);
  HRESULT         __fastcall _set_documentElement(Msxml_tlb::IXMLDOMElementPtr DOMElement/*[in]*/);
  HRESULT         __fastcall createElement(BSTR tagName/*[in]*/, 
                                           Msxml_tlb::IXMLDOMElementPtr* element/*[out,retval]*/);
  Msxml_tlb::IXMLDOMElementPtr __fastcall createElement(BSTR tagName/*[in]*/);
  HRESULT         __fastcall createDocumentFragment(Msxml_tlb::IXMLDOMDocumentFragmentPtr* docFrag/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentFragmentPtr __fastcall createDocumentFragment(void);
  HRESULT         __fastcall createTextNode(BSTR data/*[in]*/, 
                                            Msxml_tlb::IXMLDOMTextPtr* text/*[out,retval]*/);
  Msxml_tlb::IXMLDOMTextPtr __fastcall createTextNode(BSTR data/*[in]*/);
  HRESULT         __fastcall createComment(BSTR data/*[in]*/, 
                                           Msxml_tlb::IXMLDOMCommentPtr* comment/*[out,retval]*/);
  Msxml_tlb::IXMLDOMCommentPtr __fastcall createComment(BSTR data/*[in]*/);
  HRESULT         __fastcall createCDATASection(BSTR data/*[in]*/, 
                                                Msxml_tlb::IXMLDOMCDATASectionPtr* cdata/*[out,retval]*/);
  Msxml_tlb::IXMLDOMCDATASectionPtr __fastcall createCDATASection(BSTR data/*[in]*/);
  HRESULT         __fastcall createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                         Msxml_tlb::IXMLDOMProcessingInstructionPtr* pi/*[out,retval]*/);
  Msxml_tlb::IXMLDOMProcessingInstructionPtr __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                                    BSTR data/*[in]*/);
  HRESULT         __fastcall createAttribute(BSTR name/*[in]*/, 
                                             Msxml_tlb::IXMLDOMAttributePtr* attribute/*[out,retval]*/);
  Msxml_tlb::IXMLDOMAttributePtr __fastcall createAttribute(BSTR name/*[in]*/);
  HRESULT         __fastcall createEntityReference(BSTR name/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMEntityReferencePtr* entityRef/*[out,retval]*/);
  Msxml_tlb::IXMLDOMEntityReferencePtr __fastcall createEntityReference(BSTR name/*[in]*/);
  HRESULT         __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT         __fastcall createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                        BSTR namespaceURI/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                                  BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall nodeFromID(BSTR idString/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall nodeFromID(BSTR idString/*[in]*/);
  HRESULT         __fastcall load(TVariantInParam xmlSource/*[in]*/, 
                                  TOLEBOOL* isSuccessful/*[out,retval]*/);
  TOLEBOOL        __fastcall load(TVariantInParam xmlSource/*[in]*/);
  HRESULT         __fastcall get_readyState(long* value/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall get_parseError(Msxml_tlb::IXMLDOMParseErrorPtr* errorObj/*[out,retval]*/);
  Msxml_tlb::IXMLDOMParseErrorPtr __fastcall get_parseError(void);
  HRESULT         __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall get_async(TOLEBOOL* isAsync/*[out,retval]*/);
  TOLEBOOL        __fastcall get_async(void);
  HRESULT         __fastcall set_async(TOLEBOOL isAsync/*[in]*/);
  HRESULT         __fastcall abort(void);
  HRESULT         __fastcall loadXML(BSTR bstrXML/*[in]*/, TOLEBOOL* isSuccessful/*[out,retval]*/);
  TOLEBOOL        __fastcall loadXML(BSTR bstrXML/*[in]*/);
  HRESULT         __fastcall save(TVariantInParam desination/*[in]*/);
  HRESULT         __fastcall get_validateOnParse(TOLEBOOL* isValidating/*[out,retval]*/);
  TOLEBOOL        __fastcall get_validateOnParse(void);
  HRESULT         __fastcall set_validateOnParse(TOLEBOOL isValidating/*[in]*/);
  HRESULT         __fastcall get_resolveExternals(TOLEBOOL* isResolving/*[out,retval]*/);
  TOLEBOOL        __fastcall get_resolveExternals(void);
  HRESULT         __fastcall set_resolveExternals(TOLEBOOL isResolving/*[in]*/);
  HRESULT         __fastcall get_preserveWhiteSpace(TOLEBOOL* isPreserving/*[out,retval]*/);
  TOLEBOOL        __fastcall get_preserveWhiteSpace(void);
  HRESULT         __fastcall set_preserveWhiteSpace(TOLEBOOL isPreserving/*[in]*/);
  HRESULT         __fastcall set_onreadystatechange(TVariantInParam Param1/*[in]*/);
  HRESULT         __fastcall set_ondataavailable(TVariantInParam Param1/*[in]*/);
  HRESULT         __fastcall set_ontransformnode(TVariantInParam Param1/*[in]*/);

  __property   Msxml_tlb::IXMLDOMDocumentTypePtr doctype = {read = get_doctype};
  __property   Msxml_tlb::IXMLDOMImplementationPtr implementation = {read = get_implementation};
  __property   Msxml_tlb::IXMLDOMElementPtr documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml_tlb::IXMLDOMParseErrorPtr parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   TOLEBOOL        async = {read = get_async, write = set_async};
  __property   TOLEBOOL        validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   TOLEBOOL        resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   TOLEBOOL        preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};
};
typedef TCOMIXMLDOMDocumentT<IXMLDOMDocument> TCOMIXMLDOMDocument;

// *********************************************************************//
// DispIntf:  IXMLDOMDocument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentDispT : public TAutoDriver<IXMLDOMDocument>
{
public:
  IXMLDOMDocumentDispT(){}

  IXMLDOMDocumentDispT(IXMLDOMDocument *pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, false);
  }

  IXMLDOMDocumentDispT(IXMLDOMDocumentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, true);
  }

  IXMLDOMDocumentDispT& operator=(IXMLDOMDocument *pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentDispT& operator=(IXMLDOMDocumentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocument>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DOMDocument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DOMDocument);
  }

  HRESULT         __fastcall get_doctype(Msxml_tlb::IXMLDOMDocumentTypePtr* documentType/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentTypePtr __fastcall get_doctype(void);
  HRESULT         __fastcall get_implementation(Msxml_tlb::IXMLDOMImplementationPtr* impl/*[out,retval]*/);
  Msxml_tlb::IXMLDOMImplementationPtr __fastcall get_implementation(void);
  HRESULT         __fastcall get_documentElement(Msxml_tlb::IXMLDOMElementPtr* DOMElement/*[out,retval]*/);
  Msxml_tlb::IXMLDOMElementPtr __fastcall get_documentElement(void);
  HRESULT         __fastcall _set_documentElement(Msxml_tlb::IXMLDOMElementPtr DOMElement/*[in]*/);
  HRESULT         __fastcall createElement(BSTR tagName/*[in]*/, 
                                           Msxml_tlb::IXMLDOMElementPtr* element/*[out,retval]*/);
  Msxml_tlb::IXMLDOMElementPtr __fastcall createElement(BSTR tagName/*[in]*/);
  HRESULT         __fastcall createDocumentFragment(Msxml_tlb::IXMLDOMDocumentFragmentPtr* docFrag/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentFragmentPtr __fastcall createDocumentFragment(void);
  HRESULT         __fastcall createTextNode(BSTR data/*[in]*/, 
                                            Msxml_tlb::IXMLDOMTextPtr* text/*[out,retval]*/);
  Msxml_tlb::IXMLDOMTextPtr __fastcall createTextNode(BSTR data/*[in]*/);
  HRESULT         __fastcall createComment(BSTR data/*[in]*/, 
                                           Msxml_tlb::IXMLDOMCommentPtr* comment/*[out,retval]*/);
  Msxml_tlb::IXMLDOMCommentPtr __fastcall createComment(BSTR data/*[in]*/);
  HRESULT         __fastcall createCDATASection(BSTR data/*[in]*/, 
                                                Msxml_tlb::IXMLDOMCDATASectionPtr* cdata/*[out,retval]*/);
  Msxml_tlb::IXMLDOMCDATASectionPtr __fastcall createCDATASection(BSTR data/*[in]*/);
  HRESULT         __fastcall createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                         Msxml_tlb::IXMLDOMProcessingInstructionPtr* pi/*[out,retval]*/);
  Msxml_tlb::IXMLDOMProcessingInstructionPtr __fastcall createProcessingInstruction(BSTR target/*[in]*/, 
                                                                                    BSTR data/*[in]*/);
  HRESULT         __fastcall createAttribute(BSTR name/*[in]*/, 
                                             Msxml_tlb::IXMLDOMAttributePtr* attribute/*[out,retval]*/);
  Msxml_tlb::IXMLDOMAttributePtr __fastcall createAttribute(BSTR name/*[in]*/);
  HRESULT         __fastcall createEntityReference(BSTR name/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMEntityReferencePtr* entityRef/*[out,retval]*/);
  Msxml_tlb::IXMLDOMEntityReferencePtr __fastcall createEntityReference(BSTR name/*[in]*/);
  HRESULT         __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT         __fastcall createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                        BSTR namespaceURI/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                                  BSTR namespaceURI/*[in]*/);
  HRESULT         __fastcall nodeFromID(BSTR idString/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall nodeFromID(BSTR idString/*[in]*/);
  HRESULT         __fastcall load(TVariantInParam xmlSource/*[in]*/, 
                                  TOLEBOOL* isSuccessful/*[out,retval]*/);
  TOLEBOOL        __fastcall load(TVariantInParam xmlSource/*[in]*/);
  HRESULT         __fastcall get_readyState(long* value/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall get_parseError(Msxml_tlb::IXMLDOMParseErrorPtr* errorObj/*[out,retval]*/);
  Msxml_tlb::IXMLDOMParseErrorPtr __fastcall get_parseError(void);
  HRESULT         __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall get_async(TOLEBOOL* isAsync/*[out,retval]*/);
  TOLEBOOL        __fastcall get_async(void);
  HRESULT         __fastcall set_async(TOLEBOOL isAsync/*[in]*/);
  HRESULT         __fastcall abort();
  HRESULT         __fastcall loadXML(BSTR bstrXML/*[in]*/, TOLEBOOL* isSuccessful/*[out,retval]*/);
  TOLEBOOL        __fastcall loadXML(BSTR bstrXML/*[in]*/);
  HRESULT         __fastcall save(TVariantInParam desination/*[in]*/);
  HRESULT         __fastcall get_validateOnParse(TOLEBOOL* isValidating/*[out,retval]*/);
  TOLEBOOL        __fastcall get_validateOnParse(void);
  HRESULT         __fastcall set_validateOnParse(TOLEBOOL isValidating/*[in]*/);
  HRESULT         __fastcall get_resolveExternals(TOLEBOOL* isResolving/*[out,retval]*/);
  TOLEBOOL        __fastcall get_resolveExternals(void);
  HRESULT         __fastcall set_resolveExternals(TOLEBOOL isResolving/*[in]*/);
  HRESULT         __fastcall get_preserveWhiteSpace(TOLEBOOL* isPreserving/*[out,retval]*/);
  TOLEBOOL        __fastcall get_preserveWhiteSpace(void);
  HRESULT         __fastcall set_preserveWhiteSpace(TOLEBOOL isPreserving/*[in]*/);
  HRESULT         __fastcall set_onreadystatechange(TVariantInParam Param1/*[in]*/);
  HRESULT         __fastcall set_ondataavailable(TVariantInParam Param1/*[in]*/);
  HRESULT         __fastcall set_ontransformnode(TVariantInParam Param1/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   Msxml_tlb::IXMLDOMDocumentTypePtr doctype = {read = get_doctype};
  __property   Msxml_tlb::IXMLDOMImplementationPtr implementation = {read = get_implementation};
  __property   Msxml_tlb::IXMLDOMElementPtr documentElement = {read = get_documentElement, write = _set_documentElement};
  __property   long            readyState = {read = get_readyState};
  __property   Msxml_tlb::IXMLDOMParseErrorPtr parseError = {read = get_parseError};
  __property   BSTR            url = {read = get_url};
  __property   TOLEBOOL        async = {read = get_async, write = set_async};
  __property   TOLEBOOL        validateOnParse = {read = get_validateOnParse, write = set_validateOnParse};
  __property   TOLEBOOL        resolveExternals = {read = get_resolveExternals, write = set_resolveExternals};
  __property   TOLEBOOL        preserveWhiteSpace = {read = get_preserveWhiteSpace, write = set_preserveWhiteSpace};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentDispT<IXMLDOMDocument> IXMLDOMDocumentDisp;

typedef TComInterface<IXMLDOMDocumentType>  TCOMIXMLDOMDocumentType;

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentTypeDispT : public TAutoDriver<IXMLDOMDocumentType>
{
public:
  IXMLDOMDocumentTypeDispT(){}

  IXMLDOMDocumentTypeDispT(IXMLDOMDocumentType *pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, false);
  }

  IXMLDOMDocumentTypeDispT(IXMLDOMDocumentTypePtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, true);
  }

  IXMLDOMDocumentTypeDispT& operator=(IXMLDOMDocumentType *pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentTypeDispT& operator=(IXMLDOMDocumentTypePtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentType>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_name(BSTR* rootName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall get_entities(Msxml_tlb::IXMLDOMNamedNodeMapPtr* entityMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_entities(void);
  HRESULT         __fastcall get_notations(Msxml_tlb::IXMLDOMNamedNodeMapPtr* notationMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_notations(void);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            name = {read = get_name};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr entities = {read = get_entities};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr notations = {read = get_notations};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentTypeDispT<IXMLDOMDocumentType> IXMLDOMDocumentTypeDisp;

typedef TComInterface<IXMLDOMElement>  TCOMIXMLDOMElement;

// *********************************************************************//
// DispIntf:  IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMElementDispT : public TAutoDriver<IXMLDOMElement>
{
public:
  IXMLDOMElementDispT(){}

  IXMLDOMElementDispT(IXMLDOMElement *pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, false);
  }

  IXMLDOMElementDispT(IXMLDOMElementPtr pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, true);
  }

  IXMLDOMElementDispT& operator=(IXMLDOMElement *pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMElementDispT& operator=(IXMLDOMElementPtr pintf)
  {
    TAutoDriver<IXMLDOMElement>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_tagName(BSTR* tagName/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT         __fastcall getAttribute(BSTR name/*[in]*/, TVariant* value/*[out,retval]*/);
  TVariant        __fastcall getAttribute(BSTR name/*[in]*/);
  HRESULT         __fastcall setAttribute(BSTR name/*[in]*/, TVariantInParam value/*[in]*/);
  HRESULT         __fastcall removeAttribute(BSTR name/*[in]*/);
  HRESULT         __fastcall getAttributeNode(BSTR name/*[in]*/, 
                                              Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMAttributePtr __fastcall getAttributeNode(BSTR name/*[in]*/);
  HRESULT         __fastcall setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/, 
                                              Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMAttributePtr __fastcall setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/);
  HRESULT         __fastcall removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/
                                                 , 
                                                 Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMAttributePtr __fastcall removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/);
  HRESULT         __fastcall getElementsByTagName(BSTR tagName/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall getElementsByTagName(BSTR tagName/*[in]*/);
  HRESULT         __fastcall normalize();
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            tagName = {read = get_tagName};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMElementDispT<IXMLDOMElement> IXMLDOMElementDisp;

typedef TComInterface<IXMLDOMAttribute>  TCOMIXMLDOMAttribute;

// *********************************************************************//
// DispIntf:  IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMAttributeDispT : public TAutoDriver<IXMLDOMAttribute>
{
public:
  IXMLDOMAttributeDispT(){}

  IXMLDOMAttributeDispT(IXMLDOMAttribute *pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, false);
  }

  IXMLDOMAttributeDispT(IXMLDOMAttributePtr pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, true);
  }

  IXMLDOMAttributeDispT& operator=(IXMLDOMAttribute *pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMAttributeDispT& operator=(IXMLDOMAttributePtr pintf)
  {
    TAutoDriver<IXMLDOMAttribute>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_name(BSTR* attributeName/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall get_value(TVariant* attributeValue/*[out,retval]*/);
  TVariant        __fastcall get_value(void);
  HRESULT         __fastcall set_value(TVariantInParam attributeValue/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            name = {read = get_name};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMAttributeDispT<IXMLDOMAttribute> IXMLDOMAttributeDisp;

typedef TComInterface<IXMLDOMDocumentFragment>  TCOMIXMLDOMDocumentFragment;

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXMLDOMDocumentFragmentDispT : public TAutoDriver<IXMLDOMDocumentFragment>
{
public:
  IXMLDOMDocumentFragmentDispT(){}

  IXMLDOMDocumentFragmentDispT(IXMLDOMDocumentFragment *pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, false);
  }

  IXMLDOMDocumentFragmentDispT(IXMLDOMDocumentFragmentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, true);
  }

  IXMLDOMDocumentFragmentDispT& operator=(IXMLDOMDocumentFragment *pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMDocumentFragmentDispT& operator=(IXMLDOMDocumentFragmentPtr pintf)
  {
    TAutoDriver<IXMLDOMDocumentFragment>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMDocumentFragmentDispT<IXMLDOMDocumentFragment> IXMLDOMDocumentFragmentDisp;

typedef TComInterface<IXMLDOMCharacterData>  TCOMIXMLDOMCharacterData;

// *********************************************************************//
// DispIntf:  IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCharacterDataDispT : public TAutoDriver<IXMLDOMCharacterData>
{
public:
  IXMLDOMCharacterDataDispT(){}

  IXMLDOMCharacterDataDispT(IXMLDOMCharacterData *pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, false);
  }

  IXMLDOMCharacterDataDispT(IXMLDOMCharacterDataPtr pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, true);
  }

  IXMLDOMCharacterDataDispT& operator=(IXMLDOMCharacterData *pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCharacterDataDispT& operator=(IXMLDOMCharacterDataPtr pintf)
  {
    TAutoDriver<IXMLDOMCharacterData>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT         __fastcall set_data(BSTR data/*[in]*/);
  HRESULT         __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall appendData(BSTR data/*[in]*/);
  HRESULT         __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            data = {read = get_data, write = set_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCharacterDataDispT<IXMLDOMCharacterData> IXMLDOMCharacterDataDisp;

typedef TComInterface<IXMLDOMText>  TCOMIXMLDOMText;

// *********************************************************************//
// DispIntf:  IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMTextDispT : public TAutoDriver<IXMLDOMText>
{
public:
  IXMLDOMTextDispT(){}

  IXMLDOMTextDispT(IXMLDOMText *pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, false);
  }

  IXMLDOMTextDispT(IXMLDOMTextPtr pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, true);
  }

  IXMLDOMTextDispT& operator=(IXMLDOMText *pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMTextDispT& operator=(IXMLDOMTextPtr pintf)
  {
    TAutoDriver<IXMLDOMText>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GhostMethod_IXMLDOMText_0_0();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_4_1();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_8_2();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_12_3();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_16_4();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_20_5();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_24_6();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_28_7();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_32_8();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_36_9();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_40_10();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_44_11();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_48_12();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_52_13();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_56_14();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_60_15();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_64_16();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_68_17();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_72_18();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_76_19();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_80_20();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_84_21();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_88_22();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_92_23();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_96_24();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_100_25();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_104_26();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_108_27();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_112_28();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_116_29();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_120_30();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_124_31();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_128_32();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_132_33();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_136_34();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_140_35();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_144_36();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_148_37();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_152_38();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_156_39();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_160_40();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_164_41();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_168_42();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_172_43();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_176_44();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_180_45();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_184_46();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_188_47();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_192_48();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_196_49();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_200_50();
  HRESULT         __fastcall splitText(long offset/*[in]*/, 
                                       Msxml_tlb::IXMLDOMTextPtr* rightHandTextNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMTextPtr __fastcall splitText(long offset/*[in]*/);
  HRESULT         __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT         __fastcall set_data(BSTR data/*[in]*/);
  HRESULT         __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall appendData(BSTR data/*[in]*/);
  HRESULT         __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            data = {read = get_data, write = set_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMTextDispT<IXMLDOMText> IXMLDOMTextDisp;

typedef TComInterface<IXMLDOMComment>  TCOMIXMLDOMComment;

// *********************************************************************//
// DispIntf:  IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCommentDispT : public TAutoDriver<IXMLDOMComment>
{
public:
  IXMLDOMCommentDispT(){}

  IXMLDOMCommentDispT(IXMLDOMComment *pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, false);
  }

  IXMLDOMCommentDispT(IXMLDOMCommentPtr pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, true);
  }

  IXMLDOMCommentDispT& operator=(IXMLDOMComment *pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCommentDispT& operator=(IXMLDOMCommentPtr pintf)
  {
    TAutoDriver<IXMLDOMComment>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT         __fastcall set_data(BSTR data/*[in]*/);
  HRESULT         __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall appendData(BSTR data/*[in]*/);
  HRESULT         __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            data = {read = get_data, write = set_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCommentDispT<IXMLDOMComment> IXMLDOMCommentDisp;

typedef TComInterface<IXMLDOMCDATASection>  TCOMIXMLDOMCDATASection;

// *********************************************************************//
// DispIntf:  IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMCDATASectionDispT : public TAutoDriver<IXMLDOMCDATASection>
{
public:
  IXMLDOMCDATASectionDispT(){}

  IXMLDOMCDATASectionDispT(IXMLDOMCDATASection *pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, false);
  }

  IXMLDOMCDATASectionDispT(IXMLDOMCDATASectionPtr pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, true);
  }

  IXMLDOMCDATASectionDispT& operator=(IXMLDOMCDATASection *pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMCDATASectionDispT& operator=(IXMLDOMCDATASectionPtr pintf)
  {
    TAutoDriver<IXMLDOMCDATASection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall GhostMethod_IXMLDOMText_0_0();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_4_1();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_8_2();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_12_3();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_16_4();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_20_5();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_24_6();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_28_7();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_32_8();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_36_9();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_40_10();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_44_11();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_48_12();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_52_13();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_56_14();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_60_15();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_64_16();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_68_17();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_72_18();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_76_19();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_80_20();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_84_21();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_88_22();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_92_23();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_96_24();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_100_25();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_104_26();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_108_27();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_112_28();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_116_29();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_120_30();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_124_31();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_128_32();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_132_33();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_136_34();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_140_35();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_144_36();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_148_37();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_152_38();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_156_39();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_160_40();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_164_41();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_168_42();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_172_43();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_176_44();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_180_45();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_184_46();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_188_47();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_192_48();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_196_49();
  HRESULT         __fastcall GhostMethod_IXMLDOMText_200_50();
  HRESULT         __fastcall splitText(long offset/*[in]*/, 
                                       Msxml_tlb::IXMLDOMTextPtr* rightHandTextNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMTextPtr __fastcall splitText(long offset/*[in]*/);
  HRESULT         __fastcall get_data(BSTR* data/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT         __fastcall set_data(BSTR data/*[in]*/);
  HRESULT         __fastcall get_length(long* dataLength/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/);
  BSTR            __fastcall substringData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall appendData(BSTR data/*[in]*/);
  HRESULT         __fastcall insertData(long offset/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall deleteData(long offset/*[in]*/, long count/*[in]*/);
  HRESULT         __fastcall replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);



  __property   BSTR            data = {read = get_data, write = set_data};
  __property   long            length = {read = get_length};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMCDATASectionDispT<IXMLDOMCDATASection> IXMLDOMCDATASectionDisp;

typedef TComInterface<IXMLDOMProcessingInstruction>  TCOMIXMLDOMProcessingInstruction;

// *********************************************************************//
// DispIntf:  IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMProcessingInstructionDispT : public TAutoDriver<IXMLDOMProcessingInstruction>
{
public:
  IXMLDOMProcessingInstructionDispT(){}

  IXMLDOMProcessingInstructionDispT(IXMLDOMProcessingInstruction *pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, false);
  }

  IXMLDOMProcessingInstructionDispT(IXMLDOMProcessingInstructionPtr pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, true);
  }

  IXMLDOMProcessingInstructionDispT& operator=(IXMLDOMProcessingInstruction *pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMProcessingInstructionDispT& operator=(IXMLDOMProcessingInstructionPtr pintf)
  {
    TAutoDriver<IXMLDOMProcessingInstruction>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_target(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_target(void);
  HRESULT         __fastcall get_data(BSTR* value/*[out,retval]*/);
  BSTR            __fastcall get_data(void);
  HRESULT         __fastcall set_data(BSTR value/*[in]*/);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            target = {read = get_target};
  __property   BSTR            data = {read = get_data, write = set_data};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMProcessingInstructionDispT<IXMLDOMProcessingInstruction> IXMLDOMProcessingInstructionDisp;

typedef TComInterface<IXMLDOMEntityReference>  TCOMIXMLDOMEntityReference;

// *********************************************************************//
// DispIntf:  IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMEntityReferenceDispT : public TAutoDriver<IXMLDOMEntityReference>
{
public:
  IXMLDOMEntityReferenceDispT(){}

  IXMLDOMEntityReferenceDispT(IXMLDOMEntityReference *pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, false);
  }

  IXMLDOMEntityReferenceDispT(IXMLDOMEntityReferencePtr pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, true);
  }

  IXMLDOMEntityReferenceDispT& operator=(IXMLDOMEntityReference *pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMEntityReferenceDispT& operator=(IXMLDOMEntityReferencePtr pintf)
  {
    TAutoDriver<IXMLDOMEntityReference>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMEntityReferenceDispT<IXMLDOMEntityReference> IXMLDOMEntityReferenceDisp;

typedef TComInterface<IXMLDOMParseError>  TCOMIXMLDOMParseError;

// *********************************************************************//
// DispIntf:  IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXMLDOMParseErrorDispT : public TAutoDriver<IXMLDOMParseError>
{
public:
  IXMLDOMParseErrorDispT(){}

  IXMLDOMParseErrorDispT(IXMLDOMParseError *pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, false);
  }

  IXMLDOMParseErrorDispT(IXMLDOMParseErrorPtr pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, true);
  }

  IXMLDOMParseErrorDispT& operator=(IXMLDOMParseError *pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMParseErrorDispT& operator=(IXMLDOMParseErrorPtr pintf)
  {
    TAutoDriver<IXMLDOMParseError>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_errorCode(long* errorCode/*[out,retval]*/);
  long            __fastcall get_errorCode(void);
  HRESULT         __fastcall get_url(BSTR* urlString/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall get_reason(BSTR* reasonString/*[out,retval]*/);
  BSTR            __fastcall get_reason(void);
  HRESULT         __fastcall get_srcText(BSTR* sourceString/*[out,retval]*/);
  BSTR            __fastcall get_srcText(void);
  HRESULT         __fastcall get_line(long* lineNumber/*[out,retval]*/);
  long            __fastcall get_line(void);
  HRESULT         __fastcall get_linepos(long* linePosition/*[out,retval]*/);
  long            __fastcall get_linepos(void);
  HRESULT         __fastcall get_filepos(long* filePosition/*[out,retval]*/);
  long            __fastcall get_filepos(void);

  __property   long            errorCode = {read = get_errorCode};
  __property   BSTR            url = {read = get_url};
  __property   BSTR            reason = {read = get_reason};
  __property   BSTR            srcText = {read = get_srcText};
  __property   long            line = {read = get_line};
  __property   long            linepos = {read = get_linepos};
  __property   long            filepos = {read = get_filepos};
};
typedef IXMLDOMParseErrorDispT<IXMLDOMParseError> IXMLDOMParseErrorDisp;

typedef TComInterface<IXMLDOMNotation>  TCOMIXMLDOMNotation;

// *********************************************************************//
// DispIntf:  IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMNotationDispT : public TAutoDriver<IXMLDOMNotation>
{
public:
  IXMLDOMNotationDispT(){}

  IXMLDOMNotationDispT(IXMLDOMNotation *pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, false);
  }

  IXMLDOMNotationDispT(IXMLDOMNotationPtr pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, true);
  }

  IXMLDOMNotationDispT& operator=(IXMLDOMNotation *pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMNotationDispT& operator=(IXMLDOMNotationPtr pintf)
  {
    TAutoDriver<IXMLDOMNotation>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_publicId(TVariant* publicId/*[out,retval]*/);
  TVariant        __fastcall get_publicId(void);
  HRESULT         __fastcall get_systemId(TVariant* systemId/*[out,retval]*/);
  TVariant        __fastcall get_systemId(void);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMNotationDispT<IXMLDOMNotation> IXMLDOMNotationDisp;

typedef TComInterface<IXMLDOMEntity>  TCOMIXMLDOMEntity;

// *********************************************************************//
// DispIntf:  IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template<class T>
class IXMLDOMEntityDispT : public TAutoDriver<IXMLDOMEntity>
{
public:
  IXMLDOMEntityDispT(){}

  IXMLDOMEntityDispT(IXMLDOMEntity *pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, false);
  }

  IXMLDOMEntityDispT(IXMLDOMEntityPtr pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, true);
  }

  IXMLDOMEntityDispT& operator=(IXMLDOMEntity *pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, false);
    return *this;
  }

  IXMLDOMEntityDispT& operator=(IXMLDOMEntityPtr pintf)
  {
    TAutoDriver<IXMLDOMEntity>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_publicId(TVariant* publicId/*[out,retval]*/);
  TVariant        __fastcall get_publicId(void);
  HRESULT         __fastcall get_systemId(TVariant* systemId/*[out,retval]*/);
  TVariant        __fastcall get_systemId(void);
  HRESULT         __fastcall get_notationName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_notationName(void);
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);

  __property   BSTR            notationName = {read = get_notationName};

  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXMLDOMEntityDispT<IXMLDOMEntity> IXMLDOMEntityDisp;

typedef TComInterface<IXTLRuntime>  TCOMIXTLRuntime;

// *********************************************************************//
// DispIntf:  IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template<class T>
class IXTLRuntimeDispT : public TAutoDriver<IXTLRuntime>
{
public:
  IXTLRuntimeDispT(){}

  IXTLRuntimeDispT(IXTLRuntime *pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, false);
  }

  IXTLRuntimeDispT(IXTLRuntimePtr pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, true);
  }

  IXTLRuntimeDispT& operator=(IXTLRuntime *pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, false);
    return *this;
  }

  IXTLRuntimeDispT& operator=(IXTLRuntimePtr pintf)
  {
    TAutoDriver<IXTLRuntime>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                      long* pID/*[out,retval]*/);
  long            __fastcall uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/);
  HRESULT         __fastcall depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                   long* pDepth/*[out,retval]*/);
  long            __fastcall depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/);
  HRESULT         __fastcall childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                         long* pNumber/*[out,retval]*/);
  long            __fastcall childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/);
  HRESULT         __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                                 long* pNumber/*[out,retval]*/);
  long            __fastcall ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/);
  HRESULT         __fastcall absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                                 long* pNumber/*[out,retval]*/);
  long            __fastcall absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/);
  HRESULT         __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                         BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/);
  HRESULT         __fastcall formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                          BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/);
  HRESULT         __fastcall formatDate(TVariantInParam varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        TVariantInParam varDestLocale/*[in,opt]*/, 
                                        BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatDate(TVariantInParam varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        TVariantInParam varDestLocale/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall formatTime(TVariantInParam varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        TVariantInParam varDestLocale/*[in,opt]*/, 
                                        BSTR* pbstrFormattedString/*[out,retval]*/);
  BSTR            __fastcall formatTime(TVariantInParam varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                        TVariantInParam varDestLocale/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_nodeName(BSTR* name/*[out,retval]*/);
  BSTR            __fastcall get_nodeName(void);
  HRESULT         __fastcall get_nodeValue(TVariant* value/*[out,retval]*/);
  TVariant        __fastcall get_nodeValue(void);
  HRESULT         __fastcall set_nodeValue(TVariantInParam value/*[in]*/);
  HRESULT         __fastcall get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/);
  Msxml_tlb::DOMNodeType __fastcall get_nodeType(void);
  HRESULT         __fastcall get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_parentNode(void);
  HRESULT         __fastcall get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall get_childNodes(void);
  HRESULT         __fastcall get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_firstChild(void);
  HRESULT         __fastcall get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_lastChild(void);
  HRESULT         __fastcall get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_previousSibling(void);
  HRESULT         __fastcall get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_nextSibling(void);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall get_attributes(void);
  HRESULT         __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    TVariantInParam refChild/*[in]*/);
  HRESULT         __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/);
  HRESULT         __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/);
  HRESULT         __fastcall hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/);
  TOLEBOOL        __fastcall hasChildNodes(void);
  HRESULT         __fastcall get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_ownerDocument(void);
  HRESULT         __fastcall cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall cloneNode(TOLEBOOL deep/*[in]*/);
  HRESULT         __fastcall get_nodeTypeString(BSTR* nodeType/*[out,retval]*/);
  BSTR            __fastcall get_nodeTypeString(void);
  HRESULT         __fastcall get_text(BSTR* text/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR text/*[in]*/);
  HRESULT         __fastcall get_specified(TOLEBOOL* isSpecified/*[out,retval]*/);
  TOLEBOOL        __fastcall get_specified(void);
  HRESULT         __fastcall get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall get_definition(void);
  HRESULT         __fastcall get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/);
  TVariant        __fastcall get_nodeTypedValue(void);
  HRESULT         __fastcall set_nodeTypedValue(TVariantInParam typedValue/*[in]*/);
  HRESULT         __fastcall get_dataType(TVariant* dataTypeName/*[out,retval]*/);
  TVariant        __fastcall get_dataType(void);
  HRESULT         __fastcall set_dataType(BSTR dataTypeName/*[in]*/);
  HRESULT         __fastcall get_xml(BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall get_xml(void);
  HRESULT         __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/);
  BSTR            __fastcall transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/);
  HRESULT         __fastcall selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodeListPtr __fastcall selectNodes(BSTR queryString/*[in]*/);
  HRESULT         __fastcall selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/);
  Msxml_tlb::IXMLDOMNodePtr __fastcall selectSingleNode(BSTR queryString/*[in]*/);
  HRESULT         __fastcall get_parsed(TOLEBOOL* isParsed/*[out,retval]*/);
  TOLEBOOL        __fastcall get_parsed(void);
  HRESULT         __fastcall get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/);
  BSTR            __fastcall get_namespaceURI(void);
  HRESULT         __fastcall get_prefix(BSTR* prefixString/*[out,retval]*/);
  BSTR            __fastcall get_prefix(void);
  HRESULT         __fastcall get_baseName(BSTR* nameString/*[out,retval]*/);
  BSTR            __fastcall get_baseName(void);
  HRESULT         __fastcall transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/);


  __property   BSTR            nodeName = {read = get_nodeName};
  __property   Msxml_tlb::DOMNodeType nodeType = {read = get_nodeType};
  __property   Msxml_tlb::IXMLDOMNodePtr parentNode = {read = get_parentNode};
  __property   Msxml_tlb::IXMLDOMNodeListPtr childNodes = {read = get_childNodes};
  __property   Msxml_tlb::IXMLDOMNodePtr firstChild = {read = get_firstChild};
  __property   Msxml_tlb::IXMLDOMNodePtr lastChild = {read = get_lastChild};
  __property   Msxml_tlb::IXMLDOMNodePtr previousSibling = {read = get_previousSibling};
  __property   Msxml_tlb::IXMLDOMNodePtr nextSibling = {read = get_nextSibling};
  __property   Msxml_tlb::IXMLDOMNamedNodeMapPtr attributes = {read = get_attributes};
  __property   Msxml_tlb::IXMLDOMDocumentPtr ownerDocument = {read = get_ownerDocument};
  __property   BSTR            nodeTypeString = {read = get_nodeTypeString};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   TOLEBOOL        specified = {read = get_specified};
  __property   Msxml_tlb::IXMLDOMNodePtr definition = {read = get_definition};
  __property   BSTR            dataType = {write = set_dataType};
  __property   BSTR            xml = {read = get_xml};
  __property   TOLEBOOL        parsed = {read = get_parsed};
  __property   BSTR            namespaceURI = {read = get_namespaceURI};
  __property   BSTR            prefix = {read = get_prefix};
  __property   BSTR            baseName = {read = get_baseName};
};
typedef IXTLRuntimeDispT<IXTLRuntime> IXTLRuntimeDisp;

// *********************************************************************//
// DispIntf:  XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T>
class XMLDOMDocumentEventsDispT : public TAutoDriver<XMLDOMDocumentEvents>
{
public:
  XMLDOMDocumentEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall ondataavailable();
  HRESULT         __fastcall onreadystatechange();

};
typedef XMLDOMDocumentEventsDispT<XMLDOMDocumentEvents> XMLDOMDocumentEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLHttpRequest
// Interface: IXMLHttpRequest
// *********************************************************************//
template <class T /* IXMLHttpRequest */ >
class TCOMIXMLHttpRequestT : public TComInterface<IXMLHttpRequest>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLHttpRequestT() {}
  TCOMIXMLHttpRequestT(IXMLHttpRequest *intf, bool addRef = false) : TComInterface<IXMLHttpRequest>(intf, addRef) {}
  TCOMIXMLHttpRequestT(const TCOMIXMLHttpRequestT& src) : TComInterface<IXMLHttpRequest>(src) {}
  TCOMIXMLHttpRequestT& operator=(const TCOMIXMLHttpRequestT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                  TVariantInParam varAsync/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam bstrUser/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam bstrPassword/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                               BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/);
  HRESULT         __fastcall getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/);
  BSTR            __fastcall getAllResponseHeaders(void);
  HRESULT         __fastcall send(TVariantInParam varBody/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall abort(void);
  HRESULT         __fastcall get_status(long* plStatus/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT         __fastcall get_statusText(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_statusText(void);
  HRESULT         __fastcall get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/);
  LPDISPATCH      __fastcall get_responseXML(void);
  HRESULT         __fastcall get_responseText(BSTR* pbstrBody/*[out,retval]*/);
  BSTR            __fastcall get_responseText(void);
  HRESULT         __fastcall get_responseBody(TVariant* pvarBody/*[out,retval]*/);
  TVariant        __fastcall get_responseBody(void);
  HRESULT         __fastcall get_responseStream(TVariant* pvarBody/*[out,retval]*/);
  TVariant        __fastcall get_responseStream(void);
  HRESULT         __fastcall get_readyState(long* plState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall set_onreadystatechange(LPDISPATCH Param1/*[in]*/);

  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};
};
typedef TCOMIXMLHttpRequestT<IXMLHttpRequest> TCOMIXMLHttpRequest;

// *********************************************************************//
// DispIntf:  IXMLHttpRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
template<class T>
class IXMLHttpRequestDispT : public TAutoDriver<IXMLHttpRequest>
{
public:
  IXMLHttpRequestDispT(){}

  IXMLHttpRequestDispT(IXMLHttpRequest *pintf)
  {
    TAutoDriver<IXMLHttpRequest>::Bind(pintf, false);
  }

  IXMLHttpRequestDispT(IXMLHttpRequestPtr pintf)
  {
    TAutoDriver<IXMLHttpRequest>::Bind(pintf, true);
  }

  IXMLHttpRequestDispT& operator=(IXMLHttpRequest *pintf)
  {
    TAutoDriver<IXMLHttpRequest>::Bind(pintf, false);
    return *this;
  }

  IXMLHttpRequestDispT& operator=(IXMLHttpRequestPtr pintf)
  {
    TAutoDriver<IXMLHttpRequest>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_XMLHTTPRequest));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_XMLHTTPRequest);
  }

  HRESULT         __fastcall open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                                  TVariantInParam varAsync/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam bstrUser/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam bstrPassword/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/);
  HRESULT         __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/, 
                                               BSTR* pbstrValue/*[out,retval]*/);
  BSTR            __fastcall getResponseHeader(BSTR bstrHeader/*[in]*/);
  HRESULT         __fastcall getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/);
  BSTR            __fastcall getAllResponseHeaders(void);
  HRESULT         __fastcall send(TVariantInParam varBody/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall abort();
  HRESULT         __fastcall get_status(long* plStatus/*[out,retval]*/);
  long            __fastcall get_status(void);
  HRESULT         __fastcall get_statusText(BSTR* pbstrStatus/*[out,retval]*/);
  BSTR            __fastcall get_statusText(void);
  HRESULT         __fastcall get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/);
  LPDISPATCH      __fastcall get_responseXML(void);
  HRESULT         __fastcall get_responseText(BSTR* pbstrBody/*[out,retval]*/);
  BSTR            __fastcall get_responseText(void);
  HRESULT         __fastcall get_responseBody(TVariant* pvarBody/*[out,retval]*/);
  TVariant        __fastcall get_responseBody(void);
  HRESULT         __fastcall get_responseStream(TVariant* pvarBody/*[out,retval]*/);
  TVariant        __fastcall get_responseStream(void);
  HRESULT         __fastcall get_readyState(long* plState/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall set_onreadystatechange(LPDISPATCH Param1/*[in]*/);

  __property   long            status = {read = get_status};
  __property   BSTR            statusText = {read = get_statusText};
  __property   LPDISPATCH      responseXML = {read = get_responseXML};
  __property   BSTR            responseText = {read = get_responseText};
  __property   long            readyState = {read = get_readyState};
  __property   LPDISPATCH      onreadystatechange = {write = set_onreadystatechange};
};
typedef IXMLHttpRequestDispT<IXMLHttpRequest> IXMLHttpRequestDisp;

// *********************************************************************//
// SmartIntf: TCOMIXMLDSOControl
// Interface: IXMLDSOControl
// *********************************************************************//
template <class T /* IXMLDSOControl */ >
class TCOMIXMLDSOControlT : public TComInterface<IXMLDSOControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIXMLDSOControlT() {}
  TCOMIXMLDSOControlT(IXMLDSOControl *intf, bool addRef = false) : TComInterface<IXMLDSOControl>(intf, addRef) {}
  TCOMIXMLDSOControlT(const TCOMIXMLDSOControlT& src) : TComInterface<IXMLDSOControl>(src) {}
  TCOMIXMLDSOControlT& operator=(const TCOMIXMLDSOControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_XMLDocument(void);
  HRESULT         __fastcall set_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr ppDoc/*[in]*/);
  HRESULT         __fastcall get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/);
  long            __fastcall get_JavaDSOCompatible(void);
  HRESULT         __fastcall set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/);
  HRESULT         __fastcall get_readyState(long* state/*[out,retval]*/);
  long            __fastcall get_readyState(void);

  __property   Msxml_tlb::IXMLDOMDocumentPtr XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};
};
typedef TCOMIXMLDSOControlT<IXMLDSOControl> TCOMIXMLDSOControl;

// *********************************************************************//
// DispIntf:  IXMLDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
template<class T>
class IXMLDSOControlDispT : public TAutoDriver<IXMLDSOControl>
{
public:
  IXMLDSOControlDispT(){}

  IXMLDSOControlDispT(IXMLDSOControl *pintf)
  {
    TAutoDriver<IXMLDSOControl>::Bind(pintf, false);
  }

  IXMLDSOControlDispT(IXMLDSOControlPtr pintf)
  {
    TAutoDriver<IXMLDSOControl>::Bind(pintf, true);
  }

  IXMLDSOControlDispT& operator=(IXMLDSOControl *pintf)
  {
    TAutoDriver<IXMLDSOControl>::Bind(pintf, false);
    return *this;
  }

  IXMLDSOControlDispT& operator=(IXMLDSOControlPtr pintf)
  {
    TAutoDriver<IXMLDSOControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_XMLDSOControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_XMLDSOControl);
  }

  HRESULT         __fastcall get_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/);
  Msxml_tlb::IXMLDOMDocumentPtr __fastcall get_XMLDocument(void);
  HRESULT         __fastcall set_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr ppDoc/*[in]*/);
  HRESULT         __fastcall get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/);
  long            __fastcall get_JavaDSOCompatible(void);
  HRESULT         __fastcall set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/);
  HRESULT         __fastcall get_readyState(long* state/*[out,retval]*/);
  long            __fastcall get_readyState(void);

  __property   Msxml_tlb::IXMLDOMDocumentPtr XMLDocument = {read = get_XMLDocument, write = set_XMLDocument};
  __property   long            JavaDSOCompatible = {read = get_JavaDSOCompatible, write = set_JavaDSOCompatible};
  __property   long            readyState = {read = get_readyState};
};
typedef IXMLDSOControlDispT<IXMLDSOControl> IXMLDSOControlDisp;

typedef TComInterface<IXMLElementCollection>  TCOMIXMLElementCollection;

// *********************************************************************//
// DispIntf:  IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
template<class T>
class IXMLElementCollectionDispT : public TAutoDriver<IXMLElementCollection>
{
public:
  IXMLElementCollectionDispT(){}

  IXMLElementCollectionDispT(IXMLElementCollection *pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, false);
  }

  IXMLElementCollectionDispT(IXMLElementCollectionPtr pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, true);
  }

  IXMLElementCollectionDispT& operator=(IXMLElementCollection *pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, false);
    return *this;
  }

  IXMLElementCollectionDispT& operator=(IXMLElementCollectionPtr pintf)
  {
    TAutoDriver<IXMLElementCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall set_length(long p/*[in]*/);
  HRESULT         __fastcall get_length(long* p/*[out,retval]*/);
  long            __fastcall get_length(void);
  HRESULT         __fastcall get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__newEnum(void);
  HRESULT         __fastcall item(TVariantInParam var1/*[in,opt]*/, TVariantInParam var2/*[in,opt]*/
                                  , LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall item(TVariantInParam var1/*[in,opt]*/= TNoParam(), 
                                  TVariantInParam var2/*[in,opt]*/= TNoParam());

  __property   long            length = {read = get_length, write = set_length};
  __property   LPUNKNOWN       _newEnum = {read = get__newEnum};
};
typedef IXMLElementCollectionDispT<IXMLElementCollection> IXMLElementCollectionDisp;

typedef TComInterface<IXMLDocument>  TCOMIXMLDocument;

// *********************************************************************//
// DispIntf:  IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
template<class T>
class IXMLDocumentDispT : public TAutoDriver<IXMLDocument>
{
public:
  IXMLDocumentDispT(){}

  IXMLDocumentDispT(IXMLDocument *pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, false);
  }

  IXMLDocumentDispT(IXMLDocumentPtr pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, true);
  }

  IXMLDocumentDispT& operator=(IXMLDocument *pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, false);
    return *this;
  }

  IXMLDocumentDispT& operator=(IXMLDocumentPtr pintf)
  {
    TAutoDriver<IXMLDocument>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_root(Msxml_tlb::IXMLElementPtr* p/*[out,retval]*/);
  Msxml_tlb::IXMLElementPtr __fastcall get_root(void);
  HRESULT         __fastcall get_fileSize(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileSize(void);
  HRESULT         __fastcall get_fileModifiedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileModifiedDate(void);
  HRESULT         __fastcall get_fileUpdatedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileUpdatedDate(void);
  HRESULT         __fastcall get_url(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall set_url(BSTR p/*[in]*/);
  HRESULT         __fastcall get_mimeType(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_mimeType(void);
  HRESULT         __fastcall get_readyState(long* pl/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall get_charset(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_charset(void);
  HRESULT         __fastcall set_charset(BSTR p/*[in]*/);
  HRESULT         __fastcall get_version(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_doctype(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_doctype(void);
  HRESULT         __fastcall get_dtdURL(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_dtdURL(void);
  HRESULT         __fastcall createElement(TVariantInParam vType/*[in]*/, 
                                           TVariantInParam var1/*[in,opt]*/, 
                                           Msxml_tlb::IXMLElementPtr* ppElem/*[out,retval]*/);
  Msxml_tlb::IXMLElementPtr __fastcall createElement(TVariantInParam vType/*[in]*/, 
                                                     TVariantInParam var1/*[in,opt]*/= TNoParam());

  __property   Msxml_tlb::IXMLElementPtr root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url, write = set_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset, write = set_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};
};
typedef IXMLDocumentDispT<IXMLDocument> IXMLDocumentDisp;

typedef TComInterface<IXMLElement>  TCOMIXMLElement;

// *********************************************************************//
// DispIntf:  IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
template<class T>
class IXMLElementDispT : public TAutoDriver<IXMLElement>
{
public:
  IXMLElementDispT(){}

  IXMLElementDispT(IXMLElement *pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, false);
  }

  IXMLElementDispT(IXMLElementPtr pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, true);
  }

  IXMLElementDispT& operator=(IXMLElement *pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, false);
    return *this;
  }

  IXMLElementDispT& operator=(IXMLElementPtr pintf)
  {
    TAutoDriver<IXMLElement>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_tagName(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT         __fastcall set_tagName(BSTR p/*[in]*/);
  HRESULT         __fastcall get_parent(Msxml_tlb::IXMLElementPtr* ppParent/*[out,retval]*/);
  Msxml_tlb::IXMLElementPtr __fastcall get_parent(void);
  HRESULT         __fastcall setAttribute(BSTR strPropertyName/*[in]*/, 
                                          TVariantInParam PropertyValue/*[in]*/);
  HRESULT         __fastcall getAttribute(BSTR strPropertyName/*[in]*/, 
                                          TVariant* PropertyValue/*[out,retval]*/);
  TVariant        __fastcall getAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT         __fastcall removeAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT         __fastcall get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/);
  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_children(void);
  HRESULT         __fastcall get_type(long* plType/*[out,retval]*/);
  long            __fastcall get_type(void);
  HRESULT         __fastcall get_text(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR p/*[in]*/);
  HRESULT         __fastcall addChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/, long lIndex, 
                                      long lReserved);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/);

  __property   BSTR            tagName = {read = get_tagName, write = set_tagName};
  __property   Msxml_tlb::IXMLElementPtr parent = {read = get_parent};
  __property   Msxml_tlb::IXMLElementCollectionPtr children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text, write = set_text};
};
typedef IXMLElementDispT<IXMLElement> IXMLElementDisp;

// *********************************************************************//
// DispIntf:  IXMLDocument2
// Flags:     (4112) Hidden Dispatchable
// GUID:      {2B8DE2FE-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template<class T>
class IXMLDocument2DispT : public TAutoDriver<IXMLDocument2>
{
public:
  IXMLDocument2DispT(){}

  IXMLDocument2DispT(IXMLDocument2 *pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, false);
  }

  IXMLDocument2DispT(IXMLDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, true);
  }

  IXMLDocument2DispT& operator=(IXMLDocument2 *pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, false);
    return *this;
  }

  IXMLDocument2DispT& operator=(IXMLDocument2Ptr pintf)
  {
    TAutoDriver<IXMLDocument2>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_XMLDocument));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_XMLDocument);
  }

  HRESULT         __fastcall get_root(Msxml_tlb::IXMLElement2Ptr* p/*[out,retval]*/);
  Msxml_tlb::IXMLElement2Ptr __fastcall get_root(void);
  HRESULT         __fastcall get_fileSize(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileSize(void);
  HRESULT         __fastcall get_fileModifiedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileModifiedDate(void);
  HRESULT         __fastcall get_fileUpdatedDate(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_fileUpdatedDate(void);
  HRESULT         __fastcall get_url(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_url(void);
  HRESULT         __fastcall set_url(BSTR p/*[in]*/);
  HRESULT         __fastcall get_mimeType(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_mimeType(void);
  HRESULT         __fastcall get_readyState(long* pl/*[out,retval]*/);
  long            __fastcall get_readyState(void);
  HRESULT         __fastcall get_charset(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_charset(void);
  HRESULT         __fastcall set_charset(BSTR p/*[in]*/);
  HRESULT         __fastcall get_version(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_version(void);
  HRESULT         __fastcall get_doctype(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_doctype(void);
  HRESULT         __fastcall get_dtdURL(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_dtdURL(void);
  HRESULT         __fastcall createElement(TVariantInParam vType/*[in]*/, 
                                           TVariantInParam var1/*[in,opt]*/, 
                                           Msxml_tlb::IXMLElement2Ptr* ppElem/*[out,retval]*/);
  Msxml_tlb::IXMLElement2Ptr __fastcall createElement(TVariantInParam vType/*[in]*/, 
                                                      TVariantInParam var1/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_async(TOLEBOOL* pf/*[out,retval]*/);
  TOLEBOOL        __fastcall get_async(void);
  HRESULT         __fastcall set_async(TOLEBOOL pf/*[in]*/);

  __property   Msxml_tlb::IXMLElement2Ptr root = {read = get_root};
  __property   BSTR            fileSize = {read = get_fileSize};
  __property   BSTR            fileModifiedDate = {read = get_fileModifiedDate};
  __property   BSTR            fileUpdatedDate = {read = get_fileUpdatedDate};
  __property   BSTR            url = {read = get_url, write = set_url};
  __property   BSTR            mimeType = {read = get_mimeType};
  __property   long            readyState = {read = get_readyState};
  __property   BSTR            charset = {read = get_charset, write = set_charset};
  __property   BSTR            version = {read = get_version};
  __property   BSTR            doctype = {read = get_doctype};
  __property   BSTR            dtdURL = {read = get_dtdURL};
  __property   TOLEBOOL        async = {read = get_async, write = set_async};
};
typedef IXMLDocument2DispT<IXMLDocument2> IXMLDocument2Disp;

typedef TComInterface<IXMLElement2>  TCOMIXMLElement2;

// *********************************************************************//
// DispIntf:  IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template<class T>
class IXMLElement2DispT : public TAutoDriver<IXMLElement2>
{
public:
  IXMLElement2DispT(){}

  IXMLElement2DispT(IXMLElement2 *pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, false);
  }

  IXMLElement2DispT(IXMLElement2Ptr pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, true);
  }

  IXMLElement2DispT& operator=(IXMLElement2 *pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, false);
    return *this;
  }

  IXMLElement2DispT& operator=(IXMLElement2Ptr pintf)
  {
    TAutoDriver<IXMLElement2>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_tagName(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_tagName(void);
  HRESULT         __fastcall set_tagName(BSTR p/*[in]*/);
  HRESULT         __fastcall get_parent(Msxml_tlb::IXMLElement2Ptr* ppParent/*[out,retval]*/);
  Msxml_tlb::IXMLElement2Ptr __fastcall get_parent(void);
  HRESULT         __fastcall setAttribute(BSTR strPropertyName/*[in]*/, 
                                          TVariantInParam PropertyValue/*[in]*/);
  HRESULT         __fastcall getAttribute(BSTR strPropertyName/*[in]*/, 
                                          TVariant* PropertyValue/*[out,retval]*/);
  TVariant        __fastcall getAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT         __fastcall removeAttribute(BSTR strPropertyName/*[in]*/);
  HRESULT         __fastcall get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/);
  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_children(void);
  HRESULT         __fastcall get_type(long* plType/*[out,retval]*/);
  long            __fastcall get_type(void);
  HRESULT         __fastcall get_text(BSTR* p/*[out,retval]*/);
  BSTR            __fastcall get_text(void);
  HRESULT         __fastcall set_text(BSTR p/*[in]*/);
  HRESULT         __fastcall addChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/, long lIndex, 
                                      long lReserved);
  HRESULT         __fastcall removeChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/);
  HRESULT         __fastcall get_attributes(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/);
  Msxml_tlb::IXMLElementCollectionPtr __fastcall get_attributes(void);

  __property   BSTR            tagName = {read = get_tagName, write = set_tagName};
  __property   Msxml_tlb::IXMLElement2Ptr parent = {read = get_parent};
  __property   Msxml_tlb::IXMLElementCollectionPtr children = {read = get_children};
  __property   long            type = {read = get_type};
  __property   BSTR            text = {read = get_text, write = set_text};
  __property   Msxml_tlb::IXMLElementCollectionPtr attributes = {read = get_attributes};
};
typedef IXMLElement2DispT<IXMLElement2> IXMLElement2Disp;

typedef TComInterface<IXMLAttribute>  TCOMIXMLAttribute;

// *********************************************************************//
// DispIntf:  IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
template<class T>
class IXMLAttributeDispT : public TAutoDriver<IXMLAttribute>
{
public:
  IXMLAttributeDispT(){}

  IXMLAttributeDispT(IXMLAttribute *pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, false);
  }

  IXMLAttributeDispT(IXMLAttributePtr pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, true);
  }

  IXMLAttributeDispT& operator=(IXMLAttribute *pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, false);
    return *this;
  }

  IXMLAttributeDispT& operator=(IXMLAttributePtr pintf)
  {
    TAutoDriver<IXMLAttribute>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_name(BSTR* n/*[out,retval]*/);
  BSTR            __fastcall get_name(void);
  HRESULT         __fastcall get_value(BSTR* v/*[out,retval]*/);
  BSTR            __fastcall get_value(void);

  __property   BSTR            name = {read = get_name};
  __property   BSTR            value = {read = get_value};
};
typedef IXMLAttributeDispT<IXMLAttribute> IXMLAttributeDisp;

typedef TComInterface<IXMLError>  TCOMIXMLError;

// *********************************************************************//
// DispIntf:  IXMLDOMImplementation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8F-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMImplementationDispT<T>::hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/, 
                                          TOLEBOOL* hasFeature/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasFeature"), DISPID(145));
  TAutoArgs<2> _args;
  _args[1] = feature /*[VT_BSTR:0]*/;
  _args[2] = version /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(hasFeature /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMImplementationDispT<T>::hasFeature(BSTR feature/*[in]*/, BSTR version/*[in]*/)
{
  TOLEBOOL hasFeature;
  this->hasFeature(feature, version, (TOLEBOOL*)&hasFeature);
  return hasFeature;
}

// *********************************************************************//
// DispIntf:  IXMLDOMNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF80-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNodeDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMNodeDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMNodeDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMNodeDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNodeDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMNodeDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                               Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNodeDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNodeDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNodeDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMNodeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNodeDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNodeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMNodeList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF82-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMNodeListDispT<T>::get_item(long index/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)listItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeListDispT<T>::get_item(long index/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr listItem;
  this->get_item(index, (Msxml_tlb::IXMLDOMNodePtr*)&listItem);
  return listItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeListDispT<T>::get_length(long* listLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(listLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMNodeListDispT<T>::get_length(void)
{
  long listLength;
  this->get_length((long*)&listLength);
  return listLength;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeListDispT<T>::nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextNode"), DISPID(76));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNodeListDispT<T>::nextNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextItem;
  this->nextNode((Msxml_tlb::IXMLDOMNodePtr*)&nextItem);
  return nextItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNodeListDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(77));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMNodeListDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMNodeListDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IXMLDOMNamedNodeMap
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF83-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::getNamedItem(BSTR name/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getNamedItem"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)namedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::getNamedItem(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr namedItem;
  this->getNamedItem(name, (Msxml_tlb::IXMLDOMNodePtr*)&namedItem);
  return namedItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* nameItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("setNamedItem"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newItem /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nameItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::setNamedItem(Msxml_tlb::IXMLDOMNodePtr newItem/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr nameItem;
  this->setNamedItem(newItem, (Msxml_tlb::IXMLDOMNodePtr*)&nameItem);
  return nameItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeNamedItem(BSTR name/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* namedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeNamedItem"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)namedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeNamedItem(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr namedItem;
  this->removeNamedItem(name, (Msxml_tlb::IXMLDOMNodePtr*)&namedItem);
  return namedItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_item(long index/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* listItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)listItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_item(long index/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr listItem;
  this->get_item(index, (Msxml_tlb::IXMLDOMNodePtr*)&listItem);
  return listItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_length(long* listLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(listLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMNamedNodeMapDispT<T>::get_length(void)
{
  long listLength;
  this->get_length((long*)&listLength);
  return listLength;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getQualifiedItem"), DISPID(87));
  TAutoArgs<2> _args;
  _args[1] = baseName /*[VT_BSTR:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)qualifiedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::getQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr qualifiedItem;
  this->getQualifiedItem(baseName, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&qualifiedItem);
  return qualifiedItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* qualifiedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeQualifiedItem"), DISPID(88));
  TAutoArgs<2> _args;
  _args[1] = baseName /*[VT_BSTR:0]*/;
  _args[2] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)qualifiedItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::removeQualifiedItem(BSTR baseName/*[in]*/, BSTR namespaceURI/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr qualifiedItem;
  this->removeQualifiedItem(baseName, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&qualifiedItem);
  return qualifiedItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::nextNode(Msxml_tlb::IXMLDOMNodePtr* nextItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextNode"), DISPID(89));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNamedNodeMapDispT<T>::nextNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextItem;
  this->nextNode((Msxml_tlb::IXMLDOMNodePtr*)&nextItem);
  return nextItem;
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::reset()
{
  _TDispID _dispid(*this, OLETEXT("reset"), DISPID(90));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMNamedNodeMapDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLDOMNamedNodeMapDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// SmartIntf: TCOMIXMLDOMDocument
// Interface: IXMLDOMDocument
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_doctype(Msxml_tlb::IXMLDOMDocumentTypePtr* documentType/*[out,retval]*/)
{
  return (*this)->get_doctype(documentType);
}

template <class T> Msxml_tlb::IXMLDOMDocumentTypePtr __fastcall
TCOMIXMLDOMDocumentT<T>::get_doctype(void)
{
  Msxml_tlb::IXMLDOMDocumentTypePtr documentType;
  OLECHECK(this->get_doctype((Msxml_tlb::IXMLDOMDocumentTypePtr*)&documentType));
  return documentType;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_implementation(Msxml_tlb::IXMLDOMImplementationPtr* impl/*[out,retval]*/)
{
  return (*this)->get_implementation(impl);
}

template <class T> Msxml_tlb::IXMLDOMImplementationPtr __fastcall
TCOMIXMLDOMDocumentT<T>::get_implementation(void)
{
  Msxml_tlb::IXMLDOMImplementationPtr impl;
  OLECHECK(this->get_implementation((Msxml_tlb::IXMLDOMImplementationPtr*)&impl));
  return impl;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_documentElement(Msxml_tlb::IXMLDOMElementPtr* DOMElement/*[out,retval]*/)
{
  return (*this)->get_documentElement(DOMElement);
}

template <class T> Msxml_tlb::IXMLDOMElementPtr __fastcall
TCOMIXMLDOMDocumentT<T>::get_documentElement(void)
{
  Msxml_tlb::IXMLDOMElementPtr DOMElement;
  OLECHECK(this->get_documentElement((Msxml_tlb::IXMLDOMElementPtr*)&DOMElement));
  return DOMElement;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::_set_documentElement(Msxml_tlb::IXMLDOMElementPtr DOMElement/*[in]*/)
{
  return (*this)->_set_documentElement(DOMElement);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createElement(BSTR tagName/*[in]*/, 
                                       Msxml_tlb::IXMLDOMElementPtr* element/*[out,retval]*/)
{
  return (*this)->createElement(tagName, element);
}

template <class T> Msxml_tlb::IXMLDOMElementPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createElement(BSTR tagName/*[in]*/)
{
  Msxml_tlb::IXMLDOMElementPtr element;
  OLECHECK(this->createElement(tagName, (Msxml_tlb::IXMLDOMElementPtr*)&element));
  return element;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createDocumentFragment(Msxml_tlb::IXMLDOMDocumentFragmentPtr* docFrag/*[out,retval]*/)
{
  return (*this)->createDocumentFragment(docFrag);
}

template <class T> Msxml_tlb::IXMLDOMDocumentFragmentPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createDocumentFragment(void)
{
  Msxml_tlb::IXMLDOMDocumentFragmentPtr docFrag;
  OLECHECK(this->createDocumentFragment((Msxml_tlb::IXMLDOMDocumentFragmentPtr*)&docFrag));
  return docFrag;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createTextNode(BSTR data/*[in]*/, 
                                        Msxml_tlb::IXMLDOMTextPtr* text/*[out,retval]*/)
{
  return (*this)->createTextNode(data, text);
}

template <class T> Msxml_tlb::IXMLDOMTextPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createTextNode(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMTextPtr text;
  OLECHECK(this->createTextNode(data, (Msxml_tlb::IXMLDOMTextPtr*)&text));
  return text;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createComment(BSTR data/*[in]*/, 
                                       Msxml_tlb::IXMLDOMCommentPtr* comment/*[out,retval]*/)
{
  return (*this)->createComment(data, comment);
}

template <class T> Msxml_tlb::IXMLDOMCommentPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createComment(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMCommentPtr comment;
  OLECHECK(this->createComment(data, (Msxml_tlb::IXMLDOMCommentPtr*)&comment));
  return comment;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createCDATASection(BSTR data/*[in]*/, 
                                            Msxml_tlb::IXMLDOMCDATASectionPtr* cdata/*[out,retval]*/)
{
  return (*this)->createCDATASection(data, cdata);
}

template <class T> Msxml_tlb::IXMLDOMCDATASectionPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createCDATASection(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMCDATASectionPtr cdata;
  OLECHECK(this->createCDATASection(data, (Msxml_tlb::IXMLDOMCDATASectionPtr*)&cdata));
  return cdata;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMProcessingInstructionPtr* pi/*[out,retval]*/)
{
  return (*this)->createProcessingInstruction(target, data, pi);
}

template <class T> Msxml_tlb::IXMLDOMProcessingInstructionPtr __fastcall
TCOMIXMLDOMDocumentT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMProcessingInstructionPtr pi;
  OLECHECK(this->createProcessingInstruction(target, data, (Msxml_tlb::IXMLDOMProcessingInstructionPtr*)&pi));
  return pi;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createAttribute(BSTR name/*[in]*/, 
                                         Msxml_tlb::IXMLDOMAttributePtr* attribute/*[out,retval]*/)
{
  return (*this)->createAttribute(name, attribute);
}

template <class T> Msxml_tlb::IXMLDOMAttributePtr __fastcall
TCOMIXMLDOMDocumentT<T>::createAttribute(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMAttributePtr attribute;
  OLECHECK(this->createAttribute(name, (Msxml_tlb::IXMLDOMAttributePtr*)&attribute));
  return attribute;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createEntityReference(BSTR name/*[in]*/, 
                                               Msxml_tlb::IXMLDOMEntityReferencePtr* entityRef/*[out,retval]*/)
{
  return (*this)->createEntityReference(name, entityRef);
}

template <class T> Msxml_tlb::IXMLDOMEntityReferencePtr __fastcall
TCOMIXMLDOMDocumentT<T>::createEntityReference(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMEntityReferencePtr entityRef;
  OLECHECK(this->createEntityReference(name, (Msxml_tlb::IXMLDOMEntityReferencePtr*)&entityRef));
  return entityRef;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  return (*this)->getElementsByTagName(tagName, resultList);
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
TCOMIXMLDOMDocumentT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  OLECHECK(this->getElementsByTagName(tagName, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList));
  return resultList;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/)
{
  return (*this)->createNode(type, name, namespaceURI, node);
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
TCOMIXMLDOMDocumentT<T>::createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr node;
  OLECHECK(this->createNode(type, name, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&node));
  return node;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::nodeFromID(BSTR idString/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/)
{
  return (*this)->nodeFromID(idString, node);
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
TCOMIXMLDOMDocumentT<T>::nodeFromID(BSTR idString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr node;
  OLECHECK(this->nodeFromID(idString, (Msxml_tlb::IXMLDOMNodePtr*)&node));
  return node;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::load(TVariantInParam xmlSource/*[in]*/, 
                              TOLEBOOL* isSuccessful/*[out,retval]*/)
{
  return (*this)->load(xmlSource, isSuccessful);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::load(TVariantInParam xmlSource/*[in]*/)
{
  TOLEBOOL isSuccessful;
  OLECHECK(this->load(xmlSource, (TOLEBOOL*)&isSuccessful));
  return isSuccessful;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_readyState(long* value/*[out,retval]*/)
{
  return (*this)->get_readyState(value);
}

template <class T> long __fastcall
TCOMIXMLDOMDocumentT<T>::get_readyState(void)
{
  long value;
  OLECHECK(this->get_readyState((long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_parseError(Msxml_tlb::IXMLDOMParseErrorPtr* errorObj/*[out,retval]*/)
{
  return (*this)->get_parseError(errorObj);
}

template <class T> Msxml_tlb::IXMLDOMParseErrorPtr __fastcall
TCOMIXMLDOMDocumentT<T>::get_parseError(void)
{
  Msxml_tlb::IXMLDOMParseErrorPtr errorObj;
  OLECHECK(this->get_parseError((Msxml_tlb::IXMLDOMParseErrorPtr*)&errorObj));
  return errorObj;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  return (*this)->get_url(urlString);
}

template <class T> BSTR __fastcall
TCOMIXMLDOMDocumentT<T>::get_url(void)
{
  BSTR urlString = 0;
  OLECHECK(this->get_url((BSTR*)&urlString));
  return urlString;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_async(TOLEBOOL* isAsync/*[out,retval]*/)
{
  return (*this)->get_async(isAsync);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::get_async(void)
{
  TOLEBOOL isAsync;
  OLECHECK(this->get_async((TOLEBOOL*)&isAsync));
  return isAsync;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_async(TOLEBOOL isAsync/*[in]*/)
{
  return (*this)->set_async(isAsync);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::abort(void)
{
  return (*this)->abort();
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::loadXML(BSTR bstrXML/*[in]*/, TOLEBOOL* isSuccessful/*[out,retval]*/)
{
  return (*this)->loadXML(bstrXML, isSuccessful);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::loadXML(BSTR bstrXML/*[in]*/)
{
  TOLEBOOL isSuccessful;
  OLECHECK(this->loadXML(bstrXML, (TOLEBOOL*)&isSuccessful));
  return isSuccessful;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::save(TVariantInParam desination/*[in]*/)
{
  return (*this)->save(desination);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_validateOnParse(TOLEBOOL* isValidating/*[out,retval]*/)
{
  return (*this)->get_validateOnParse(isValidating);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::get_validateOnParse(void)
{
  TOLEBOOL isValidating;
  OLECHECK(this->get_validateOnParse((TOLEBOOL*)&isValidating));
  return isValidating;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_validateOnParse(TOLEBOOL isValidating/*[in]*/)
{
  return (*this)->set_validateOnParse(isValidating);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_resolveExternals(TOLEBOOL* isResolving/*[out,retval]*/)
{
  return (*this)->get_resolveExternals(isResolving);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::get_resolveExternals(void)
{
  TOLEBOOL isResolving;
  OLECHECK(this->get_resolveExternals((TOLEBOOL*)&isResolving));
  return isResolving;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_resolveExternals(TOLEBOOL isResolving/*[in]*/)
{
  return (*this)->set_resolveExternals(isResolving);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::get_preserveWhiteSpace(TOLEBOOL* isPreserving/*[out,retval]*/)
{
  return (*this)->get_preserveWhiteSpace(isPreserving);
}

template <class T> TOLEBOOL __fastcall
TCOMIXMLDOMDocumentT<T>::get_preserveWhiteSpace(void)
{
  TOLEBOOL isPreserving;
  OLECHECK(this->get_preserveWhiteSpace((TOLEBOOL*)&isPreserving));
  return isPreserving;
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_preserveWhiteSpace(TOLEBOOL isPreserving/*[in]*/)
{
  return (*this)->set_preserveWhiteSpace(isPreserving);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_onreadystatechange(TVariantInParam Param1/*[in]*/)
{
  return (*this)->set_onreadystatechange(Param1);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_ondataavailable(TVariantInParam Param1/*[in]*/)
{
  return (*this)->set_ondataavailable(Param1);
}

template <class T> HRESULT __fastcall
TCOMIXMLDOMDocumentT<T>::set_ontransformnode(TVariantInParam Param1/*[in]*/)
{
  return (*this)->set_ontransformnode(Param1);
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocument
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF81-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_doctype(Msxml_tlb::IXMLDOMDocumentTypePtr* documentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doctype"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocumentType**)documentType /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentTypePtr __fastcall
IXMLDOMDocumentDispT<T>::get_doctype(void)
{
  Msxml_tlb::IXMLDOMDocumentTypePtr documentType;
  this->get_doctype((Msxml_tlb::IXMLDOMDocumentTypePtr*)&documentType);
  return documentType;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_implementation(Msxml_tlb::IXMLDOMImplementationPtr* impl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("implementation"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMImplementation**)impl /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMImplementationPtr __fastcall
IXMLDOMDocumentDispT<T>::get_implementation(void)
{
  Msxml_tlb::IXMLDOMImplementationPtr impl;
  this->get_implementation((Msxml_tlb::IXMLDOMImplementationPtr*)&impl);
  return impl;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_documentElement(Msxml_tlb::IXMLDOMElementPtr* DOMElement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMElement**)DOMElement /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMElementPtr __fastcall
IXMLDOMDocumentDispT<T>::get_documentElement(void)
{
  Msxml_tlb::IXMLDOMElementPtr DOMElement;
  this->get_documentElement((Msxml_tlb::IXMLDOMElementPtr*)&DOMElement);
  return DOMElement;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::_set_documentElement(Msxml_tlb::IXMLDOMElementPtr DOMElement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("documentElement"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMElement*)DOMElement /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createElement(BSTR tagName/*[in]*/, 
                                       Msxml_tlb::IXMLDOMElementPtr* element/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createElement"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMElement**)element /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMElementPtr __fastcall
IXMLDOMDocumentDispT<T>::createElement(BSTR tagName/*[in]*/)
{
  Msxml_tlb::IXMLDOMElementPtr element;
  this->createElement(tagName, (Msxml_tlb::IXMLDOMElementPtr*)&element);
  return element;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createDocumentFragment(Msxml_tlb::IXMLDOMDocumentFragmentPtr* docFrag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createDocumentFragment"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocumentFragment**)docFrag /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentFragmentPtr __fastcall
IXMLDOMDocumentDispT<T>::createDocumentFragment(void)
{
  Msxml_tlb::IXMLDOMDocumentFragmentPtr docFrag;
  this->createDocumentFragment((Msxml_tlb::IXMLDOMDocumentFragmentPtr*)&docFrag);
  return docFrag;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createTextNode(BSTR data/*[in]*/, 
                                        Msxml_tlb::IXMLDOMTextPtr* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createTextNode"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMText**)text /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMTextPtr __fastcall
IXMLDOMDocumentDispT<T>::createTextNode(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMTextPtr text;
  this->createTextNode(data, (Msxml_tlb::IXMLDOMTextPtr*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createComment(BSTR data/*[in]*/, 
                                       Msxml_tlb::IXMLDOMCommentPtr* comment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createComment"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMComment**)comment /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMCommentPtr __fastcall
IXMLDOMDocumentDispT<T>::createComment(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMCommentPtr comment;
  this->createComment(data, (Msxml_tlb::IXMLDOMCommentPtr*)&comment);
  return comment;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createCDATASection(BSTR data/*[in]*/, 
                                            Msxml_tlb::IXMLDOMCDATASectionPtr* cdata/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createCDATASection"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMCDATASection**)cdata /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMCDATASectionPtr __fastcall
IXMLDOMDocumentDispT<T>::createCDATASection(BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMCDATASectionPtr cdata;
  this->createCDATASection(data, (Msxml_tlb::IXMLDOMCDATASectionPtr*)&cdata);
  return cdata;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/, 
                                                     Msxml_tlb::IXMLDOMProcessingInstructionPtr* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createProcessingInstruction"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = target /*[VT_BSTR:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMProcessingInstruction**)pi /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMProcessingInstructionPtr __fastcall
IXMLDOMDocumentDispT<T>::createProcessingInstruction(BSTR target/*[in]*/, BSTR data/*[in]*/)
{
  Msxml_tlb::IXMLDOMProcessingInstructionPtr pi;
  this->createProcessingInstruction(target, data, (Msxml_tlb::IXMLDOMProcessingInstructionPtr*)&pi);
  return pi;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createAttribute(BSTR name/*[in]*/, 
                                         Msxml_tlb::IXMLDOMAttributePtr* attribute/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createAttribute"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMAttribute**)attribute /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMAttributePtr __fastcall
IXMLDOMDocumentDispT<T>::createAttribute(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMAttributePtr attribute;
  this->createAttribute(name, (Msxml_tlb::IXMLDOMAttributePtr*)&attribute);
  return attribute;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createEntityReference(BSTR name/*[in]*/, 
                                               Msxml_tlb::IXMLDOMEntityReferencePtr* entityRef/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createEntityReference"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMEntityReference**)entityRef /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMEntityReferencePtr __fastcall
IXMLDOMDocumentDispT<T>::createEntityReference(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMEntityReferencePtr entityRef;
  this->createEntityReference(name, (Msxml_tlb::IXMLDOMEntityReferencePtr*)&entityRef);
  return entityRef;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getElementsByTagName"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->getElementsByTagName(tagName, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createNode"), DISPID(54));
  TAutoArgs<3> _args;
  _args[1] = type /*[VT_VARIANT:0]*/;
  _args[2] = name /*[VT_BSTR:0]*/;
  _args[3] = namespaceURI /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::createNode(TVariantInParam type/*[in]*/, BSTR name/*[in]*/, 
                                    BSTR namespaceURI/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr node;
  this->createNode(type, name, namespaceURI, (Msxml_tlb::IXMLDOMNodePtr*)&node);
  return node;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::nodeFromID(BSTR idString/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* node/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeFromID"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = idString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)node /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::nodeFromID(BSTR idString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr node;
  this->nodeFromID(idString, (Msxml_tlb::IXMLDOMNodePtr*)&node);
  return node;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::load(TVariantInParam xmlSource/*[in]*/, 
                              TOLEBOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("load"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = xmlSource /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::load(TVariantInParam xmlSource/*[in]*/)
{
  TOLEBOOL isSuccessful;
  this->load(xmlSource, (TOLEBOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_readyState(long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMDocumentDispT<T>::get_readyState(void)
{
  long value;
  this->get_readyState((long*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_parseError(Msxml_tlb::IXMLDOMParseErrorPtr* errorObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parseError"), DISPID(59));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMParseError**)errorObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMParseErrorPtr __fastcall
IXMLDOMDocumentDispT<T>::get_parseError(void)
{
  Msxml_tlb::IXMLDOMParseErrorPtr errorObj;
  this->get_parseError((Msxml_tlb::IXMLDOMParseErrorPtr*)&errorObj);
  return errorObj;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(urlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_url(void)
{
  BSTR urlString;
  this->get_url((BSTR*)&urlString);
  return urlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_async(TOLEBOOL* isAsync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isAsync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_async(void)
{
  TOLEBOOL isAsync;
  this->get_async((TOLEBOOL*)&isAsync);
  return isAsync;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_async(TOLEBOOL isAsync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("async"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = isAsync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(62));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::loadXML(BSTR bstrXML/*[in]*/, TOLEBOOL* isSuccessful/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("loadXML"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = bstrXML /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(isSuccessful /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::loadXML(BSTR bstrXML/*[in]*/)
{
  TOLEBOOL isSuccessful;
  this->loadXML(bstrXML, (TOLEBOOL*)&isSuccessful);
  return isSuccessful;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::save(TVariantInParam desination/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("save"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = desination /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_validateOnParse(TOLEBOOL* isValidating/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isValidating /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_validateOnParse(void)
{
  TOLEBOOL isValidating;
  this->get_validateOnParse((TOLEBOOL*)&isValidating);
  return isValidating;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_validateOnParse(TOLEBOOL isValidating/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("validateOnParse"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = isValidating /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_resolveExternals(TOLEBOOL* isResolving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isResolving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_resolveExternals(void)
{
  TOLEBOOL isResolving;
  this->get_resolveExternals((TOLEBOOL*)&isResolving);
  return isResolving;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_resolveExternals(TOLEBOOL isResolving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("resolveExternals"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = isResolving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_preserveWhiteSpace(TOLEBOOL* isPreserving/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isPreserving /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_preserveWhiteSpace(void)
{
  TOLEBOOL isPreserving;
  this->get_preserveWhiteSpace((TOLEBOOL*)&isPreserving);
  return isPreserving;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_preserveWhiteSpace(TOLEBOOL isPreserving/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("preserveWhiteSpace"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = isPreserving /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_onreadystatechange(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_ondataavailable(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ondataavailable"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_ontransformnode(TVariantInParam Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ontransformnode"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMDocumentDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMDocumentDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      TVariantInParam refChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMDocumentDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                   Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                       BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                               TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentType
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8B-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_name(BSTR* rootName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(rootName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_name(void)
{
  BSTR rootName;
  this->get_name((BSTR*)&rootName);
  return rootName;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_entities(Msxml_tlb::IXMLDOMNamedNodeMapPtr* entityMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("entities"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)entityMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_entities(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr entityMap;
  this->get_entities((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&entityMap);
  return entityMap;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_notations(Msxml_tlb::IXMLDOMNamedNodeMapPtr* notationMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notations"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)notationMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_notations(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr notationMap;
  this->get_notations((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&notationMap);
  return notationMap;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentTypeDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentTypeDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentTypeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentTypeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentTypeDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentTypeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentTypeDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMElement
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF86-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_tagName(BSTR* tagName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(tagName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_tagName(void)
{
  BSTR tagName;
  this->get_tagName((BSTR*)&tagName);
  return tagName;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::getAttribute(BSTR name/*[in]*/, TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMElementDispT<T>::getAttribute(BSTR name/*[in]*/)
{
  TVariant value;
  this->getAttribute(name, (TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::setAttribute(BSTR name/*[in]*/, TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  _args[2] = value /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::removeAttribute(BSTR name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::getAttributeNode(BSTR name/*[in]*/, 
                                         Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttributeNode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = name /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMAttributePtr __fastcall
IXMLDOMElementDispT<T>::getAttributeNode(BSTR name/*[in]*/)
{
  Msxml_tlb::IXMLDOMAttributePtr attributeNode;
  this->getAttributeNode(name, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/, 
                                         Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttributeNode"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMAttribute*)DOMAttribute /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMAttributePtr __fastcall
IXMLDOMElementDispT<T>::setAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/)
{
  Msxml_tlb::IXMLDOMAttributePtr attributeNode;
  this->setAttributeNode(DOMAttribute, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/, 
                                            Msxml_tlb::IXMLDOMAttributePtr* attributeNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttributeNode"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMAttribute*)DOMAttribute /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMAttribute**)attributeNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMAttributePtr __fastcall
IXMLDOMElementDispT<T>::removeAttributeNode(Msxml_tlb::IXMLDOMAttributePtr DOMAttribute/*[in]*/)
{
  Msxml_tlb::IXMLDOMAttributePtr attributeNode;
  this->removeAttributeNode(DOMAttribute, (Msxml_tlb::IXMLDOMAttributePtr*)&attributeNode);
  return attributeNode;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getElementsByTagName"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = tagName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMElementDispT<T>::getElementsByTagName(BSTR tagName/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->getElementsByTagName(tagName, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::normalize()
{
  _TDispID _dispid(*this, OLETEXT("normalize"), DISPID(106));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMElementDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMElementDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMElementDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMElementDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     TVariantInParam refChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMElementDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMElementDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMElementDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMElementDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMElementDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                      BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMElementDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMElementDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMElementDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMElementDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMElementDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                              TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMAttribute
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF85-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_name(BSTR* attributeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(attributeName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_name(void)
{
  BSTR attributeName;
  this->get_name((BSTR*)&attributeName);
  return attributeName;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_value(TVariant* attributeValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(attributeValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMAttributeDispT<T>::get_value(void)
{
  TVariant attributeValue;
  this->get_value((TVariant*)&attributeValue);
  return attributeValue;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::set_value(TVariantInParam attributeValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = attributeValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMAttributeDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMAttributeDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMAttributeDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMAttributeDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                       TVariantInParam refChild/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                       TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMAttributeDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMAttributeDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMAttributeDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMAttributeDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMAttributeDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                        BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMAttributeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMAttributeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMAttributeDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMAttributeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMAttributeDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMDocumentFragment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA413-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                              TVariantInParam refChild/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                              TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                               BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMDocumentFragmentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMDocumentFragmentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMDocumentFragmentDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/
                                                       , TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMCharacterData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF84-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCharacterDataDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                            BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                           TVariantInParam refChild/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                           TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                           Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCharacterDataDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCharacterDataDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCharacterDataDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCharacterDataDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                            BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCharacterDataDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                               Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCharacterDataDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCharacterDataDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCharacterDataDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMCharacterDataDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                    TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMText
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF87-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_0_0()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_0_0"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_4_1()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_4_1"), DISPID(DISPID_UNKNOWN/*[1610678273]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_8_2()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_8_2"), DISPID(DISPID_UNKNOWN/*[1610678274]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_12_3()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_12_3"), DISPID(DISPID_UNKNOWN/*[1610678275]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_16_4()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_16_4"), DISPID(DISPID_UNKNOWN/*[1610678276]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_20_5()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_20_5"), DISPID(DISPID_UNKNOWN/*[1610678277]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_24_6()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_24_6"), DISPID(DISPID_UNKNOWN/*[1610678278]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_28_7()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_28_7"), DISPID(DISPID_UNKNOWN/*[1610678279]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_32_8()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_32_8"), DISPID(DISPID_UNKNOWN/*[1610678280]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_36_9()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_36_9"), DISPID(DISPID_UNKNOWN/*[1610678281]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_40_10()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_40_10"), DISPID(DISPID_UNKNOWN/*[1610678282]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_44_11()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_44_11"), DISPID(DISPID_UNKNOWN/*[1610678283]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_48_12()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_48_12"), DISPID(DISPID_UNKNOWN/*[1610678284]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_52_13()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_52_13"), DISPID(DISPID_UNKNOWN/*[1610678285]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_56_14()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_56_14"), DISPID(DISPID_UNKNOWN/*[1610678286]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_60_15()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_60_15"), DISPID(DISPID_UNKNOWN/*[1610678287]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_64_16()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_64_16"), DISPID(DISPID_UNKNOWN/*[1610678288]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_68_17()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_68_17"), DISPID(DISPID_UNKNOWN/*[1610678289]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_72_18()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_72_18"), DISPID(DISPID_UNKNOWN/*[1610678290]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_76_19()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_76_19"), DISPID(DISPID_UNKNOWN/*[1610678291]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_80_20()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_80_20"), DISPID(DISPID_UNKNOWN/*[1610678292]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_84_21()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_84_21"), DISPID(DISPID_UNKNOWN/*[1610678293]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_88_22()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_88_22"), DISPID(DISPID_UNKNOWN/*[1610678294]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_92_23()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_92_23"), DISPID(DISPID_UNKNOWN/*[1610678295]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_96_24()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_96_24"), DISPID(DISPID_UNKNOWN/*[1610678296]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_100_25()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_100_25"), DISPID(DISPID_UNKNOWN/*[1610678297]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_104_26()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_104_26"), DISPID(DISPID_UNKNOWN/*[1610678298]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_108_27()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_108_27"), DISPID(DISPID_UNKNOWN/*[1610678299]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_112_28()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_112_28"), DISPID(DISPID_UNKNOWN/*[1610678300]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_116_29()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_116_29"), DISPID(DISPID_UNKNOWN/*[1610678301]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_120_30()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_120_30"), DISPID(DISPID_UNKNOWN/*[1610678302]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_124_31()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_124_31"), DISPID(DISPID_UNKNOWN/*[1610678303]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_128_32()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_128_32"), DISPID(DISPID_UNKNOWN/*[1610678304]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_132_33()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_132_33"), DISPID(DISPID_UNKNOWN/*[1610678305]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_136_34()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_136_34"), DISPID(DISPID_UNKNOWN/*[1610678306]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_140_35()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_140_35"), DISPID(DISPID_UNKNOWN/*[1610678307]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_144_36()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_144_36"), DISPID(DISPID_UNKNOWN/*[1610678308]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_148_37()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_148_37"), DISPID(DISPID_UNKNOWN/*[1610678309]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_152_38()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_152_38"), DISPID(DISPID_UNKNOWN/*[1610678310]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_156_39()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_156_39"), DISPID(DISPID_UNKNOWN/*[1610678311]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_160_40()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_160_40"), DISPID(DISPID_UNKNOWN/*[1610678312]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_164_41()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_164_41"), DISPID(DISPID_UNKNOWN/*[1610678313]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_168_42()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_168_42"), DISPID(DISPID_UNKNOWN/*[1610678314]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_172_43()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_172_43"), DISPID(DISPID_UNKNOWN/*[1610678315]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_176_44()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_176_44"), DISPID(DISPID_UNKNOWN/*[1610678316]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_180_45()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_180_45"), DISPID(DISPID_UNKNOWN/*[1610678317]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_184_46()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_184_46"), DISPID(DISPID_UNKNOWN/*[1610678318]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_188_47()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_188_47"), DISPID(DISPID_UNKNOWN/*[1610678319]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_192_48()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_192_48"), DISPID(DISPID_UNKNOWN/*[1610678320]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_196_49()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_196_49"), DISPID(DISPID_UNKNOWN/*[1610678321]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::GhostMethod_IXMLDOMText_200_50()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_200_50"), DISPID(DISPID_UNKNOWN/*[1610678322]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::splitText(long offset/*[in]*/, 
                               Msxml_tlb::IXMLDOMTextPtr* rightHandTextNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("splitText"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMText**)rightHandTextNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMTextPtr __fastcall
IXMLDOMTextDispT<T>::splitText(long offset/*[in]*/)
{
  Msxml_tlb::IXMLDOMTextPtr rightHandTextNode;
  this->splitText(offset, (Msxml_tlb::IXMLDOMTextPtr*)&rightHandTextNode);
  return rightHandTextNode;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMTextDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                   BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMTextDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMTextDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMTextDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMTextDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMTextDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMTextDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                               Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMTextDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMTextDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMTextDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMTextDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMTextDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMTextDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMTextDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMTextDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMComment
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF88-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCommentDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                      BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCommentDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMCommentDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCommentDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMCommentDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     TVariantInParam refChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCommentDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMCommentDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCommentDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCommentDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCommentDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                      BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCommentDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCommentDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCommentDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCommentDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMCommentDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                              TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMCDATASection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8A-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_0_0()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_0_0"), DISPID(DISPID_UNKNOWN/*[1610678272]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_4_1()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_4_1"), DISPID(DISPID_UNKNOWN/*[1610678273]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_8_2()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_8_2"), DISPID(DISPID_UNKNOWN/*[1610678274]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_12_3()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_12_3"), DISPID(DISPID_UNKNOWN/*[1610678275]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_16_4()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_16_4"), DISPID(DISPID_UNKNOWN/*[1610678276]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_20_5()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_20_5"), DISPID(DISPID_UNKNOWN/*[1610678277]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_24_6()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_24_6"), DISPID(DISPID_UNKNOWN/*[1610678278]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_28_7()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_28_7"), DISPID(DISPID_UNKNOWN/*[1610678279]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_32_8()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_32_8"), DISPID(DISPID_UNKNOWN/*[1610678280]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_36_9()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_36_9"), DISPID(DISPID_UNKNOWN/*[1610678281]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_40_10()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_40_10"), DISPID(DISPID_UNKNOWN/*[1610678282]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_44_11()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_44_11"), DISPID(DISPID_UNKNOWN/*[1610678283]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_48_12()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_48_12"), DISPID(DISPID_UNKNOWN/*[1610678284]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_52_13()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_52_13"), DISPID(DISPID_UNKNOWN/*[1610678285]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_56_14()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_56_14"), DISPID(DISPID_UNKNOWN/*[1610678286]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_60_15()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_60_15"), DISPID(DISPID_UNKNOWN/*[1610678287]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_64_16()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_64_16"), DISPID(DISPID_UNKNOWN/*[1610678288]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_68_17()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_68_17"), DISPID(DISPID_UNKNOWN/*[1610678289]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_72_18()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_72_18"), DISPID(DISPID_UNKNOWN/*[1610678290]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_76_19()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_76_19"), DISPID(DISPID_UNKNOWN/*[1610678291]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_80_20()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_80_20"), DISPID(DISPID_UNKNOWN/*[1610678292]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_84_21()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_84_21"), DISPID(DISPID_UNKNOWN/*[1610678293]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_88_22()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_88_22"), DISPID(DISPID_UNKNOWN/*[1610678294]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_92_23()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_92_23"), DISPID(DISPID_UNKNOWN/*[1610678295]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_96_24()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_96_24"), DISPID(DISPID_UNKNOWN/*[1610678296]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_100_25()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_100_25"), DISPID(DISPID_UNKNOWN/*[1610678297]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_104_26()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_104_26"), DISPID(DISPID_UNKNOWN/*[1610678298]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_108_27()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_108_27"), DISPID(DISPID_UNKNOWN/*[1610678299]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_112_28()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_112_28"), DISPID(DISPID_UNKNOWN/*[1610678300]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_116_29()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_116_29"), DISPID(DISPID_UNKNOWN/*[1610678301]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_120_30()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_120_30"), DISPID(DISPID_UNKNOWN/*[1610678302]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_124_31()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_124_31"), DISPID(DISPID_UNKNOWN/*[1610678303]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_128_32()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_128_32"), DISPID(DISPID_UNKNOWN/*[1610678304]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_132_33()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_132_33"), DISPID(DISPID_UNKNOWN/*[1610678305]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_136_34()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_136_34"), DISPID(DISPID_UNKNOWN/*[1610678306]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_140_35()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_140_35"), DISPID(DISPID_UNKNOWN/*[1610678307]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_144_36()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_144_36"), DISPID(DISPID_UNKNOWN/*[1610678308]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_148_37()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_148_37"), DISPID(DISPID_UNKNOWN/*[1610678309]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_152_38()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_152_38"), DISPID(DISPID_UNKNOWN/*[1610678310]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_156_39()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_156_39"), DISPID(DISPID_UNKNOWN/*[1610678311]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_160_40()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_160_40"), DISPID(DISPID_UNKNOWN/*[1610678312]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_164_41()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_164_41"), DISPID(DISPID_UNKNOWN/*[1610678313]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_168_42()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_168_42"), DISPID(DISPID_UNKNOWN/*[1610678314]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_172_43()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_172_43"), DISPID(DISPID_UNKNOWN/*[1610678315]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_176_44()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_176_44"), DISPID(DISPID_UNKNOWN/*[1610678316]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_180_45()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_180_45"), DISPID(DISPID_UNKNOWN/*[1610678317]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_184_46()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_184_46"), DISPID(DISPID_UNKNOWN/*[1610678318]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_188_47()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_188_47"), DISPID(DISPID_UNKNOWN/*[1610678319]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_192_48()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_192_48"), DISPID(DISPID_UNKNOWN/*[1610678320]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_196_49()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_196_49"), DISPID(DISPID_UNKNOWN/*[1610678321]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::GhostMethod_IXMLDOMText_200_50()
{
  _TDispID _dispid(*this, OLETEXT("GhostMethod_IXMLDOMText_200_50"), DISPID(DISPID_UNKNOWN/*[1610678322]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::splitText(long offset/*[in]*/, 
                                       Msxml_tlb::IXMLDOMTextPtr* rightHandTextNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("splitText"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMText**)rightHandTextNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMTextPtr __fastcall
IXMLDOMCDATASectionDispT<T>::splitText(long offset/*[in]*/)
{
  Msxml_tlb::IXMLDOMTextPtr rightHandTextNode;
  this->splitText(offset, (Msxml_tlb::IXMLDOMTextPtr*)&rightHandTextNode);
  return rightHandTextNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_data(BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_data(void)
{
  BSTR data;
  this->get_data((BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::set_data(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_length(long* dataLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMCDATASectionDispT<T>::get_length(void)
{
  long dataLength;
  this->get_length((long*)&dataLength);
  return dataLength;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/, 
                                           BSTR* data/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("substringData"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(data /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::substringData(long offset/*[in]*/, long count/*[in]*/)
{
  BSTR data;
  this->substringData(offset, count, (BSTR*)&data);
  return data;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::appendData(BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendData"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::insertData(long offset/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertData"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::deleteData(long offset/*[in]*/, long count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("deleteData"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::replaceData(long offset/*[in]*/, long count/*[in]*/, BSTR data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceData"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = offset /*[VT_I4:0]*/;
  _args[2] = count /*[VT_I4:0]*/;
  _args[3] = data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCDATASectionDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                       Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCDATASectionDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCDATASectionDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMCDATASectionDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMCDATASectionDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                              Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMCDATASectionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMCDATASectionDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMCDATASectionDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMCDATASectionDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                   TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMProcessingInstruction
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF89-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_target(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("target"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_target(void)
{
  BSTR name;
  this->get_target((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_data(BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_data(void)
{
  BSTR value;
  this->get_data((BSTR*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_data(BSTR value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("data"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                   TVariantInParam refChild/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                   TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                   Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                                Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                    BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                                  Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                       Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMProcessingInstructionDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMProcessingInstructionDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMProcessingInstructionDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/
                                                            , TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMEntityReference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8E-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                             TVariantInParam refChild/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                             TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                             Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                            Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                            Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityReferenceDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityReferenceDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                              BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                            Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMEntityReferenceDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                                 Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityReferenceDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityReferenceDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityReferenceDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityReferenceDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                                      TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMParseError
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA426-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_errorCode(long* errorCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("errorCode"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(errorCode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_errorCode(void)
{
  long errorCode;
  this->get_errorCode((long*)&errorCode);
  return errorCode;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_url(BSTR* urlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(179));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(urlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_url(void)
{
  BSTR urlString;
  this->get_url((BSTR*)&urlString);
  return urlString;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_reason(BSTR* reasonString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("reason"), DISPID(180));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(reasonString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_reason(void)
{
  BSTR reasonString;
  this->get_reason((BSTR*)&reasonString);
  return reasonString;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_srcText(BSTR* sourceString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("srcText"), DISPID(181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(sourceString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMParseErrorDispT<T>::get_srcText(void)
{
  BSTR sourceString;
  this->get_srcText((BSTR*)&sourceString);
  return sourceString;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_line(long* lineNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("line"), DISPID(182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lineNumber /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_line(void)
{
  long lineNumber;
  this->get_line((long*)&lineNumber);
  return lineNumber;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_linepos(long* linePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("linepos"), DISPID(183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(linePosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_linepos(void)
{
  long linePosition;
  this->get_linepos((long*)&linePosition);
  return linePosition;
}

template <class T> HRESULT __fastcall
IXMLDOMParseErrorDispT<T>::get_filepos(long* filePosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("filepos"), DISPID(184));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(filePosition /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDOMParseErrorDispT<T>::get_filepos(void)
{
  long filePosition;
  this->get_filepos((long*)&filePosition);
  return filePosition;
}

// *********************************************************************//
// DispIntf:  IXMLDOMNotation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8C-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_publicId(TVariant* publicId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publicId"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(publicId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNotationDispT<T>::get_publicId(void)
{
  TVariant publicId;
  this->get_publicId((TVariant*)&publicId);
  return publicId;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_systemId(TVariant* systemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("systemId"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(systemId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNotationDispT<T>::get_systemId(void)
{
  TVariant systemId;
  this->get_systemId((TVariant*)&systemId);
  return systemId;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNotationDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMNotationDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMNotationDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMNotationDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      TVariantInParam refChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNotationDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMNotationDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                   Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNotationDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNotationDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMNotationDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                       BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                     Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMNotationDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                          Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMNotationDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMNotationDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMNotationDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMNotationDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                               TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLDOMEntity
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2933BF8D-7B36-11D2-B20E-00C04F983E60}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_publicId(TVariant* publicId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("publicId"), DISPID(140));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(publicId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityDispT<T>::get_publicId(void)
{
  TVariant publicId;
  this->get_publicId((TVariant*)&publicId);
  return publicId;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_systemId(TVariant* systemId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("systemId"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(systemId /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityDispT<T>::get_systemId(void)
{
  TVariant systemId;
  this->get_systemId((TVariant*)&systemId);
  return systemId;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_notationName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("notationName"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_notationName(void)
{
  BSTR name;
  this->get_notationName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXMLDOMEntityDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMEntityDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXMLDOMEntityDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    TVariantInParam refChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                    Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                   Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                   Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDOMEntityDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLDOMEntityDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                     BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                   Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXMLDOMEntityDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                        Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXMLDOMEntityDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXMLDOMEntityDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDOMEntityDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXMLDOMEntityDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                             TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXTLRuntime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EFAA425-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, long* pID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("uniqueID"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::uniqueID(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
{
  long pID;
  this->uniqueID(pNode, (long*)&pID);
  return pID;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, long* pDepth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("depth"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pDepth /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::depth(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
{
  long pDepth;
  this->depth(pNode, (long*)&pDepth);
  return pDepth;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                 long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNumber"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::childNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
{
  long pNumber;
  this->childNumber(pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                         long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ancestorChildNumber"), DISPID(190));
  TAutoArgs<2> _args;
  _args[1] = bstrNodeName /*[VT_BSTR:0]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::ancestorChildNumber(BSTR bstrNodeName/*[in]*/, 
                                         Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
{
  long pNumber;
  this->ancestorChildNumber(bstrNodeName, pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/, 
                                         long* pNumber/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("absoluteChildNumber"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)pNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pNumber /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IXTLRuntimeDispT<T>::absoluteChildNumber(Msxml_tlb::IXMLDOMNodePtr pNode/*[in]*/)
{
  long pNumber;
  this->absoluteChildNumber(pNode, (long*)&pNumber);
  return pNumber;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                 BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatIndex"), DISPID(192));
  TAutoArgs<2> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatIndex(long lIndex/*[in]*/, BSTR bstrFormat/*[in]*/)
{
  BSTR pbstrFormattedString;
  this->formatIndex(lIndex, bstrFormat, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                  BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatNumber"), DISPID(193));
  TAutoArgs<2> _args;
  _args[1] = dblNumber /*[VT_R8:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatNumber(double dblNumber/*[in]*/, BSTR bstrFormat/*[in]*/)
{
  BSTR pbstrFormattedString;
  this->formatNumber(dblNumber, bstrFormat, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::formatDate(TVariantInParam varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                TVariantInParam varDestLocale/*[in,opt]*/, 
                                BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatDate"), DISPID(194));
  TAutoArgs<3> _args;
  _args[1] = varDate /*[VT_VARIANT:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  _args[3] = varDestLocale /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatDate(TVariantInParam varDate/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                TVariantInParam varDestLocale/*[in,opt]*/)
{
  BSTR pbstrFormattedString;
  this->formatDate(varDate, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::formatTime(TVariantInParam varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                TVariantInParam varDestLocale/*[in,opt]*/, 
                                BSTR* pbstrFormattedString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("formatTime"), DISPID(195));
  TAutoArgs<3> _args;
  _args[1] = varTime /*[VT_VARIANT:0]*/;
  _args[2] = bstrFormat /*[VT_BSTR:0]*/;
  _args[3] = varDestLocale /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pbstrFormattedString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::formatTime(TVariantInParam varTime/*[in]*/, BSTR bstrFormat/*[in]*/, 
                                TVariantInParam varDestLocale/*[in,opt]*/)
{
  BSTR pbstrFormattedString;
  this->formatTime(varTime, bstrFormat, varDestLocale, (BSTR*)&pbstrFormattedString);
  return pbstrFormattedString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nodeName(BSTR* name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeName"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_nodeName(void)
{
  BSTR name;
  this->get_nodeName((BSTR*)&name);
  return name;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nodeValue(TVariant* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(value /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXTLRuntimeDispT<T>::get_nodeValue(void)
{
  TVariant value;
  this->get_nodeValue((TVariant*)&value);
  return value;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::set_nodeValue(TVariantInParam value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeValue"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = value /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nodeType(Msxml_tlb::DOMNodeType* type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeType"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::DOMNodeType __fastcall
IXTLRuntimeDispT<T>::get_nodeType(void)
{
  Msxml_tlb::DOMNodeType type;
  this->get_nodeType((Msxml_tlb::DOMNodeType*)&type);
  return type;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_parentNode(Msxml_tlb::IXMLDOMNodePtr* parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parentNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)parent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_parentNode(void)
{
  Msxml_tlb::IXMLDOMNodePtr parent;
  this->get_parentNode((Msxml_tlb::IXMLDOMNodePtr*)&parent);
  return parent;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_childNodes(Msxml_tlb::IXMLDOMNodeListPtr* childList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("childNodes"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)childList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXTLRuntimeDispT<T>::get_childNodes(void)
{
  Msxml_tlb::IXMLDOMNodeListPtr childList;
  this->get_childNodes((Msxml_tlb::IXMLDOMNodeListPtr*)&childList);
  return childList;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_firstChild(Msxml_tlb::IXMLDOMNodePtr* firstChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("firstChild"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)firstChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_firstChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr firstChild;
  this->get_firstChild((Msxml_tlb::IXMLDOMNodePtr*)&firstChild);
  return firstChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_lastChild(Msxml_tlb::IXMLDOMNodePtr* lastChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("lastChild"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)lastChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_lastChild(void)
{
  Msxml_tlb::IXMLDOMNodePtr lastChild;
  this->get_lastChild((Msxml_tlb::IXMLDOMNodePtr*)&lastChild);
  return lastChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_previousSibling(Msxml_tlb::IXMLDOMNodePtr* previousSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("previousSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)previousSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_previousSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr previousSibling;
  this->get_previousSibling((Msxml_tlb::IXMLDOMNodePtr*)&previousSibling);
  return previousSibling;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nextSibling(Msxml_tlb::IXMLDOMNodePtr* nextSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nextSibling"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)nextSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_nextSibling(void)
{
  Msxml_tlb::IXMLDOMNodePtr nextSibling;
  this->get_nextSibling((Msxml_tlb::IXMLDOMNodePtr*)&nextSibling);
  return nextSibling;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_attributes(Msxml_tlb::IXMLDOMNamedNodeMapPtr* attributeMap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNamedNodeMap**)attributeMap /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNamedNodeMapPtr __fastcall
IXTLRuntimeDispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLDOMNamedNodeMapPtr attributeMap;
  this->get_attributes((Msxml_tlb::IXMLDOMNamedNodeMapPtr*)&attributeMap);
  return attributeMap;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("insertBefore"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = refChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::insertBefore(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  TVariantInParam refChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->insertBefore(newChild, refChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr* outOldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("replaceChild"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)oldChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outOldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::replaceChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                  Msxml_tlb::IXMLDOMNodePtr oldChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outOldChild;
  this->replaceChild(newChild, oldChild, (Msxml_tlb::IXMLDOMNodePtr*)&outOldChild);
  return outOldChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* oldChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)childNode /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)oldChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::removeChild(Msxml_tlb::IXMLDOMNodePtr childNode/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr oldChild;
  this->removeChild(childNode, (Msxml_tlb::IXMLDOMNodePtr*)&oldChild);
  return oldChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodePtr* outNewChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("appendChild"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)newChild /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)outNewChild /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::appendChild(Msxml_tlb::IXMLDOMNodePtr newChild/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr outNewChild;
  this->appendChild(newChild, (Msxml_tlb::IXMLDOMNodePtr*)&outNewChild);
  return outNewChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::hasChildNodes(TOLEBOOL* hasChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hasChildNodes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(hasChild /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXTLRuntimeDispT<T>::hasChildNodes(void)
{
  TOLEBOOL hasChild;
  this->hasChildNodes((TOLEBOOL*)&hasChild);
  return hasChild;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_ownerDocument(Msxml_tlb::IXMLDOMDocumentPtr* DOMDocument/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ownerDocument"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)DOMDocument /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXTLRuntimeDispT<T>::get_ownerDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr DOMDocument;
  this->get_ownerDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&DOMDocument);
  return DOMDocument;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/, 
                               Msxml_tlb::IXMLDOMNodePtr* cloneRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("cloneNode"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = deep /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)cloneRoot /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::cloneNode(TOLEBOOL deep/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr cloneRoot;
  this->cloneNode(deep, (Msxml_tlb::IXMLDOMNodePtr*)&cloneRoot);
  return cloneRoot;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nodeTypeString(BSTR* nodeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypeString"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nodeType /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_nodeTypeString(void)
{
  BSTR nodeType;
  this->get_nodeTypeString((BSTR*)&nodeType);
  return nodeType;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_text(BSTR* text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_text(void)
{
  BSTR text;
  this->get_text((BSTR*)&text);
  return text;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::set_text(BSTR text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_specified(TOLEBOOL* isSpecified/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("specified"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isSpecified /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXTLRuntimeDispT<T>::get_specified(void)
{
  TOLEBOOL isSpecified;
  this->get_specified((TOLEBOOL*)&isSpecified);
  return isSpecified;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_definition(Msxml_tlb::IXMLDOMNodePtr* definitionNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("definition"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)definitionNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::get_definition(void)
{
  Msxml_tlb::IXMLDOMNodePtr definitionNode;
  this->get_definition((Msxml_tlb::IXMLDOMNodePtr*)&definitionNode);
  return definitionNode;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_nodeTypedValue(TVariant* typedValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(typedValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXTLRuntimeDispT<T>::get_nodeTypedValue(void)
{
  TVariant typedValue;
  this->get_nodeTypedValue((TVariant*)&typedValue);
  return typedValue;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::set_nodeTypedValue(TVariantInParam typedValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("nodeTypedValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = typedValue /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_dataType(TVariant* dataTypeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(dataTypeName /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXTLRuntimeDispT<T>::get_dataType(void)
{
  TVariant dataTypeName;
  this->get_dataType((TVariant*)&dataTypeName);
  return dataTypeName;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::set_dataType(BSTR dataTypeName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("dataType"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = dataTypeName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_xml(BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("xml"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_xml(void)
{
  BSTR xmlString;
  this->get_xml((BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                   BSTR* xmlString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNode"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(xmlString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::transformNode(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/)
{
  BSTR xmlString;
  this->transformNode(stylesheet, (BSTR*)&xmlString);
  return xmlString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::selectNodes(BSTR queryString/*[in]*/, 
                                 Msxml_tlb::IXMLDOMNodeListPtr* resultList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectNodes"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNodeList**)resultList /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodeListPtr __fastcall
IXTLRuntimeDispT<T>::selectNodes(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodeListPtr resultList;
  this->selectNodes(queryString, (Msxml_tlb::IXMLDOMNodeListPtr*)&resultList);
  return resultList;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/, 
                                      Msxml_tlb::IXMLDOMNodePtr* resultNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("selectSingleNode"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = queryString /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMNode**)resultNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMNodePtr __fastcall
IXTLRuntimeDispT<T>::selectSingleNode(BSTR queryString/*[in]*/)
{
  Msxml_tlb::IXMLDOMNodePtr resultNode;
  this->selectSingleNode(queryString, (Msxml_tlb::IXMLDOMNodePtr*)&resultNode);
  return resultNode;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_parsed(TOLEBOOL* isParsed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parsed"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(isParsed /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
IXTLRuntimeDispT<T>::get_parsed(void)
{
  TOLEBOOL isParsed;
  this->get_parsed((TOLEBOOL*)&isParsed);
  return isParsed;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_namespaceURI(BSTR* namespaceURI/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("namespaceURI"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(namespaceURI /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_namespaceURI(void)
{
  BSTR namespaceURI;
  this->get_namespaceURI((BSTR*)&namespaceURI);
  return namespaceURI;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_prefix(BSTR* prefixString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("prefix"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(prefixString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_prefix(void)
{
  BSTR prefixString;
  this->get_prefix((BSTR*)&prefixString);
  return prefixString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::get_baseName(BSTR* nameString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("baseName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(nameString /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXTLRuntimeDispT<T>::get_baseName(void)
{
  BSTR nameString;
  this->get_baseName((BSTR*)&nameString);
  return nameString;
}

template <class T> HRESULT __fastcall
IXTLRuntimeDispT<T>::transformNodeToObject(Msxml_tlb::IXMLDOMNodePtr stylesheet/*[in]*/, 
                                           TVariantInParam outputObject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("transformNodeToObject"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMNode*)stylesheet /*[VT_USERDEFINED:1]*/;
  _args[2] = outputObject /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  XMLDOMDocumentEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3EFAA427-272F-11D2-836F-0000F87A7782}
// *********************************************************************//
template <class T> HRESULT __fastcall
XMLDOMDocumentEventsDispT<T>::ondataavailable()
{
  _TDispID _dispid(/* ondataavailable */ DISPID(198));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
XMLDOMDocumentEventsDispT<T>::onreadystatechange()
{
  _TDispID _dispid(/* onreadystatechange */ DISPID(-609));
  return OleFunction(_dispid);
}

// *********************************************************************//
// SmartIntf: TCOMIXMLHttpRequest
// Interface: IXMLHttpRequest
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                              TVariantInParam varAsync/*[in,opt]*/, 
                              TVariantInParam bstrUser/*[in,opt]*/, 
                              TVariantInParam bstrPassword/*[in,opt]*/)
{
  return (*this)->open(bstrMethod, bstrUrl, varAsync, bstrUser, bstrPassword);
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/)
{
  return (*this)->setRequestHeader(bstrHeader, bstrValue);
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/, BSTR* pbstrValue/*[out,retval]*/)
{
  return (*this)->getResponseHeader(bstrHeader, pbstrValue);
}

template <class T> BSTR __fastcall
TCOMIXMLHttpRequestT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/)
{
  BSTR pbstrValue = 0;
  OLECHECK(this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue));
  return pbstrValue;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/)
{
  return (*this)->getAllResponseHeaders(pbstrHeaders);
}

template <class T> BSTR __fastcall
TCOMIXMLHttpRequestT<T>::getAllResponseHeaders(void)
{
  BSTR pbstrHeaders = 0;
  OLECHECK(this->getAllResponseHeaders((BSTR*)&pbstrHeaders));
  return pbstrHeaders;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::send(TVariantInParam varBody/*[in,opt]*/)
{
  return (*this)->send(varBody);
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::abort(void)
{
  return (*this)->abort();
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_status(long* plStatus/*[out,retval]*/)
{
  return (*this)->get_status(plStatus);
}

template <class T> long __fastcall
TCOMIXMLHttpRequestT<T>::get_status(void)
{
  long plStatus;
  OLECHECK(this->get_status((long*)&plStatus));
  return plStatus;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_statusText(BSTR* pbstrStatus/*[out,retval]*/)
{
  return (*this)->get_statusText(pbstrStatus);
}

template <class T> BSTR __fastcall
TCOMIXMLHttpRequestT<T>::get_statusText(void)
{
  BSTR pbstrStatus = 0;
  OLECHECK(this->get_statusText((BSTR*)&pbstrStatus));
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/)
{
  return (*this)->get_responseXML(ppBody);
}

template <class T> LPDISPATCH __fastcall
TCOMIXMLHttpRequestT<T>::get_responseXML(void)
{
  LPDISPATCH ppBody;
  OLECHECK(this->get_responseXML((LPDISPATCH*)&ppBody));
  return ppBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_responseText(BSTR* pbstrBody/*[out,retval]*/)
{
  return (*this)->get_responseText(pbstrBody);
}

template <class T> BSTR __fastcall
TCOMIXMLHttpRequestT<T>::get_responseText(void)
{
  BSTR pbstrBody = 0;
  OLECHECK(this->get_responseText((BSTR*)&pbstrBody));
  return pbstrBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_responseBody(TVariant* pvarBody/*[out,retval]*/)
{
  return (*this)->get_responseBody(pvarBody);
}

template <class T> TVariant __fastcall
TCOMIXMLHttpRequestT<T>::get_responseBody(void)
{
  TVariant pvarBody;
  OLECHECK(this->get_responseBody((TVariant*)&pvarBody));
  return pvarBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_responseStream(TVariant* pvarBody/*[out,retval]*/)
{
  return (*this)->get_responseStream(pvarBody);
}

template <class T> TVariant __fastcall
TCOMIXMLHttpRequestT<T>::get_responseStream(void)
{
  TVariant pvarBody;
  OLECHECK(this->get_responseStream((TVariant*)&pvarBody));
  return pvarBody;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::get_readyState(long* plState/*[out,retval]*/)
{
  return (*this)->get_readyState(plState);
}

template <class T> long __fastcall
TCOMIXMLHttpRequestT<T>::get_readyState(void)
{
  long plState;
  OLECHECK(this->get_readyState((long*)&plState));
  return plState;
}

template <class T> HRESULT __fastcall
TCOMIXMLHttpRequestT<T>::set_onreadystatechange(LPDISPATCH Param1/*[in]*/)
{
  return (*this)->set_onreadystatechange(Param1);
}

// *********************************************************************//
// DispIntf:  IXMLHttpRequest
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {ED8C108D-4349-11D2-91A4-00C04F7969E8}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::open(BSTR bstrMethod/*[in]*/, BSTR bstrUrl/*[in]*/, 
                              TVariantInParam varAsync/*[in,opt]*/, 
                              TVariantInParam bstrUser/*[in,opt]*/, 
                              TVariantInParam bstrPassword/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("open"), DISPID(1));
  TAutoArgs<5> _args;
  _args[1] = bstrMethod /*[VT_BSTR:0]*/;
  _args[2] = bstrUrl /*[VT_BSTR:0]*/;
  _args[3] = varAsync /*[VT_VARIANT:0]*/;
  _args[4] = bstrUser /*[VT_VARIANT:0]*/;
  _args[5] = bstrPassword /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::setRequestHeader(BSTR bstrHeader/*[in]*/, BSTR bstrValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setRequestHeader"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  _args[2] = bstrValue /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/, BSTR* pbstrValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getResponseHeader"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = bstrHeader /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbstrValue /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHttpRequestDispT<T>::getResponseHeader(BSTR bstrHeader/*[in]*/)
{
  BSTR pbstrValue;
  this->getResponseHeader(bstrHeader, (BSTR*)&pbstrValue);
  return pbstrValue;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::getAllResponseHeaders(BSTR* pbstrHeaders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAllResponseHeaders"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrHeaders /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHttpRequestDispT<T>::getAllResponseHeaders(void)
{
  BSTR pbstrHeaders;
  this->getAllResponseHeaders((BSTR*)&pbstrHeaders);
  return pbstrHeaders;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::send(TVariantInParam varBody/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("send"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = varBody /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::abort()
{
  _TDispID _dispid(*this, OLETEXT("abort"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_status(long* plStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("status"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plStatus /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLHttpRequestDispT<T>::get_status(void)
{
  long plStatus;
  this->get_status((long*)&plStatus);
  return plStatus;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_statusText(BSTR* pbstrStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("statusText"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrStatus /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHttpRequestDispT<T>::get_statusText(void)
{
  BSTR pbstrStatus;
  this->get_statusText((BSTR*)&pbstrStatus);
  return pbstrStatus;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_responseXML(LPDISPATCH* ppBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseXML"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppBody /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IXMLHttpRequestDispT<T>::get_responseXML(void)
{
  LPDISPATCH ppBody;
  this->get_responseXML((LPDISPATCH*)&ppBody);
  return ppBody;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_responseText(BSTR* pbstrBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseText"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrBody /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLHttpRequestDispT<T>::get_responseText(void)
{
  BSTR pbstrBody;
  this->get_responseText((BSTR*)&pbstrBody);
  return pbstrBody;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_responseBody(TVariant* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseBody"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLHttpRequestDispT<T>::get_responseBody(void)
{
  TVariant pvarBody;
  this->get_responseBody((TVariant*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_responseStream(TVariant* pvarBody/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("responseStream"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarBody /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLHttpRequestDispT<T>::get_responseStream(void)
{
  TVariant pvarBody;
  this->get_responseStream((TVariant*)&pvarBody);
  return pvarBody;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::get_readyState(long* plState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLHttpRequestDispT<T>::get_readyState(void)
{
  long plState;
  this->get_readyState((long*)&plState);
  return plState;
}

template <class T> HRESULT __fastcall
IXMLHttpRequestDispT<T>::set_onreadystatechange(LPDISPATCH Param1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("onreadystatechange"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Param1 /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIXMLDSOControl
// Interface: IXMLDSOControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIXMLDSOControlT<T>::get_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/)
{
  return (*this)->get_XMLDocument(ppDoc);
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
TCOMIXMLDSOControlT<T>::get_XMLDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr ppDoc;
  OLECHECK(this->get_XMLDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&ppDoc));
  return ppDoc;
}

template <class T> HRESULT __fastcall
TCOMIXMLDSOControlT<T>::set_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr ppDoc/*[in]*/)
{
  return (*this)->set_XMLDocument(ppDoc);
}

template <class T> HRESULT __fastcall
TCOMIXMLDSOControlT<T>::get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/)
{
  return (*this)->get_JavaDSOCompatible(fJavaDSOCompatible);
}

template <class T> long __fastcall
TCOMIXMLDSOControlT<T>::get_JavaDSOCompatible(void)
{
  long fJavaDSOCompatible;
  OLECHECK(this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible));
  return fJavaDSOCompatible;
}

template <class T> HRESULT __fastcall
TCOMIXMLDSOControlT<T>::set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/)
{
  return (*this)->set_JavaDSOCompatible(fJavaDSOCompatible);
}

template <class T> HRESULT __fastcall
TCOMIXMLDSOControlT<T>::get_readyState(long* state/*[out,retval]*/)
{
  return (*this)->get_readyState(state);
}

template <class T> long __fastcall
TCOMIXMLDSOControlT<T>::get_readyState(void)
{
  long state;
  OLECHECK(this->get_readyState((long*)&state));
  return state;
}

// *********************************************************************//
// DispIntf:  IXMLDSOControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {310AFA62-0575-11D2-9CA9-0060B0EC3D39}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDSOControlDispT<T>::get_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr* ppDoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDocument"), DISPID(65537));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLDOMDocument**)ppDoc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLDOMDocumentPtr __fastcall
IXMLDSOControlDispT<T>::get_XMLDocument(void)
{
  Msxml_tlb::IXMLDOMDocumentPtr ppDoc;
  this->get_XMLDocument((Msxml_tlb::IXMLDOMDocumentPtr*)&ppDoc);
  return ppDoc;
}

template <class T> HRESULT __fastcall
IXMLDSOControlDispT<T>::set_XMLDocument(Msxml_tlb::IXMLDOMDocumentPtr ppDoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("XMLDocument"), DISPID(65537));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLDOMDocument*)ppDoc /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDSOControlDispT<T>::get_JavaDSOCompatible(long* fJavaDSOCompatible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JavaDSOCompatible"), DISPID(65538));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(fJavaDSOCompatible /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDSOControlDispT<T>::get_JavaDSOCompatible(void)
{
  long fJavaDSOCompatible;
  this->get_JavaDSOCompatible((long*)&fJavaDSOCompatible);
  return fJavaDSOCompatible;
}

template <class T> HRESULT __fastcall
IXMLDSOControlDispT<T>::set_JavaDSOCompatible(long fJavaDSOCompatible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JavaDSOCompatible"), DISPID(65538));
  TAutoArgs<1> _args;
  _args[1] = fJavaDSOCompatible /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDSOControlDispT<T>::get_readyState(long* state/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(-525));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(state /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDSOControlDispT<T>::get_readyState(void)
{
  long state;
  this->get_readyState((long*)&state);
  return state;
}

// *********************************************************************//
// DispIntf:  IXMLElementCollection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {65725580-9B5D-11D0-9BFE-00C04FC99C8E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLElementCollectionDispT<T>::set_length(long p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(65537));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementCollectionDispT<T>::get_length(long* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("length"), DISPID(65537));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElementCollectionDispT<T>::get_length(void)
{
  long p;
  this->get_length((long*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLElementCollectionDispT<T>::get__newEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_newEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IXMLElementCollectionDispT<T>::get__newEnum(void)
{
  LPUNKNOWN ppUnk;
  this->get__newEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

template <class T> HRESULT __fastcall
IXMLElementCollectionDispT<T>::item(TVariantInParam var1/*[in,opt]*/, 
                                    TVariantInParam var2/*[in,opt]*/, 
                                    LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("item"), DISPID(65539));
  TAutoArgs<2> _args;
  _args[1] = var1 /*[VT_VARIANT:0]*/;
  _args[2] = var2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IXMLElementCollectionDispT<T>::item(TVariantInParam var1/*[in,opt]*/, 
                                    TVariantInParam var2/*[in,opt]*/)
{
  LPDISPATCH ppDisp;
  this->item(var1, var2, (LPDISPATCH*)&ppDisp);
  return ppDisp;
}

// *********************************************************************//
// DispIntf:  IXMLDocument
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F52E2B61-18A1-11D1-B105-00805F49916B}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_root(Msxml_tlb::IXMLElementPtr* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("root"), DISPID(65637));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElement**)p /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementPtr __fastcall
IXMLDocumentDispT<T>::get_root(void)
{
  Msxml_tlb::IXMLElementPtr p;
  this->get_root((Msxml_tlb::IXMLElementPtr*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_fileSize(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileSize"), DISPID(65638));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileSize(void)
{
  BSTR p;
  this->get_fileSize((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_fileModifiedDate(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileModifiedDate"), DISPID(65639));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileModifiedDate(void)
{
  BSTR p;
  this->get_fileModifiedDate((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_fileUpdatedDate(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("fileUpdatedDate"), DISPID(65640));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_fileUpdatedDate(void)
{
  BSTR p;
  this->get_fileUpdatedDate((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_url(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(65641));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_url(void)
{
  BSTR p;
  this->get_url((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::set_url(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("url"), DISPID(65641));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_mimeType(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mimeType"), DISPID(65642));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_mimeType(void)
{
  BSTR p;
  this->get_mimeType((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_readyState(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("readyState"), DISPID(65643));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLDocumentDispT<T>::get_readyState(void)
{
  long pl;
  this->get_readyState((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_charset(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("charset"), DISPID(65645));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_charset(void)
{
  BSTR p;
  this->get_charset((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::set_charset(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("charset"), DISPID(65645));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_version(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("version"), DISPID(65646));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_version(void)
{
  BSTR p;
  this->get_version((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_doctype(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("doctype"), DISPID(65647));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_doctype(void)
{
  BSTR p;
  this->get_doctype((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::get_dtdURL(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("dtdURL"), DISPID(65648));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLDocumentDispT<T>::get_dtdURL(void)
{
  BSTR p;
  this->get_dtdURL((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLDocumentDispT<T>::createElement(TVariantInParam vType/*[in]*/, TVariantInParam var1/*[in,opt]*/
                                    , Msxml_tlb::IXMLElementPtr* ppElem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("createElement"), DISPID(65644));
  TAutoArgs<2> _args;
  _args[1] = vType /*[VT_VARIANT:0]*/;
  _args[2] = var1 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElement**)ppElem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementPtr __fastcall
IXMLDocumentDispT<T>::createElement(TVariantInParam vType/*[in]*/, TVariantInParam var1/*[in,opt]*/)
{
  Msxml_tlb::IXMLElementPtr ppElem;
  this->createElement(vType, var1, (Msxml_tlb::IXMLElementPtr*)&ppElem);
  return ppElem;
}

// *********************************************************************//
// DispIntf:  IXMLElement
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3F7F31AC-E15F-11D0-9C25-00C04FC99C8E}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLElementDispT<T>::get_tagName(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElementDispT<T>::get_tagName(void)
{
  BSTR p;
  this->get_tagName((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::set_tagName(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::get_parent(Msxml_tlb::IXMLElementPtr* ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(65738));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElement**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementPtr __fastcall
IXMLElementDispT<T>::get_parent(void)
{
  Msxml_tlb::IXMLElementPtr ppParent;
  this->get_parent((Msxml_tlb::IXMLElementPtr*)&ppParent);
  return ppParent;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::setAttribute(BSTR strPropertyName/*[in]*/, 
                                  TVariantInParam PropertyValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(65739));
  TAutoArgs<2> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  _args[2] = PropertyValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::getAttribute(BSTR strPropertyName/*[in]*/, 
                                  TVariant* PropertyValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(65740));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(PropertyValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLElementDispT<T>::getAttribute(BSTR strPropertyName/*[in]*/)
{
  TVariant PropertyValue;
  this->getAttribute(strPropertyName, (TVariant*)&PropertyValue);
  return PropertyValue;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::removeAttribute(BSTR strPropertyName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(65741));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("children"), DISPID(65742));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementCollectionPtr __fastcall
IXMLElementDispT<T>::get_children(void)
{
  Msxml_tlb::IXMLElementCollectionPtr pp;
  this->get_children((Msxml_tlb::IXMLElementCollectionPtr*)&pp);
  return pp;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::get_type(long* plType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(65743));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElementDispT<T>::get_type(void)
{
  long plType;
  this->get_type((long*)&plType);
  return plType;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::get_text(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElementDispT<T>::get_text(void)
{
  BSTR p;
  this->get_text((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::set_text(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::addChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/, long lIndex, 
                              long lReserved)
{
  _TDispID _dispid(*this, OLETEXT("addChild"), DISPID(65745));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLElement*)pChildElem /*[VT_USERDEFINED:1]*/;
  _args[2] = lIndex /*[VT_I4:0]*/;
  _args[3] = lReserved /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElementDispT<T>::removeChild(Msxml_tlb::IXMLElementPtr pChildElem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(65746));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLElement*)pChildElem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IXMLElement2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2B8DE2FF-8D2D-11D1-B2FC-00C04FD915A9}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_tagName(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElement2DispT<T>::get_tagName(void)
{
  BSTR p;
  this->get_tagName((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::set_tagName(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("tagName"), DISPID(65737));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_parent(Msxml_tlb::IXMLElement2Ptr* ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("parent"), DISPID(65738));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElement2**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElement2Ptr __fastcall
IXMLElement2DispT<T>::get_parent(void)
{
  Msxml_tlb::IXMLElement2Ptr ppParent;
  this->get_parent((Msxml_tlb::IXMLElement2Ptr*)&ppParent);
  return ppParent;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::setAttribute(BSTR strPropertyName/*[in]*/, 
                                   TVariantInParam PropertyValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("setAttribute"), DISPID(65739));
  TAutoArgs<2> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  _args[2] = PropertyValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::getAttribute(BSTR strPropertyName/*[in]*/, 
                                   TVariant* PropertyValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("getAttribute"), DISPID(65740));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(PropertyValue /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
IXMLElement2DispT<T>::getAttribute(BSTR strPropertyName/*[in]*/)
{
  TVariant PropertyValue;
  this->getAttribute(strPropertyName, (TVariant*)&PropertyValue);
  return PropertyValue;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::removeAttribute(BSTR strPropertyName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeAttribute"), DISPID(65741));
  TAutoArgs<1> _args;
  _args[1] = strPropertyName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_children(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("children"), DISPID(65742));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementCollectionPtr __fastcall
IXMLElement2DispT<T>::get_children(void)
{
  Msxml_tlb::IXMLElementCollectionPtr pp;
  this->get_children((Msxml_tlb::IXMLElementCollectionPtr*)&pp);
  return pp;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_type(long* plType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("type"), DISPID(65743));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IXMLElement2DispT<T>::get_type(void)
{
  long plType;
  this->get_type((long*)&plType);
  return plType;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_text(BSTR* p/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(p /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLElement2DispT<T>::get_text(void)
{
  BSTR p;
  this->get_text((BSTR*)&p);
  return p;
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::set_text(BSTR p/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("text"), DISPID(65744));
  TAutoArgs<1> _args;
  _args[1] = p /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::addChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/, long lIndex, 
                               long lReserved)
{
  _TDispID _dispid(*this, OLETEXT("addChild"), DISPID(65745));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLElement2*)pChildElem /*[VT_USERDEFINED:1]*/;
  _args[2] = lIndex /*[VT_I4:0]*/;
  _args[3] = lReserved /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::removeChild(Msxml_tlb::IXMLElement2Ptr pChildElem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("removeChild"), DISPID(65746));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Msxml_tlb::IXMLElement2*)pChildElem /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IXMLElement2DispT<T>::get_attributes(Msxml_tlb::IXMLElementCollectionPtr* pp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("attributes"), DISPID(65747));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Msxml_tlb::IXMLElementCollection**)pp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Msxml_tlb::IXMLElementCollectionPtr __fastcall
IXMLElement2DispT<T>::get_attributes(void)
{
  Msxml_tlb::IXMLElementCollectionPtr pp;
  this->get_attributes((Msxml_tlb::IXMLElementCollectionPtr*)&pp);
  return pp;
}

// *********************************************************************//
// DispIntf:  IXMLAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D4D4A0FC-3B73-11D1-B2B4-00C04FB92596}
// *********************************************************************//
template <class T> HRESULT __fastcall
IXMLAttributeDispT<T>::get_name(BSTR* n/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("name"), DISPID(65937));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(n /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLAttributeDispT<T>::get_name(void)
{
  BSTR n;
  this->get_name((BSTR*)&n);
  return n;
}

template <class T> HRESULT __fastcall
IXMLAttributeDispT<T>::get_value(BSTR* v/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("value"), DISPID(65938));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(v /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IXMLAttributeDispT<T>::get_value(void)
{
  BSTR v;
  this->get_value((BSTR*)&v);
  return v;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DOMDocument
// Interface: TCOMIXMLDOMDocument
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument, IXMLDOMDocument, &CLSID_DOMDocument, &IID_IXMLDOMDocument> CoDOMDocument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DOMFreeThreadedDocument
// Interface: TCOMIXMLDOMDocument
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDOMDocument, IXMLDOMDocument, &CLSID_DOMFreeThreadedDocument, &IID_IXMLDOMDocument> CoDOMFreeThreadedDocument;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : XMLHTTPRequest
// Interface: TCOMIXMLHttpRequest
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLHttpRequest, IXMLHttpRequest, &CLSID_XMLHTTPRequest, &IID_IXMLHttpRequest> CoXMLHTTPRequest;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : XMLDSOControl
// Interface: TCOMIXMLDSOControl
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIXMLDSOControl, IXMLDSOControl, &CLSID_XMLDSOControl, &IID_IXMLDSOControl> CoXMLDSOControl;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : XMLDocument
// Interface: IXMLDocument2Disp
// *********************************************************************//
typedef TCoClassCreatorT<IXMLDocument2Disp, IXMLDocument2, &CLSID_XMLDocument, &IID_IXMLDocument2> CoXMLDocument;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DOMDocument
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_DOMDocument : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_DOMDocument<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_DOMDocument<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : DOMFreeThreadedDocument
// Event Interface : XMLDOMDocumentEvents
// *********************************************************************//
template <class T>
class TEvents_DOMFreeThreadedDocument : public IConnectionPointImpl<T,
                                                 &DIID_XMLDOMDocumentEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
{
public:
  HRESULT         Fire_ondataavailable(void);
  HRESULT         Fire_onreadystatechange(void);
protected:
  XMLDOMDocumentEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_DOMFreeThreadedDocument<T>::Fire_ondataavailable(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ondataavailable();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_DOMFreeThreadedDocument<T>::Fire_onreadystatechange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.onreadystatechange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Msxml_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Msxml_tlb;
#endif

#pragma option pop

#endif // __MSXML_TLB_h__
